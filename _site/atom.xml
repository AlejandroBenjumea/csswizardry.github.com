<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>inuit.css</title>
 <link href="http://inuitcss.com/atom.xml" rel="self"/>
 <link href="http://inuitcss.com/"/>
 <updated>2012-12-16T14:59:36+00:00</updated>
 <id>http://inuitcss.com/</id>
 <author>
   <name>Harry Roberts</name>
   <email>harry@csswizardry.com</email>
 </author>

 
 <entry>
   <title>Open Sourceome</title>
   <link href="http://inuitcss.com/2012/12/open-sourceome"/>
   <updated>2012-12-09T22:27:31+00:00</updated>
   <id>http://inuitcss.com/2012/12/open-sourceome</id>
   <content type="html">&lt;p&gt;This is a bit of an odd post with no real point as such, so please bear with me, but I got thinking today about various things, and how I am &lt;em&gt;constantly&lt;/em&gt; amazed by our industry’s open source efforts. I just launched &lt;a href=&quot;http://inuitcss.com&quot;&gt;a blog for inuit.css&lt;/a&gt; and, in the process, the amount of open source and/or free stuff that was being used really astounded me.&lt;/p&gt;

&lt;p&gt;So, let’s start at the beginning… I made a blog for my free, open source CSS framework &lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt;, which runs on the open source &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass preprocessor&lt;/a&gt;. The blog itself is built upon said framework as well as the open source &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt; site generator. The source code is managed with the open source &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; and &lt;a href=&quot;https://github.com/csswizardry/inuit.css&quot;&gt;the repository&lt;/a&gt; is hosted free of charge on &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;. The blog itself is hosted for free with &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wrote the blog—and large parts of inuit.css—using &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt;, a free, open source text editor (incidentally, the majority of my &lt;code&gt;.vimrc&lt;/code&gt; was sourced from &lt;a href=&quot;https://github.com/mtarbit/dotfiles&quot;&gt;Matt Tarbit’s freely available dotfiles&lt;/a&gt; (again, on GitHub)). The blog uses the freely available &lt;a href=&quot;http://font.ubuntu.com/&quot;&gt;Ubuntu font&lt;/a&gt; which is served from the free &lt;a href=&quot;http://www.google.com/webfonts&quot;&gt;Google Web Fonts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One tiny blog, currently at two very short posts, is powered by &lt;em&gt;so many&lt;/em&gt; totally free things. Literally the most   expensive single thing (speaking from purely monetary point of view) behind inuit.css is the domain name, which was under £10 for a year.&lt;/p&gt;

&lt;p&gt;I’m so happy to be contributing—in my own small way—to a field that’s already so &lt;em&gt;teeming&lt;/em&gt; with freely available resources, and this is a bit of an aimless and indirect thanks. People sharing things rocks. I have no doubt &lt;em&gt;at all&lt;/em&gt; that inuit.css would have never happened without things like GitHub. Free things seem to spawn other free things.&lt;/p&gt;

&lt;p&gt;In recent months I’ve consciously steered away from weighing in on Twitter-based ‘disagreements’ etcetera because I just don’t want that stuff. I don’t have the desire to be involved in any negativity when I’m surrounded by people—&lt;a href=&quot;http://bootboxjs.com/&quot;&gt;personal&lt;/a&gt; &lt;a href=&quot;http://jaoss.org/&quot;&gt;friends&lt;/a&gt; &lt;a href=&quot;http://www.resrc.it/&quot;&gt;included&lt;/a&gt;—who are too busy getting on with awesome stuff that they love doing &lt;em&gt;so much&lt;/em&gt; that they literally give it away for free. That’s too cool to go by unnoticed.&lt;/p&gt;

&lt;p&gt;Anyway, apologies for a seemingly aimless post, but I just wanted to offer some sort of broad thanks to all the chaps and chappettes who pour their all into giving stuff away. It makes everything better.&lt;/p&gt;

&lt;h2&gt;Addendum&lt;/h2&gt;

&lt;p&gt;I’ve just been reminded of something else, too. &lt;a href=&quot;https://twitter.com/adamwhitcroft&quot;&gt;Adam Whitcroft&lt;/a&gt; recently created &lt;a href=&quot;http://adamwhitcroft.com/batch/&quot;&gt;Batch&lt;/a&gt;, a beautiful icon set that he put together over a number of weeks. Batch was initially a paid download, and why not? It’s gorgeous and clearly had a &lt;em&gt;lot&lt;/em&gt; of effort put into it. However &lt;a href=&quot;http://adamwhitcroft.com/2012/11/on-batch/&quot;&gt;he reversed that decision&lt;/a&gt; and decided to make Batch available for free, but not only that, he &lt;strong&gt;refunded&lt;/strong&gt; those who’d already paid. I don’t know if it’s just me, but that felt like such a huge gesture; making something, dropping the price tag, &lt;em&gt;and&lt;/em&gt; returning any money that had previously been handed over. Awesome.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My Git workflow for inuit.css</title>
   <link href="http://inuitcss.com/2012/12/my-git-workflow-for-inuit-css"/>
   <updated>2012-12-06T19:32:35+00:00</updated>
   <id>http://inuitcss.com/2012/12/my-git-workflow-for-inuit-css</id>
   <content type="html">&lt;p&gt;This is a bit of an unusual article from me, it doesn’t mention OOCSS &lt;em&gt;once&lt;/em&gt;! It’s about Git…&lt;/p&gt;

&lt;p&gt;I’ve been putting &lt;em&gt;massive&lt;/em&gt; effort into learning a lot more about Git lately; I’ve been using it at work for over a year now, but only ever the more basic bits; &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;. I’m now finally starting to feel like I ‘get’ Git; I don’t just go through the motions of ‘first I type this then I type this’, I actually get what and why I’m doing things, and it feels awesome.&lt;/p&gt;

&lt;p&gt;As such, the way I work on &lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt; is (just) starting to change massively. I’m writing up my workflow, not to sound all preachy about how awesome I am at Git because—believe me—I know &lt;em&gt;nothing&lt;/em&gt;. I’m writing it up in the hope that people can share improvements, modifications, alterations, disagreements or anything like that to keep me on this roll.&lt;/p&gt;

&lt;p&gt;The stuff I’ve learned thus far is thanks in no small part to the people I work with, to mention a notable few; &lt;a href=&quot;https://github.com/JamesBarwell&quot;&gt;James Barwell&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/makeusabrew&quot;&gt;Nick Payne&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/craiga&quot;&gt;Craig Andrews&lt;/a&gt;. There are likely more that I’ve forgotten, but these are the guys I pester the most!&lt;/p&gt;

&lt;h2&gt;New work, new branch&lt;/h2&gt;

&lt;p&gt;One thing I’m starting to stick to now is that &lt;em&gt;all&lt;/em&gt; work happens in a topic branch. Nothing should get done in &lt;code&gt;master&lt;/code&gt; at all, &lt;code&gt;master&lt;/code&gt; should &lt;em&gt;always&lt;/em&gt; be stable, clean, and theoretically ready for a release at any given moment. As such, any new feature, or a fix, or anything, happens in its own topic branch. For the sake of this writeup let’s imagine that I am adding some responsive features in a branch called &lt;code&gt;feature/responsive&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Firstly, I make sure my local copy of &lt;code&gt;master&lt;/code&gt; is fully up to date with remote. After &lt;code&gt;push&lt;/code&gt;ing and &lt;code&gt;pull&lt;/code&gt;ing to ensure everything is good, I create my topic branch off of &lt;code&gt;master&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;$ git checkout -b feature/responsive &amp;amp;&amp;amp; git push -u&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two things happening here, firstly I check out a branch called &lt;code&gt;feature/responsive&lt;/code&gt; (that didn’t yet exist). This is what &lt;code&gt;git checkout -b feature/responsive&lt;/code&gt; does.&lt;/p&gt;

&lt;p&gt;Next, I want to set &lt;code&gt;feature/responsive&lt;/code&gt; to track a remote branch of the same name, this is the &lt;code&gt;git push -u&lt;/code&gt; (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; is just an operator, and allows me to chain commands). This second command just means that I can run &lt;code&gt;git push&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt; as just that. Without setting up remote tracking, I would have to run &lt;code&gt;git push origin feature/responsive&lt;/code&gt; and &lt;code&gt;git pull origin feature/responsive&lt;/code&gt; every time; far from ideal.&lt;/p&gt;

&lt;p&gt;Now I have a local branch set up called &lt;code&gt;feature/responsive&lt;/code&gt;, that tracks a remote branch of the same name, and I’m ready to work in it.&lt;/p&gt;

&lt;h2&gt;Git to work&lt;/h2&gt;

&lt;p&gt;Now I start doing all my work in this branch. If it’s to do with responsive stuff, this is where it goes. One rule I try and stick by is ‘commit early and commit often’. After every discrete chunk of work, commit; this might mean committing ‘Add media query mixin’, ‘Set up grid system media queries’, ‘Add grid states to media queries’. These are very granular, logical commits. Committing is fast and easy, it’s better to commit too often than not often enough.&lt;/p&gt;

&lt;p&gt;Committing is &lt;em&gt;usually&lt;/em&gt; as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;$ git commit -am &quot;$COMMIT_MESSAGE&quot;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For any commits that need files adding to Git, or need adding individually, I just break this out to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;$ git add $FILES_TO_ADD
$ git commit -m &quot;$COMMIT_MESSAGE&quot;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I get too carried away, and do more-than-one-logical-commit’s-worth-of-work in a single file, I can run &lt;code&gt;git add -p $PATH_TO_FILE&lt;/code&gt; in order to add ‘hunks’ of changes from one file, rather than the whole file itself. This is a pretty awesome feature, but one I’ve not used &lt;em&gt;that&lt;/em&gt; much yet.&lt;/p&gt;

&lt;h2&gt;Completing the feature&lt;/h2&gt;

&lt;p&gt;It is worth noting that most features, like this one, can be quantified and deemed ‘complete’, but a branch like &lt;code&gt;misc-typo-fixes&lt;/code&gt; will have a potentially infinite lifespan and &lt;em&gt;cannot&lt;/em&gt; usually be considered ‘done’. Depending on this, the next parts of my workflow may differ. If the feature &lt;em&gt;does&lt;/em&gt; have finite scope—and can be deemed ‘done’—then once I’m happy with it, I &lt;code&gt;diff&lt;/code&gt; it against &lt;code&gt;master&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;$ git diff master feature/responsive&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows me to review any changes visually, check my work, and hopefully spot anything that needs spotting. If this final check goes well (and inuit.css still compiles, and nothing breaks) then I’m almost ready for merging it into &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Rebasing&lt;/h2&gt;

&lt;p&gt;This next thing, so I’m told, massively divides the Git community. It’s like IDs for Git users or something… I find rebasing, when used properly, &lt;em&gt;incredibly&lt;/em&gt; useful. There are some people who loathe it—and will never use it—and that’s cool. I don’t know enough to have too strong an opinion, but I like using it. As with most things, with great power comes great responsibility…&lt;/p&gt;

&lt;p&gt;Because &lt;code&gt;feature/responsive&lt;/code&gt; is a private, development only, non-production branch, I can rebase it. Rebasing basically allows you to, among other things, reword, reorder and squash commits. This is the important bit; &lt;strong&gt;it fiddles with your Git history&lt;/strong&gt;, and this is why people dislike it. Once you have pushed and/or shared a branch, you should see it as having missed the boat, and you cannot rebase. Rewriting Git history on a shared branch is dangerous territory. Anyway…&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, I like to commit a lot. Frequent commits, committing as I think, not taking great care over them, writing them for my train of thought as opposed to for anyone else to make sense of. As such, it’s not unusual to end up with a commit history like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add media query mixin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add missing semi colon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Put MQs into use in grids file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix typo&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add comments explaining stuff&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whitespace&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Looking at these commits, it’s pretty slapdash. That’s cool though, I committed as I worked, this is an accurate representation of what I did, however there are a few things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In a team environment—where people have to merge your work for you—they’re seeing a lot of pointless commits. It’s more for them to read and review (note, the actual commit messages, not so much the code in them).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The typo and trailing semi-colon commits kinda make me look a bit stupid.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There will be no desire to ever roll back to a stage in the commit history where the code &lt;em&gt;didn’t&lt;/em&gt; have that semi-colon, so being &lt;em&gt;able&lt;/em&gt; to roll back to that point seems silly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If we’re being totally honest, these could all be summed up in one as ‘Add responsive grid system’.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What we do now is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;$ git rebase master -i&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this does is replays those commits against &lt;code&gt;master&lt;/code&gt; and interactively (&lt;code&gt;-i&lt;/code&gt;) allows us to modify them. Running that command might leave you looking at something a little like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;pick 64073f0 Add media query mixin                                                                                                                                                                         
pick 4ebe438 Add missing semi colon
pick 987d093 Put MQs into use in grids file
pick 324f2a2 Fix typo
pick df0321b Add comments explaining stuff
pick 1ed9323 Whitespace&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The word &lt;code&gt;pick&lt;/code&gt; can be replaced with a number of things, but the most common ones I use are &lt;code&gt;r&lt;/code&gt;, for &lt;em&gt;reword&lt;/em&gt; (we want to edit the commit message) and &lt;code&gt;s&lt;/code&gt;, for &lt;em&gt;squash&lt;/em&gt; (we want to squash that commit into the previous one).&lt;/p&gt;

&lt;p&gt;What we want to do here is squash all of those commits into one nice one, something like ‘Add responsive grid system’. We need to modify the above to look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;pick 64073f0 Add media query mixin                                                                                                                                                                         
s 4ebe438 Add missing semi colon
s 987d093 Put MQs into use in grids file
s 324f2a2 Fix typo
s df0321b Add comments explaining stuff
s 1ed9323 Whitespace&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can continue on our way and squash all those commits into the top one (that we automatically get the chance to reword by default).&lt;/p&gt;

&lt;p&gt;Now if we were to run a &lt;code&gt;git log&lt;/code&gt; on &lt;code&gt;feature/responsive&lt;/code&gt;, instead of the six nasty commits, we get one shiny new one, that is much more friendly.&lt;/p&gt;

&lt;p&gt;Please use discretion when rebasing; only rebase if you &lt;em&gt;really&lt;/em&gt; feel you need to, and only squash into as many commits as makes sense, &lt;strong&gt;no less&lt;/strong&gt;. If you end up with ten commits and you feel that you need to keep all ten then by all means, please do so. Only rebase if and when necessary and/or appropriate.&lt;/p&gt;

&lt;h2&gt;Back to master&lt;/h2&gt;

&lt;p&gt;Now we have all our work completed and our commits nicely tidied up, we need to get &lt;code&gt;feature/responsive&lt;/code&gt; back into &lt;code&gt;master&lt;/code&gt;, ready for release.&lt;/p&gt;

&lt;p&gt;To do this, simply check out &lt;code&gt;master&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;$ git checkout master&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then merge &lt;code&gt;feature/responsive&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;$ git merge feature/responsive --no-ff&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This simply merges our topic branch back into &lt;code&gt;master&lt;/code&gt; and forces a merge commit (massive thanks to &lt;a href=&quot;https://twitter.com/makeusabrew&quot;&gt;Nick&lt;/a&gt; for this one). Git will, if it can, merge branches using &lt;em&gt;fast forward&lt;/em&gt;, which basically means that it will create a ‘seamless’ merge. Merging without &lt;code&gt;--no-ff&lt;/code&gt; will just add the commits from &lt;code&gt;feature/responsive&lt;/code&gt; onto the end of &lt;code&gt;master&lt;/code&gt; as though &lt;code&gt;feature/responsive&lt;/code&gt; never existed; it fast forwards &lt;code&gt;master&lt;/code&gt; to be at the same point as &lt;code&gt;feature/responsive&lt;/code&gt;. A &lt;code&gt;git log&lt;/code&gt; has no mention or idea of any other branches and might look like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add normalize.css&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add responsive grid system&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;To leave a neater paper trail, and show where everything came from, merging with &lt;code&gt;--no-ff&lt;/code&gt; would make our &lt;code&gt;git log&lt;/code&gt; look like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add normalize.css&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Merge branch 'feature/normalize'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add responsive grid system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Merge branch 'feature/responsive'&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;So &lt;code&gt;--no-ff&lt;/code&gt; basically just gives us a merge commit and a nicer paper trail.&lt;/p&gt;

&lt;h2&gt;Good to go&lt;/h2&gt;

&lt;p&gt;Once that’s all done, I’m ready to push this feature live:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;$ git push&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now I want to tag that latest commit with a version number, so I run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;$ git tag v$VERSION_NUMBER &amp;amp;&amp;amp; git push --tags&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tags the latest commit and then pushes the tags to my remote.&lt;/p&gt;

&lt;p&gt;Now I have a nice commit history, with merge commits, and a new tag that points to that particular snapshot of the project.&lt;/p&gt;

&lt;p&gt;That, in a nutshell, is my Git workflow now for inuit.css. I’m still taking baby steps with Git, but I am loving it, and I’m learning more and more each day from a lot of awesome people.&lt;/p&gt;

&lt;p&gt;If anyone has any suggestions as to how I might improve or streamline my workflow I’d be really grateful to hear them; along with Vim, I’m finding Git a lot of fun right now! I’d also &lt;em&gt;really&lt;/em&gt; like to hear more pro-/anti-rebase opinions and &lt;em&gt;definitely&lt;/em&gt; any glaring errors or mistakes with anything I’m doing.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;H&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Code smells in CSS</title>
   <link href="http://inuitcss.com/2012/11/code-smells-in-css"/>
   <updated>2012-11-20T23:58:13+00:00</updated>
   <id>http://inuitcss.com/2012/11/code-smells-in-css</id>
   <content type="html">&lt;p&gt;Chris Coyier &lt;a href=&quot;http://coding.smashingmagazine.com/2012/07/13/coding-qa-with-chris-coyier-code-smell-type-grid/&quot;&gt;recently answered&lt;/a&gt; someone’s question:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“How can you tell if your CSS code smells? What are the signs that the code is sub-optional, or that the developer hasn’t done a good job? What do you look for in the code to determine how good or bad it is?”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought I would extend Chris’ great answer with my own, additional take on things…&lt;/p&gt;

&lt;p&gt;My day-to-day life is spent working in-house at BSkyB… I work on big websites, the last of which took me over a year to build the front-end for (and it’s still ongoing). For me, in my world, bad CSS is a very specific and troublesome thing; when you’re working on one site for months on end, you can’t afford poor code, be it CSS or otherwise, and any bad code needs righting.&lt;/p&gt;

&lt;p&gt;I’m going to share just a few things (there will, no doubt, be things that I have missed) that I look out for in CSS that will give you and idea as to its quality, its maintainability and its integrity…&lt;/p&gt;

&lt;h2&gt;Undoing styles&lt;/h2&gt;

&lt;p&gt;Any CSS that unsets styles (apart from in a reset) should start ringing alarm bells right away. The very nature of CSS is that things will, well, cascade and inherit from things defined previously. Rulesets should only ever inherit and add to previous ones, never undo.&lt;/p&gt;

&lt;p&gt;Any CSS declarations like these:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;border-bottom:none;
padding:0;
float:none;
margin-left:0;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…are &lt;em&gt;typically&lt;/em&gt; bad news. If you are having to remove borders, you probably applied them too early. This is really hard to explain so I’ll go with a simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h2{
    font-size:2em;
    margin-bottom:0.5em;
    padding-bottom:0.5em;
    border-bottom:1px solid #ccc;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we’re giving all &lt;code&gt;h2&lt;/code&gt;s our usual &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;margin&lt;/code&gt; for spacing, but also a bit of &lt;code&gt;padding&lt;/code&gt; and a keyline on the bottom edge to visually separate it from the next element on the page. But, perhaps we have a circumstance in which we &lt;strong&gt;don’t&lt;/strong&gt; want that keyline, perhaps we have a situation where we want a &lt;code&gt;h2&lt;/code&gt; to not have that &lt;code&gt;border&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt;. We’d likely end up with something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h2{
    font-size:2em;
    margin-bottom:0.5em;
    padding-bottom:0.5em;
    border-bottom:1px solid #ccc;
}
.no-border{
    padding-bottom:0;
    border-bottom:none;
}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have ten lines of CSS and one ugly class name. What would have been better is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h2{
    font-size:2em;
    margin-bottom:0.5em;
}
.headline{
    padding-bottom:0.5em;
    border-bottom:1px solid #ccc;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have eight lines of CSS, no undoing anything, and a nice, sensible class name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As you go down a stylesheet you should only ever be adding styles, not taking away.&lt;/strong&gt; If you find you are having to undo styling as you go down your document the chances are you jumped the gun and started adding too much too soon.&lt;/p&gt;

&lt;p&gt;This was a very timid example, but it helps illustrate my point perfectly. Imagine CSS like this over tens of thousands of lines… that’s a lot of bloat and a lot of unnecessary undoing. Peg things onto simpler things that came before it, do not start too complex and risk having to undo your work later on; you’ll end up &lt;strong&gt;writing more CSS to achieve less styling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As soon as I see CSS that undoes previous styling, I can be pretty sure that it’s because something was poorly architected and that the order in which things were built/written needs a rework.&lt;/p&gt;

&lt;h2&gt;Magic numbers&lt;/h2&gt;

&lt;p&gt;These are a particular bugbear of mine. I &lt;em&gt;loathe&lt;/em&gt; magic numbers.&lt;/p&gt;

&lt;p&gt;A magic number is a value that is used ‘because it just works’. Take the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.site-nav{
    [styles]
}
    .site-nav &amp;gt; li:hover .dropdown{
        position:absolute;
        &amp;lt;mark&amp;gt;top:37px;&amp;lt;/mark&amp;gt;
        left:0;
    }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;top:37px;&lt;/code&gt; here is a magic number; the only reason it works, presumably, is because the &lt;code&gt;li&lt;/code&gt;s inside &lt;code&gt;.site-nav&lt;/code&gt; &lt;em&gt;happen&lt;/em&gt; to be 37px tall, and the &lt;code&gt;.dropdown&lt;/code&gt; flyout menu needs to appear at the bottom of it.&lt;/p&gt;

&lt;p&gt;The problem here is that 37px is &lt;em&gt;entirely&lt;/em&gt; circumstantial and as such, we should place no faith in that number. What if someone changes the &lt;code&gt;font-size&lt;/code&gt; in &lt;code&gt;.site-nav&lt;/code&gt; and now everything is 29px tall? This number is no longer valid and the next dev needs to know to update it.&lt;/p&gt;

&lt;p&gt;What happens when Chrome &lt;em&gt;does&lt;/em&gt; render the &lt;code&gt;li&lt;/code&gt;s at 37px, but IE renders it at 36px? That number only works in one situation.&lt;/p&gt;

&lt;p&gt;Never, &lt;em&gt;ever&lt;/em&gt; use numbers just because they work. In this situation we’d be far better off replacing &lt;code&gt;top:37px;&lt;/code&gt; with &lt;code&gt;top:100%;&lt;/code&gt;, which basically means ‘all the way from the top’.&lt;/p&gt;

&lt;p&gt;Magic numbers have several problems associated with them. As above, they cannot be relied upon, but also, with their very ‘just because it works’ nature, it’s difficult to communicate to another dev where that number came from. If you had a more complex example which used a magic number—and that magic number became invalid—you are faced with one or more of the following problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The next dev doesn’t know where the magic number came from, so they delete it and are back at square one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The next dev is a cautious dev who, because he doesn’t know where the magic number came from, decides to try and fix the problem without touching that magic number. This means that an old, outdated, hacky magic number stays in the code, and the next dev simply hacks away on top of it. You are now hacking on top of a hack.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Magic numbers are bad news; they soon become out of date, they confuse other developers, they cannot be explained, they cannot be trusted.&lt;/p&gt;

&lt;p&gt;There’s nothing worse than hitting someone else’s code and seeing an inexplicable number. You’re left wondering what the hell it does, why it’s needed and whether or not you should dare touch it.&lt;/p&gt;

&lt;p&gt;As soon as I see magic numbers in CSS I start asking questions. Why is this here? What does it do? Why does that number work? How can you achieve the same without that magic number?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Avoid magic numbers like the plague.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Qualified selectors&lt;/h2&gt;

&lt;p&gt;Qualified selectors are ones like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;ul.nav{}
a.button{}
div.header{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, selectors who are needlessly prepended by an element. These are bad news because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;They totally inhibit reusability on another element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They increase specificity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They increase browser workload (decreasing performance).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These are all bad traits. Those selectors can, and should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.nav{}
.button{}
.header{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I know I can apply &lt;code&gt;.nav&lt;/code&gt; to an &lt;code&gt;ol&lt;/code&gt;, I can apply &lt;code&gt;.button&lt;/code&gt; to an &lt;code&gt;input&lt;/code&gt;, and—when the site gets ported over to HTML5—I can quickly swap out my header &lt;code&gt;div&lt;/code&gt; for a &lt;code&gt;header&lt;/code&gt; element without worrying about invalidating any styles.&lt;/p&gt;

&lt;p&gt;With regards performance, this is only a very slight issue, however it is an issue nonetheless. Why make a browser look for a class &lt;code&gt;.button&lt;/code&gt; on an &lt;code&gt;a&lt;/code&gt; when you could just ask it to look for &lt;code&gt;.button&lt;/code&gt; and be done? By qualifying selectors you are increasing a browser’s workload.&lt;/p&gt;

&lt;p&gt;More extreme examples might be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;ul.nav li.active a{}
div.header a.logo img{}
.content ul.features a.button&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of these selectors can be trimmed down massively, or totally rewritten, to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.nav .active a{}
.logo &amp;gt; img {}
.features-button{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will help us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Save actual amounts of code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Increase performance&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow greater portability&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduce specificity&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As soon as I spot overqualified selectors when I scroll down a stylesheet I instantly want to know why they’re written so verbosely and how we can trim them down to as short as possible.&lt;/p&gt;

&lt;h2&gt;Hard-coded/absolute values&lt;/h2&gt;

&lt;p&gt;Not unlike magic numbers, hard-coded values are also bad news. A hard-coded value might be something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h1{
    font-size:24px;
    &amp;lt;mark&amp;gt;line-height:32px;&amp;lt;/mark&amp;gt;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;line-height:32px;&lt;/code&gt; here is not cool, it should be &lt;code&gt;line-height:1.333&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;Line heights should always be set relatively in order to make them more forgiving and flexible. If you ever change the &lt;code&gt;font-size&lt;/code&gt; of a &lt;code&gt;h1&lt;/code&gt;, you want to know that your &lt;code&gt;line-height&lt;/code&gt; will track it. Not having a relative &lt;code&gt;line-height&lt;/code&gt; means that if you ever need to modify a &lt;code&gt;h1&lt;/code&gt; you will likely end up with something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h1{
    font-size:24px;
    line-height:32px;
}

/**
 * Main site `h1`
 */
.site-title{
    font-size:36px;
    line-height:48px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we need to keep on adding fixed &lt;code&gt;line-heights&lt;/code&gt; indefinitely as our initial one was never flexible enough. With a unitless and/or relative &lt;code&gt;line-height&lt;/code&gt;, we’d have simply needed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h1{
    font-size:24px;
    line-height:1.333;
}

/**
 * Main site `h1`
 */
.site-title{
    font-size:36px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This may not seem like a massive difference, but on every text element over a large project, this has a big impact.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; this applies to a &lt;em&gt;lot&lt;/em&gt; more than just &lt;code&gt;line-heights&lt;/code&gt;; basically &lt;em&gt;any&lt;/em&gt; hard-coded absolute in a stylesheet needs treating with caution and suspicion.&lt;/p&gt;

&lt;p&gt;Hard-coded values are not very future proof, flexible or forgiving, and thus should be avoided. The only things that should ever &lt;em&gt;really&lt;/em&gt; have hard-coded values are things like sprites which will &lt;em&gt;always&lt;/em&gt; need to be a certain size no matter what.&lt;/p&gt;

&lt;p&gt;As soon as I see a hard-coded unit in a stylesheet I want to know why it was required and how it could be avoided.&lt;/p&gt;

&lt;h2&gt;Brute forcing&lt;/h2&gt;

&lt;p&gt;This one is in a similar vein to hard-coded numbers, but a little more specific. Brute forcing CSS is when you use hard-coded magic numbers and a variety of other techniques to force a layout to work. Take for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.foo{
    margin-left:-3px;
    position:relative;
    z-index:99999;
    height:59px;
    float:left;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is &lt;em&gt;terrible&lt;/em&gt; CSS. All of these declarations are heavy-handed, brute-forced, layout-affecting declarations which are &lt;em&gt;clearly&lt;/em&gt; only used to force something to render as and where it’s wanted.&lt;/p&gt;

&lt;p&gt;This type of CSS is indicative of either a poorly coded layout that requires this kind of manipulation, a lack of understanding of box-model and layout, or both.&lt;/p&gt;

&lt;p&gt;Well coded layouts should never need brute-forcing, and a &lt;em&gt;solid&lt;/em&gt; understanding of box model, layout and taking a look at your computed styles more often should mean that you’d rarely end up in a situation like this.&lt;/p&gt;

&lt;p&gt;As soon as I see brute-forced CSS I want to know how it happened, and how far back we need to unpick things before we can lay things out more rationally.&lt;/p&gt;

&lt;h2&gt;Dangerous selectors&lt;/h2&gt;

&lt;p&gt;A ‘dangerous selector’ is one with far too broad a reach. A really obvious and simple example of a dangerous selector might be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;div{
   background-color:#ffc;
   padding:1em;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will instantly scream at any developer; why on earth would you want to carpet bomb every &lt;code&gt;div&lt;/code&gt; on your site? Good question, so why would anyone ever want to have a selector like &lt;code&gt;aside{}&lt;/code&gt; for example? Or &lt;code&gt;header{}&lt;/code&gt;, or &lt;code&gt;ul{}&lt;/code&gt;? Selectors like these are way, &lt;em&gt;way&lt;/em&gt; too far reaching and will ultimately lead to us having to undo CSS, as per the section previously.&lt;/p&gt;

&lt;p&gt;Let’s look at the &lt;code&gt;header{}&lt;/code&gt; example more closely…&lt;/p&gt;

&lt;p&gt;A lot of people use a &lt;code&gt;header&lt;/code&gt; element to mark up their site’s main header—which is fine—however, if you style that site-wide header like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;header{
    padding:1em;
    background-color:#BADA55;
    color:#fff;
    margin-bottom:20px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…then that’s not so fine. The &lt;code&gt;header&lt;/code&gt; element &lt;strong&gt;does not&lt;/strong&gt; mean ‘your site’s main header’ and, as per the spec, the &lt;code&gt;header&lt;/code&gt; element can be used multiple times in multiple contexts. This should be targeted via a selector more like &lt;code&gt;.site-header{}&lt;/code&gt;, for example.&lt;/p&gt;

&lt;p&gt;To give such specific styling to such a generic selector is dangerous. Your styles will leak out into areas they shouldn’t as soon as you start trying to use that element again, and you’ll need to start undoing styles (adding more code to take styles away) in order to combat this.&lt;/p&gt;

&lt;p&gt;Make sure your selectors have good &lt;a href=&quot;http://csswizardry.com/2012/07/shoot-to-kill-css-selector-intent/&quot;&gt;selector intent&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;ul{
    font-weight:bold;
}
header .media{
    float:left;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As soon as I see selectors that end in either a type selector or a very basic abstraction class, as above, I start to panic. I know that these selectors are far too broad and will quickly run us into trouble. As soon as we try and reuse those elements we will find that they’re inheriting styles we don’t necessarily want because, somewhere, there’s a really broad selector managing to reach them.&lt;/p&gt;

&lt;h2&gt;Reactive &lt;code&gt;!important&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;!important&lt;/code&gt; is fine. It’s fine and it’s a, well, &lt;em&gt;important&lt;/em&gt; tool. However, &lt;code&gt;!important&lt;/code&gt; should only be used in certain circumstances.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;!important&lt;/code&gt; should only ever be used proactively, not reactively.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By this I mean that there are times when you know you will always, &lt;em&gt;always&lt;/em&gt; want a style to take precedence, and you will know this up front.&lt;/p&gt;

&lt;p&gt;For example, you know that you will &lt;em&gt;always&lt;/em&gt; want errors to be red, so this rule is totally fine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.error-text{
    color:#c00!important;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the error occurs in a &lt;code&gt;div&lt;/code&gt; where the text is always blue, we can be confident that we want to break that rule in the case of errors. We &lt;em&gt;always&lt;/em&gt; want errors to be red because it’s an error, and user messaging should always remain consistent. Here we can proactively add &lt;code&gt;!important&lt;/code&gt; because we know we always want errors to be red.&lt;/p&gt;

&lt;p&gt;Where &lt;code&gt;!important&lt;/code&gt; is &lt;em&gt;bad&lt;/em&gt; is when it is used reactively, that is to say, it’s been used to get someone out of a specificity problem, or they’re in a bit of a bind and resort to &lt;code&gt;!important&lt;/code&gt; to force things to work. This is using &lt;code&gt;!important&lt;/code&gt; reactively and this is bad news.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;!important&lt;/code&gt; reactively is just a way of circumventing the problems caused by ill-formed CSS. It doesn’t fix any problems, it only fixes the symptoms. The problems still exist, but now with and added layer of super-specificity that will take yet more specificity to overcome.&lt;/p&gt;

&lt;p&gt;I have no qualms whatsoever with &lt;code&gt;!important&lt;/code&gt;, as long as it has been used proactively. As soon as I see reactive use of &lt;code&gt;!important&lt;/code&gt; I know right away that it’s likely because of some poorly architected CSS, and that the solution is a refactor, not a hasty addition of heavy-handed specificity.&lt;/p&gt;

&lt;h2&gt;IDs&lt;/h2&gt;

&lt;p&gt;This one is very specific to me, and to larger teams. &lt;a href=&quot;http://csswizardry.com/2011/09/when-using-ids-can-be-a-pain-in-the-class/&quot;&gt;I have written before about how IDs are a bad idea&lt;/a&gt; because of their heightened specificity; they are of no use to anyone and should &lt;strong&gt;never be used in CSS&lt;/strong&gt;. Use IDs in HTML for fragment identifiers and JS hooks, but never in CSS.&lt;/p&gt;

&lt;p&gt;The reasons are simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IDs can &lt;em&gt;never&lt;/em&gt; be used more than once in a page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Classes can exist only once, or a million times in a page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IDs can often have their traits abstracted out into many reusable classes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://codepen.io/chriscoyier/pen/lzjqh&quot;&gt;An ID is &lt;strong&gt;255 times&lt;/strong&gt; more specific than one class…&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This means you’d need &lt;strong&gt;256 chained classes to override one ID&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If that last bullet point hasn’t convinced you not to use them then I don’t know what will…&lt;/p&gt;

&lt;p&gt;As soon as I see an ID in a stylesheet, I want it replaced with a class. Specificity is how projects start to spiral so it is vital to keep it low.&lt;/p&gt;

&lt;p&gt;Fun exercise: try &lt;strong&gt;&lt;em&gt;elegantly&lt;/em&gt;&lt;/strong&gt; solving &lt;a href=&quot;http://jsfiddle.net/csswizardry/9wGac/&quot;&gt;this problem&lt;/a&gt;. Clue: &lt;a href=&quot;http://jsfiddle.net/csswizardry/9wGac/1/&quot;&gt;this isn’t elegant&lt;/a&gt;, &lt;a href=&quot;http://jsfiddle.net/csswizardry/9wGac/2/&quot;&gt;nor is this&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Loose class names&lt;/h2&gt;

&lt;p&gt;A ‘loose’ class name is one that isn’t specific enough for its intended purpose. Imagine a class of &lt;code&gt;.card&lt;/code&gt;. What does this do?&lt;/p&gt;

&lt;p&gt;This class name is very loose, and loose class names are very bad for two main reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can’t necessarily glean its purpose from the class alone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s so vague that it could very easily be redefined accidentally by another dev.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The first point is the simplest; what does &lt;code&gt;.card&lt;/code&gt; mean? What does it style? Is it a Trello-esque concept where a card is a component? Is it a class that you add to a playing card on a poker website? Does it refer to an image of a credit card? It’s difficult to know, because it’s far too loose. Let’s imagine it means credit card; this class would have been much better had it been &lt;code&gt;.credit-card-image{}&lt;/code&gt;. A lot longer, yes; a lot better, hell yes!&lt;/p&gt;

&lt;p&gt;The second problem with loose class names is that they can very easily be (accidentally) reassigned/redefined. Let’s say you’re working on an commerce site using &lt;code&gt;.card&lt;/code&gt; again, and it refers to the user’s credit card linked to their account. Now imagine another dev comes along and wants to add some functionality whereby you can send a purchase to someone as a present, with the option to add a card with a message on it. Their temptation might be to use &lt;code&gt;.card&lt;/code&gt; again somewhere, which is &lt;em&gt;wrong&lt;/em&gt;, but in certain (albeit unlikely events) this could lead to your &lt;code&gt;.card&lt;/code&gt; class being redefined and overwritten.&lt;/p&gt;

&lt;p&gt;All this can be avoided by using much stricter class names. Classes like &lt;code&gt;.card&lt;/code&gt; and &lt;code&gt;.user&lt;/code&gt; and suchlike are far too loose, making them hard to quickly understand, and easy to accidentally reuse/override.&lt;/p&gt;

&lt;p&gt;As soon as I see loose class names I start having to work out what it actually refers to, and asking what we can rename it to. Class names should be as specific as possible.&lt;/p&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;So there we have it, just a few of the &lt;em&gt;many&lt;/em&gt; things I perceive to be code smells in CSS. These are things that I look out for on a daily basis and strive to avoid at all costs. When working on larger projects that last for months and months (and, ultimately, years) it is &lt;em&gt;vital&lt;/em&gt; to keep a tight ship, and keeping an eye out for the above—among other things—is paramount. (I can’t stress enough how small a sub-set of things this is; there is a &lt;em&gt;lot&lt;/em&gt; more that I look out for.)&lt;/p&gt;

&lt;p&gt;Now, of course, there &lt;em&gt;are&lt;/em&gt; exceptions to every rule, but they will need assessing on a case by case basis. For the most part, however, these are all things I work hard to avoid, and can spot a mile off in CSS.&lt;/p&gt;

&lt;h2&gt;On practicing what I preach…&lt;/h2&gt;

&lt;p&gt;I am more than aware that this site goes against nearly all of these rules, so I left &lt;a href=&quot;http://csswizardry.com/2012/11/code-smells-in-css/#comment-253931&quot;&gt;a brief comment on the matter&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A classless class—on using more classes in your HTML</title>
   <link href="http://inuitcss.com/2012/10/a-classless-class-on-using-more-classes-in-your-html"/>
   <updated>2012-10-16T21:04:21+01:00</updated>
   <id>http://inuitcss.com/2012/10/a-classless-class-on-using-more-classes-in-your-html</id>
   <content type="html">&lt;p&gt;This article is a pretty basic one, but it’s aimed at developers struggling to shake the idea that classes in your HTML are somehow a bad thing. Quite often, developers new to OOCSS find it hard to transition from adding no classes to anything to adding as many as you need (i.e. a lot more than you were).&lt;/p&gt;

&lt;p&gt;Imagine a classroom full of children with no names. In order to organise and refer to them the teacher has a system; the guy two rows from the back, the kid next to the girl next to the kid under the light, the girl near the window, the first guy sat in the carpeted area…&lt;/p&gt;

&lt;p&gt;Her seating plan reads like a board game. As soon as the guy next to the window swaps places with the girl next to the radiator then she has to remember that it’s now the guy near the window, and that the girl near the guy near the window is now near the &lt;em&gt;girl&lt;/em&gt; near the window.&lt;/p&gt;

&lt;p&gt;As soon as anything moves or changes she has to do a lot of rethinking and making sure things still check out. If the guy near the door is now the guy under the AC unit then is that definitely the right girl next to the guy who used to be the &lt;em&gt;girl&lt;/em&gt; under the AC unit? Who knows?&lt;/p&gt;

&lt;p&gt;This is obviously madness, but…&lt;/p&gt;

&lt;p&gt;…this is how a lot of people are trying to write HTML.&lt;/p&gt;

&lt;p&gt;This little analogy was born the other day when someone Tweeted:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Struggling to switch to OOCSS. I’m not used to classing everything up, for so long it was all about super-clean HTML…”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And I replied with:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Imagine a teacher trying to control a class of kids who have no names. That’s how we used to write HTML &gt;.&amp;lt;”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When things aren’t explicitly named, and we try and rely on coincidental and circumstantial situations to try and refer to and target them, we find ourselves in a real mess where things quickly become invalid or break/fail. Things are hard to manipulate and work with. We have to try and remember the dependencies our references have on our structure. Things are basically unstable and chaotic.&lt;/p&gt;

&lt;p&gt;The above analogy sits &lt;em&gt;perfectly&lt;/em&gt; with the kind of HTML we often wrote, and the selectors we used to target it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The guy two rows from the back&lt;/strong&gt; is like &lt;code&gt;nth-of-type(){}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The kid next to the girl next to the kid under the light&lt;/strong&gt; can be likened to &lt;code&gt;el el + el{}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The girl near the window&lt;/strong&gt;—&lt;code&gt;el + el{}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The first guy sat in the carpeted area&lt;/strong&gt;—&lt;code&gt;el &amp;gt; el:first-of-type{}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Things are much, &lt;em&gt;much&lt;/em&gt; easier to select when we explicitly name them. How much easier is it to say ‘Ben’ rather than ‘You near the stationery cupboard’? How much more easily can you swap James and Becky round when they have names, instead of saying ‘AC dude, swap with her next to her next to him near the sandpit’?&lt;/p&gt;

&lt;p&gt;Loads more.&lt;/p&gt;

&lt;p&gt;This is how we should start imagining our HTML. For the longest time we strove to keep our HTML free of classes, that meant that the only way of targeting things was through the convoluted selectors like I outlined above. I mean, no one really goes as far as to drop &lt;em&gt;all&lt;/em&gt; classes &lt;em&gt;entirely&lt;/em&gt; (there are a few notable exceptions), but the comparison still stands.&lt;/p&gt;

&lt;p&gt;In a similar vein to my previous article, &lt;a href=&quot;http://csswizardry.com/2012/07/shoot-to-kill-css-selector-intent/&quot;&gt;Shoot to kill; CSS selector intent&lt;/a&gt;, your selectors should be just as specific as an elements purpose/function. Don’t use &lt;code&gt;.header ul{}&lt;/code&gt; if what you &lt;em&gt;really&lt;/em&gt; mean is &lt;code&gt;.site-nav{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, not everything needs a class, but going back to the classroom analogy the teacher might want to select a subset of people, perhaps all the girls. This you could liken to an element; boys, girls, teachers, janitors are all like types of element and these it often &lt;em&gt;does&lt;/em&gt; make sense to select on (all links need to be red, all &lt;code&gt;h1&lt;/code&gt;s need to be a certain size etc). But what if you want to single out all milk-monitors or all people over 6 years old…? These subsets are explicit and reasoned, therefore the way you select them should be too. &lt;strong&gt;Your selectors should be as explicit as your reason for wanting to select something.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The long and short of this story is that it &lt;em&gt;is&lt;/em&gt; difficult to transition from the older (and frankly naïve) ways of working, but when you stop and think &lt;em&gt;why&lt;/em&gt; we name things you soon realise that it’s the only sensible way. Next time you’re building away stop and think of the kids with no names; only this time it’s not a classroom, it’s a website, and they’re not kids but components and elements and chunks of HTML. It just makes sense to give them nice explicit names, because the way you’d manage it otherwise is just daft…&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing pr.ofile.me</title>
   <link href="http://inuitcss.com/2012/10/announcing-pr-ofile-me"/>
   <updated>2012-10-14T21:07:49+01:00</updated>
   <id>http://inuitcss.com/2012/10/announcing-pr-ofile-me</id>
   <content type="html">&lt;p&gt;Over eighteen months ago I wrote &lt;a href=&quot;http://csswizardry.com/2011/02/mobile-business-card/&quot;&gt;an article about a mobile optimised business card&lt;/a&gt; I made. Today I finally did something awesome with it!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pr.ofile.me&quot;&gt;pr.ofile.me&lt;/a&gt; is basically a way of emulating business cards on the web; it’s business card shaped, it contains contact details and it has two sides. You rotate your phone to switch between a bio and your contact details.&lt;/p&gt;

&lt;p&gt;I’ve buit pr.ofile.me on top of &lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt;, packaged up the code and &lt;a href=&quot;https://github.com/csswizardry/pr.ofile.me&quot;&gt;hosted it on GitHub&lt;/a&gt; for you to download and create your own theme for. My card can be found over on &lt;a href=&quot;http://hry.rbrts.me/profile/index.html&quot;&gt;hry.rbrts.me&lt;/a&gt;, turn your phone to see both sides of the card!&lt;/p&gt;

&lt;h2&gt;Donations&lt;/h2&gt;

&lt;p&gt;I never charge for any of my articles, projects, code, advice, anything. However, as pr.ofile.me is (in my opinion) a pretty cool idea for an app style project, I’ve decided to require an attribution notice that can be optionally removed by simply &lt;a href=&quot;https://gumroad.com/l/VqTV&quot;&gt;donating USD3.99 (GBP2.50) to the project via Gumtree&lt;/a&gt;. It’s not a lot of money and I have no aims or goals as far as earnings go, but I think it’s a nice token amount to show your support and to remove the attribution text.&lt;/p&gt;

&lt;p&gt;If you do donate then let me know and I’ll add your profile’s URL to the project’s README as an extra little thank you.&lt;/p&gt;

&lt;p&gt;Hopefully people will find it pretty cool, I know I do!&lt;/p&gt;

&lt;p&gt;Cheers,
&lt;em&gt;H&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>inuit.css v4.0.0—OOCSS, Sass and more</title>
   <link href="http://inuitcss.com/2012/09/inuit-css-v4-oocss-sass-and-more"/>
   <updated>2012-09-30T14:38:15+01:00</updated>
   <id>http://inuitcss.com/2012/09/inuit-css-v4-oocss-sass-and-more</id>
   <content type="html">&lt;p&gt;I decided to completely overhaul &lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt; over the last couple of weeks. It’s now at version 4.0.0 and completely incompatible with previous versions of the framework.&lt;/p&gt;

&lt;p&gt;It is now written on top of Sass, not doing anything particularly exciting but taking advantage of includes and variables to make your life a little easier.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;OOCSS&lt;/h2&gt;

&lt;p&gt;inuit.css is fully OO; it is a library which does very little styling but a &lt;em&gt;lot&lt;/em&gt; of heavy lifting. inuit.css’ job is to package up design patterns and abstractions such as &lt;a href=&quot;http://csswizardry.com/2011/09/the-nav-abstraction/&quot;&gt;the nav abstraction&lt;/a&gt;, &lt;a href=&quot;http://csswizardry.com/2011/10/the-island-object/&quot;&gt;the island object&lt;/a&gt; and more.&lt;/p&gt;

&lt;p&gt;OOCSS promotes DRYness, abstractions, reuse, portability and lends itself well to scalability, making inuit.css ideal for projects of any size (especially big ones!).&lt;/p&gt;

&lt;h2&gt;Who for?&lt;/h2&gt;

&lt;p&gt;inuit.css is great for designers because it doesn’t tread on their toes, but inuit.css is also super-awesome for developers. It borrows a lot from programming principles (objects and abstractions, DRY, single responsibility principle) as well as being written in a very developer-friendly manner. inuit.css features DocBlock comments, 80 char line lengths, heavily documented, lots of whitespace.&lt;/p&gt;

&lt;p&gt;I genuinely believe inuit.css has the potential to be the most useful CSS framework on the market. The quality of the code is far better than most other alternatives, the principles employed are tried and tested on sites of all sizes, it does one job and it does that job very well. It’s a project and codebase I’m very proud of and hope that, as it starts getting used, people will start to believe in it as much as I do.&lt;/p&gt;

&lt;h2&gt;The proof is in the pudding&lt;/h2&gt;

&lt;p&gt;Rather shamefully, I never actually used previous versions of inuit.css on any projects. With version 4.0.0 I will be using inuit.css as standard on any projects I begin. In fact, it has already been forked and reused in a big, new project at Sky. This version of inuit.css is the most useful version there has been.&lt;/p&gt;

&lt;h2&gt;Bootstrap?&lt;/h2&gt;

&lt;p&gt;Bootstrap is getting a lot of love lately, and it’s not a bad framework, but inuit.css does a very different job. Bootstrap is fine if you’re a developer who needs a framework to do the design for you, but Bootstrap is of no use to a designer who needs a hand with the CSS. inuit.css aims to be more useful to a wider array of people than Bootstrap is; inuit.css is a design-free framework meaning it can be used on literally any type of project. You define your own font sizes, your own spacing units for paddings etc and you extend inuit.css with your own stylesheet to add skin. inuit.css makes no decisions or assumptions, because that’s not the job of a framework.&lt;/p&gt;

&lt;p&gt;The result of this is a more versatile framework that can be used on any projects of any size, and there’ll be no need to edit or delete anything; no undoing someone else’s design decisions, no needing to alter someone else’s code. inuit.css is as little as possible whilst also being a hell of a lot.&lt;/p&gt;

&lt;h2&gt;Roadmap&lt;/h2&gt;

&lt;p&gt;There’s no official roadmap for inuit.css but I’m finally happy enough with the architecture, content and abilities of the framework to safely say this should be the last complete rewrite.&lt;/p&gt;

&lt;p&gt;The framework’s architecture is something I have proven to myself time and again on working on big sites at &lt;a href=&quot;http://sky.com&quot;&gt;Sky&lt;/a&gt;, so I’m confident it’s ‘the right way’. As such, inuit.css will only grow and mature, never really change. As I get better with Sass I’ll add/update any mixins etc, and as I dream up more objects and abstractions they will get added accordingly.&lt;/p&gt;

&lt;h2&gt;Using inuit.css?&lt;/h2&gt;

&lt;p&gt;If you use inuit.css on any projects that make it live, drop me a tweet and I’ll send you out some inuit.css stickers!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Canvas Conf, 2012</title>
   <link href="http://inuitcss.com/2012/09/canvas-conf-2012"/>
   <updated>2012-09-10T09:06:57+01:00</updated>
   <id>http://inuitcss.com/2012/09/canvas-conf-2012</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; If you are attending The Digital Barn later this month then please don’t look at the slides!&lt;/p&gt;

&lt;p&gt;I’ve just returned from my third conference appearance at &lt;a href=&quot;http://2012.canvasconf.co.uk&quot;&gt;Canvas Conf&lt;/a&gt;, a small, independent conference in Birmingham, the heart of the UK. The event was incredible; a variety of very talented speakers with very interesting talks.&lt;/p&gt;

&lt;p&gt;My talk, Big CSS, dealt with managing CSS on long running, large projects with lots of developers and lots of style[sheet]s.&lt;/p&gt;

&lt;h2&gt;Slides&lt;/h2&gt;

&lt;p&gt;My slides can be found &lt;a href=&quot;https://speakerdeck.com/u/csswizardry/p/big-css&quot;&gt;over on Speaker Deck&lt;/a&gt;. There was no recording at the event but the slides &lt;em&gt;should&lt;/em&gt; be fairly self-explanatory.&lt;/p&gt;

&lt;p&gt;I’d like to thank the guys for inviting me to speak, the conference was a great success, a very feel-good day and a lot of fun. I’d also like to thank &lt;a href=&quot;http://instagram.com/p/PRgGQ5ojG-/&quot;&gt;the audience&lt;/a&gt;, who were great, and everyone who offered kind words after my talk; I still get &lt;em&gt;incredibly&lt;/em&gt; nervous. Cheers!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tags in CSS files</title>
   <link href="http://inuitcss.com/2012/08/tags-in-css-files"/>
   <updated>2012-08-07T19:18:52+01:00</updated>
   <id>http://inuitcss.com/2012/08/tags-in-css-files</id>
   <content type="html">&lt;p&gt;When working with large (and particularly OO) CSS your chunks of code in a stylesheet(s) are less likely to be separated by type, but rather by function. That is to say, you might have objects that both deal with images but live nowhere near each other in the stylesheet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; please refer to &lt;a href=&quot;https://gist.github.com/3288478&quot;&gt;this gist&lt;/a&gt; before/whilst reading this article.&lt;/p&gt;

&lt;p&gt;For as long as I can remember I’ve always placed a dollar sign before any section titles in my CSS; this is so that I can find a section quickly (and limit my search scope to sections only) simply by running a find for &lt;code&gt;$[SECTION NAME]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is all well and good when I know what section I’m after, but what if I want to find any section that handles images, or perhaps I need to know what CSS is available for use on lists? I need a way of searching &lt;em&gt;within&lt;/em&gt; sections, not just their titles. Enter &lt;em&gt;CSS tags&lt;/em&gt;…&lt;/p&gt;

&lt;p&gt;If you take a look at &lt;a href=&quot;https://gist.github.com/3288478&quot;&gt;the example CSS&lt;/a&gt; you should see that with each section title I have a list of tags. &lt;a href=&quot;http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/&quot;&gt;The media object&lt;/a&gt;’s tags are &lt;code&gt;^images ^text ^layout ^structure&lt;/code&gt;, the sprite object carries the tags &lt;code&gt;^images ^icons&lt;/code&gt;. If I want to find any objects that pertain to certain types of component then my search now is simply &lt;code&gt;^[tag name]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By prepending the tags with another character (I chose the caret as it isn’t a frequently occuring glyph in CSS) I can limit my search scope to &lt;strong&gt;just&lt;/strong&gt; tags.&lt;/p&gt;

&lt;p&gt;So now if I want to style up some image content I know all I need to do is a find for &lt;code&gt;^images&lt;/code&gt; and I can see exactly what objects I already have at my disposal. If nothing appropriate exists I create a new component or object and give that a tag of &lt;code&gt;^images&lt;/code&gt; for the next dev to find!&lt;/p&gt;

&lt;p&gt;As with &lt;a href=&quot;csswizardry.com/2012/07/quasi-qualified-selectors/&quot;&gt;my recent quasi-qualified selectors tip&lt;/a&gt;, this is only really of any use of the whole team buys into it, but I think it could be super useful and is something I'm hoping to implement soon.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Video: Breaking Good Habits—Front-Trends, 2012</title>
   <link href="http://inuitcss.com/2012/07/video-breaking-good-habits-front-trends-2012"/>
   <updated>2012-07-19T13:38:31+01:00</updated>
   <id>http://inuitcss.com/2012/07/video-breaking-good-habits-front-trends-2012</id>
   <content type="html">&lt;p&gt;Here is the video from my talk Breaking Good Habits which I gave in April of this year at &lt;a href=&quot;http://www.front-trends.com/&quot;&gt;Front-Trends&lt;/a&gt; in Warsaw, Poland. My voice sounds unusually deep and you can see my boxer shorts for the first 25 minutes but it seems okay; I was absolutely terrified but I'm pleased my nerves didn't show through too much!&lt;/p&gt;

&lt;p&gt;On Vimeo: &lt;a href=&quot;https://vimeo.com/44773888&quot;&gt;https://vimeo.com/44773888&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://csswizardry.com/2012/04/front-trends-2012/&quot;&gt;My Front-Trends writeup.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Shoot to kill; CSS selector intent</title>
   <link href="http://inuitcss.com/2012/07/shoot-to-kill-css-selector-intent"/>
   <updated>2012-07-17T07:28:14+01:00</updated>
   <id>http://inuitcss.com/2012/07/shoot-to-kill-css-selector-intent</id>
   <content type="html">&lt;p&gt;One type of CSS in particular makes me cringe every time I see it; poor selector intent. Poor selector intent means carpet bombed selectors whose key selector has way too broad a reach; a selector like &lt;code&gt;.header ul{}&lt;/code&gt; as opposed to one like &lt;code&gt;.main-nav{}&lt;/code&gt;, &lt;code&gt;.widget h2{}&lt;/code&gt; instead of &lt;code&gt;.widget-title&lt;/code&gt;, &lt;code&gt;article &amp;gt; p:first-child{}&lt;/code&gt; as opposed to &lt;code&gt;.intro{}&lt;/code&gt;. Selectors whose intent isn't specific enough.&lt;/p&gt;

&lt;p&gt;It’s worth noting that &lt;em&gt;selector intent&lt;/em&gt; is something I completely made up at some point today; if you think there’s a better name then please let me know!&lt;/p&gt;

&lt;p&gt;Let’s take a closer look at the &lt;code&gt;.header ul{}&lt;/code&gt; example. Let’s imagine that &lt;code&gt;ul&lt;/code&gt; is indeed the main navigation for our website. It lives in the header, as you might expect, and is currently the only &lt;code&gt;ul&lt;/code&gt; in there; &lt;code&gt;.header ul{}&lt;/code&gt; is fine, right? Not &lt;em&gt;really&lt;/em&gt;. I mean sure, it might work, but it’s not very good. It’s not very future proof and certainly not explicit enough. As soon as we add another &lt;code&gt;ul&lt;/code&gt; to that header it will adopt the styling of our main nav and the the chances are we won’t want it to. This means we either have to refactor a lot of code &lt;em&gt;or&lt;/em&gt; undo a lot of styling on subsequent &lt;code&gt;ul&lt;/code&gt;s in that &lt;code&gt;.header&lt;/code&gt; to remove the effects of the far reaching selector.&lt;/p&gt;

&lt;p&gt;Your selector’s intent must match that of your reason for styling something; ask yourself &lt;strong&gt;‘am I selecting this because it’s a &lt;code&gt;ul&lt;/code&gt; inside of &lt;code&gt;.header&lt;/code&gt; or because it is my site’s main nav?’&lt;/strong&gt;. The answer to this question will determine your selector.&lt;/p&gt;

&lt;h2&gt;It’s all about the key selector…&lt;/h2&gt;

&lt;p&gt;What determines the impact of a selector is its &lt;em&gt;key selector&lt;/em&gt;. The key selector is a very important thing in the world of CSS as &lt;em&gt;browsers read selectors &lt;strong&gt;right to left&lt;/strong&gt;&lt;/em&gt;. This means the key selector is the last one before the opening &lt;code&gt;{&lt;/code&gt;, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.header ul      { &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* ‘ul’ is the key selector */&amp;lt;/span&amp;gt; }
.ul li a        { &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* ‘a’ is the key selector */&amp;lt;/span&amp;gt; }
p:last-child    { &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* ‘:last-child’ is the key selector */&amp;lt;/span&amp;gt; }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As I discuss in &lt;a href=&quot;http://csswizardry.com/2011/09/writing-efficient-css-selectors/&quot;&gt;Writing efficient CSS selectors&lt;/a&gt;, the key selector plays a big part in CSS efficiency, so it’s worth bearing that in mind, but where &lt;em&gt;selector intent&lt;/em&gt; is concerned this is basically the place you need to be looking to see how far reaching your selector is. &lt;code&gt;html &amp;gt; body &amp;gt; section.content &amp;gt; article span{}&lt;/code&gt; is a ridiculously convoluted and terrible selector that no one anywhere would ever write (right?) but despite how specific and disastrously over the top it is, its key selector (&lt;code&gt;span&lt;/code&gt;) is still very, &lt;em&gt;very&lt;/em&gt; broad. It doesn’t matter so much what comes before your key selector, it’s only the key that really matters.&lt;/p&gt;

&lt;p&gt;As a &lt;em&gt;general&lt;/em&gt; rule you should try and avoid any key selector that is a type selector (basically an element, like &lt;code&gt;ul&lt;/code&gt; or &lt;code&gt;span&lt;/code&gt; or whatever) or a base object (e.g. &lt;code&gt;.nav&lt;/code&gt; or &lt;code&gt;.media&lt;/code&gt;). Just because something is the only &lt;code&gt;.media&lt;/code&gt; object in your content area it doesn’t mean it always will be.&lt;/p&gt;

&lt;p&gt;Let’s keep looking at the &lt;code&gt;.header ul{}&lt;/code&gt; example. Let’s assume our markup is thus, as we’re using &lt;a href=&quot;http://csswizardry.com/2011/09/the-nav-abstraction/&quot;&gt;the nav abstraction&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div class=header&amp;gt;

    &amp;lt;ul class=nav&amp;gt;
        [links]
    &amp;lt;/ul&amp;gt;

&amp;lt;/div&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could select this in one of several ways:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.header ul{
    [main nav styles]
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is bad because as soon as we add &lt;em&gt;any&lt;/em&gt; other &lt;code&gt;ul&lt;/code&gt; to our header it will look like our main nav. This is dangerous but thankfully easily avoidable.&lt;/p&gt;

&lt;p&gt;Secondly we could use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.header .nav{
    [main nav styles]
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is &lt;em&gt;marginally&lt;/em&gt; better than the &lt;code&gt;.header ul&lt;/code&gt; example, but barely so. We can now safely add another &lt;code&gt;ul&lt;/code&gt; without risk, but we can’t add anything else with a &lt;code&gt;.nav&lt;/code&gt; class; that means adding sub-navs or breadcrumbs will be a nightmare!&lt;/p&gt;

&lt;p&gt;Finally, our best solution would be to add a second class to the &lt;code&gt;ul&lt;/code&gt;; a class of &lt;code&gt;.main-nav&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div class=header&amp;gt;

    &amp;lt;ul class=&quot;nav main-nav&quot;&amp;gt;
        [links]
    &amp;lt;/ul&amp;gt;

&amp;lt;/div&amp;gt;

.main-nav{
    [main nav styles]
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is good selector intent; we are selecting this element now for &lt;em&gt;exactly&lt;/em&gt; the right reasons, not coincidental/circumstantial ones. Now we can add as many more &lt;code&gt;ul&lt;/code&gt;s and &lt;code&gt;.nav&lt;/code&gt;s to that &lt;code&gt;.header&lt;/code&gt; and the scope of our main nav styles will never reach anything else. We’re no longer carpet bombing!&lt;/p&gt;

&lt;p&gt;Keep your key selector as explicit and specific as you possibly can, preferring for it to be a class over anything else. Applying specific styling through a vague selector is dangerous. A generic selector should always carry generic styling and if you want to target something in particular you should perhaps add a class to it. &lt;strong&gt;Specific intent requires a specific selector.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Real-life example&lt;/h2&gt;

&lt;p&gt;A really good example of where I messed up on this myself is on a project I did at Sky; I had a selector which was simply &lt;code&gt;#content table{}&lt;/code&gt;. (Eww, I even used an ID!!!) This is a troublesome selector for three reasons; firstly &lt;a href=&quot;http://csswizardry.com/2011/09/when-using-ids-can-be-a-pain-in-the-class/&quot;&gt;it uses an ID which is a big no&lt;/a&gt;, secondly it has a lot higher specificity than it needs to and lastly—and most importantly—it has a poor selector intent. I wasn’t wanting to style these tables &lt;em&gt;because&lt;/em&gt; they were in &lt;code&gt;#content&lt;/code&gt;, that was just how the DOM landed so that’s how I chose to target them. &lt;em&gt;Entirely&lt;/em&gt; my bad.&lt;/p&gt;

&lt;p&gt;For the first few weeks this was fine but then all of a sudden we needed to add some tables inside &lt;code&gt;#content&lt;/code&gt; that didn’t want to look anything like the previous ones. Uh oh. My previous selector was far too far reaching, I was now having to undo a blanket style I’d set on &lt;em&gt;every&lt;/em&gt; table in the &lt;code&gt;#content&lt;/code&gt; &lt;code&gt;div&lt;/code&gt;. If I’d had a better selector intent then instead of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#content table{
    [foo styles]
}
#content .bar{
    [undoing foo styles]
    [bar styles]
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I should/would have had:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.foo{
    [foo styles]
}
.bar{
    [bar styles]
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a &lt;em&gt;lot&lt;/em&gt; less headaches. By thinking ahead and having a lot more considered selector intent then I would have had a much easier time...&lt;/p&gt;

&lt;h2&gt;Exceptions&lt;/h2&gt;

&lt;p&gt;Of course there are &lt;em&gt;always&lt;/em&gt; exceptions. It’s perfectly reasonable to have selectors like &lt;code&gt;.main-nav &amp;gt; li&lt;/code&gt; where your key selector &lt;em&gt;is&lt;/em&gt; a type selector. It also makes perfect sense to target every &lt;code&gt;a&lt;/code&gt; inside something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;html{
    color:#333;
    background-color:#fff;
}

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Inverted colour scheme for promotional items. */&amp;lt;/span&amp;gt;
.promo{
    color:#fff;
    background-color:#333;
}
    .promo a{
        color:#fff;
        text-decoration:underline;
    }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is a reasonably sensible far-reaching selector where it does make sense to style every &lt;code&gt;a&lt;/code&gt; in a pretty carpet bombed manner.&lt;/p&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;In general, instead of carpet bombing your elements, shoot to kill; target them specifically and explicitly. Make sure your selector intent is accurate and targeted.&lt;/p&gt;

&lt;p&gt;Think more carefully about why you want to target something and pick a more explicit and sensible selector; refine your selector intent. Do you mean:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.header em{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or do you really mean:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.tagline{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do you want:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.footer p{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or do you really want:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.copyright{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Is it wise to select:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.sidebar form{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or would a safer bet be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.search-form{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consider your CSS selectors’ intent; are you being specific enough? Are your selectors matching things for the right reasons, or is it just happy circumstance? Shoot to kill. Be a CSS sniper, not a CSS carpet bomber.&lt;/p&gt;

&lt;p&gt;Incidentally, opting to switch out a longer selector like &lt;code&gt;.header ul&lt;/code&gt; for something like &lt;code&gt;.main-nav&lt;/code&gt; will also help reduce specificity and increase selector efficiency; win-win-win!&lt;/p&gt;

&lt;p&gt;It is also worth noting that &lt;a href=&quot;https://twitter.com/snookca&quot;&gt;Jonathan Snook&lt;/a&gt; wrote something similar called the &lt;a href=&quot;http://smacss.com/book/applicability&quot;&gt;&lt;em&gt;depth of applicability&lt;/em&gt;&lt;/a&gt;...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Quasi-qualified CSS selectors</title>
   <link href="http://inuitcss.com/2012/07/quasi-qualified-css-selectors"/>
   <updated>2012-07-16T18:11:31+01:00</updated>
   <id>http://inuitcss.com/2012/07/quasi-qualified-css-selectors</id>
   <content type="html">&lt;p&gt;This is a bit of an odd post in that the first half deals with qualified selectors, what they are and how they’re bad; the second half is more of a thinking-out-loud tip/trick than anything really substantial or interesting. Let’s see what you make of it...&lt;/p&gt;

&lt;p&gt;One really basic way to make your CSS much nicer to work with is to avoid (over) qualified selectors. That is to say, it’s better to write &lt;code&gt;.nav{}&lt;/code&gt; than &lt;code&gt;ul.nav{}&lt;/code&gt;. This is for a variety of reasons, chiefly in that—with the &lt;em&gt;former&lt;/em&gt; syntax—you can use &lt;code&gt;.nav&lt;/code&gt; on anything at all, be that a &lt;code&gt;ul&lt;/code&gt; or an &lt;code&gt;ol&lt;/code&gt; and, secondly, it also keeps your specificity nice and low. Having an element prefixing the class selector bumps up its specificity unnecessarily and specificity is one of the easiest ways to get your project into a mess; keeping it as low as possible at all times is a very good idea.&lt;/p&gt;

&lt;p&gt;For a decent (and very timid) example of how qualifying selectors impacts specificity, take a look at &lt;a href=&quot;http://jsfiddle.net/csswizardry/WTmwh/&quot;&gt;this fiddle&lt;/a&gt;. Here we can see that the qualified &lt;code&gt;div.promo{}&lt;/code&gt; selector trumps the &lt;code&gt;.special-promo{}&lt;/code&gt; selector. A sub-optimal fix would be to &lt;a href=&quot;http://jsfiddle.net/csswizardry/WTmwh/1/&quot;&gt;qualify the second selector&lt;/a&gt;. This is no good, because this will just go on and on and on… What we need to do is &lt;a href=&quot;http://jsfiddle.net/csswizardry/WTmwh/2/&quot;&gt;&lt;em&gt;avoid qualifying selectors altogether&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So in short…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You should never (over) qualify selectors because…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;…qualified selectors, by their very definition, can’t be used on other elements…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;…and qualified selectors increase overall specificity. Bad!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But sometimes selectors &lt;em&gt;are&lt;/em&gt; only ever meant for use on only one type of element…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;…but you still shouldn’t qualify that selector for specificity reasons.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do you denote that a selector is to be used on a particular element without &lt;em&gt;actually&lt;/em&gt; qualifying it?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To start, a simple enough rule to follow; don’t qualify your selectors. This keeps classes &lt;strong&gt;element agnostic&lt;/strong&gt; and keeps specificity low. Awesome!&lt;/p&gt;

&lt;p&gt;Sometimes though, you can only really use a class on one element. A well abstracted class should be usable on a variety of elements, but oftentimes you have a class that can only ever really be used on one thing. How can you communicate this in your stylesheet without qualifying your selector? Let’s take an example…&lt;/p&gt;

&lt;p&gt;Let’s say I have &lt;a href=&quot;http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/&quot;&gt;the media object&lt;/a&gt; in my project. The media object is element agnostic, as all good CSS should be. I know I can apply this to any element(s) that need to adopt that visual construct. This means my CSS only ever needs to read (actual styles omitted for brevity):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.media{
    [styles]
}
    .img{
        [styles]
    }
    .body{
        [styles]
    }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I don’t need to mark the classes for use on any specific elements because they can be used on (almost) anything. My CSS doesn’t care about my HTML and &lt;strong&gt;this is a very good thing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;However, what happens when I have a class like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.product-page{
    [styles]
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, to look at, you can guess that this class probably belongs on a high-level container on a product page, but which one? The &lt;code&gt;html&lt;/code&gt; element? The &lt;code&gt;body&lt;/code&gt;? A wrapper &lt;code&gt;div&lt;/code&gt;? The main content area? Well there are several ways I could communicate this to another developer (or myself, in six months time). Let’s, for this example, assume this class should be applied to my &lt;code&gt;html&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;The first and most obvious solution to our problem might be do simply have this CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;mark&amp;gt;html&amp;lt;/mark&amp;gt;.product-page{
    [styles]
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can immediately see that this class belongs on our &lt;code&gt;html&lt;/code&gt; element. But here I have unnecessarily increased my specificity. Not by much, but by more than I need to, and more than I ever should. How can I tell the next developer that this class should only go on the &lt;code&gt;html&lt;/code&gt; element?&lt;/p&gt;

&lt;p&gt;Perhaps like this?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Apply this class to the HTML element on a product page. */&amp;lt;/span&amp;gt;
.product-page{
    [styles]
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which definitely works, but it’s a lot to write. A lot more than we need to, and you can’t glean that information at a glance.&lt;/p&gt;

&lt;p&gt;A thing I’m considering starting doing is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*html*/&amp;lt;/span&amp;gt;.product-page{
    [styles]
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I write the element in a &lt;em&gt;comment&lt;/em&gt; so that it reads properly (a &lt;code&gt;html&lt;/code&gt; element with a class of &lt;code&gt;.product-page&lt;/code&gt;) but without altering the specificity at all.&lt;/p&gt;

&lt;h2&gt;Risk?&lt;/h2&gt;

&lt;p&gt;The obvious problem with this is that, if you work in a team, you will have to make sure all devs understand and follow this convention. You need team buy-in before being able to start using this kind of notation so that any devs encountering it understand that this has meaning and isn’t simply some commented out/redundant code.&lt;/p&gt;

&lt;p&gt;So yeah, just an idea I’m toying with in order to quasi-qualify some selectors that &lt;em&gt;are&lt;/em&gt; intended for use on a specific element but without altering that selector’s specificity.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The open/closed principle applied to CSS</title>
   <link href="http://inuitcss.com/2012/06/the-open-closed-principle-applied-to-css"/>
   <updated>2012-06-21T20:09:41+01:00</updated>
   <id>http://inuitcss.com/2012/06/the-open-closed-principle-applied-to-css</id>
   <content type="html">&lt;p&gt;A question that often gets asked of OOCSS is ‘What happens when an object changes?’. That is to say, if you have a basic object that underpins a dozen different components, what happens when changing that object will favourably impact one component, but negatively impact the other 11? With so much abstracted and shared CSS, simple changes to a base object can have massive ramifications across whole projects; how do you deal with that?&lt;/p&gt;

&lt;p&gt;Well, the short answer is &lt;em&gt;never change your base abstractions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; This article will require an understanding of the principles of OOCSS.&lt;/p&gt;

&lt;p&gt;One way of dealing with objects in an OO language is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Open/closed_principle&quot;&gt;open/closed principle&lt;/a&gt; which states that  software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&lt;/p&gt;

&lt;p&gt;By sticking to this we know that our base objects themselves will never change; they are &lt;em&gt;closed for modification&lt;/em&gt;. If we want to alter their effects in some way, we &lt;em&gt;extend them&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Why you should never modify a base object&lt;/h2&gt;

&lt;p&gt;The key to writing good OOCSS is keeping your base objects &lt;em&gt;super&lt;/em&gt; simple. As simple as you can get. The &lt;a href=&quot;csswizardry.com/2011/09/the-nav-abstraction/&quot;&gt;nav abstraction&lt;/a&gt; literally just throws a list into horizontal mode; the &lt;a href=&quot;csswizardry.com/2011/10/the-island-object/&quot;&gt;island object&lt;/a&gt; &lt;em&gt;only&lt;/em&gt; boxes off content; the &lt;a href=&quot;http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/&quot;&gt;media object&lt;/a&gt; &lt;em&gt;only&lt;/em&gt; places image-like and text-like content side-by-side. This ties in very nicely to the &lt;a href=&quot;csswizardry.com/2012/04/the-single-responsibility-principle-applied-to-css/&quot;&gt;single responsibility principle applied to CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By making your base objects this simple your choices become boolean; you use the object or you don’t. The object is either entirely suitable as a basis, or entirely _un_suitable.&lt;/p&gt;

&lt;p&gt;As soon as you make the mistake of making your base objects too specific (for example, if your nav abstraction also adds padding to links) you might find that object is not entirely suited to another job for which it is &lt;em&gt;almost&lt;/em&gt; perfect. You might find that in order to use the object you have to undo stuff in it.&lt;/p&gt;

&lt;p&gt;A prime example of this is a mistake I made on &lt;a href=&quot;http://faavorite.com/csswizardry&quot;&gt;faavorite&lt;/a&gt;. I made the island object carry cosmetics; instead of merely boxing off content I (foolishly) gave it a background, border and shadow style. This means that if I ever want to use the island for any different purposes I have to undo that; here I messed up and made an object too specific, so I have to now decide whether it’s worth unsetting these properties in order to reuse &lt;code&gt;.island&lt;/code&gt;, or is it better to just make something new? I removed the boolean choice by not keeping my base simple enough.&lt;/p&gt;

&lt;p&gt;So if you abstract sensibly you should find that you rarely need to &lt;em&gt;change&lt;/em&gt; a base object, you should only ever need to extend it. Extending will add styles only in specific cases, making modifications to a base object is a &lt;em&gt;bad idea&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After sensible and considered abstraction you should find that base objects never need changing, you just use them or stop using them.&lt;/p&gt;

&lt;p&gt;For example, let’s imagine you have the media object used as a base across ten different components. One of the components is a user’s avatar with their username to the right of it, another is an album listing with the album art to the left and track list to the right. The others... we won’t concern ourselves with those. You might have markup like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;a href=http://twitter.com/csswizardry class=&quot;media &amp;lt;mark&amp;gt;profile-link&amp;lt;/mark&amp;gt;&quot;&amp;gt;
    &amp;lt;img src=avatar.jpg alt=&quot;&quot; class=img&amp;gt;
    &amp;lt;span class=body&amp;gt;@csswizardry&amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;

&amp;lt;div class=&quot;media &amp;lt;mark&amp;gt;album&amp;lt;/mark&amp;gt;&quot;&amp;gt;
    &amp;lt;img src=/img/products/themirrorconspiracy.jpg alt=&quot;&quot; class=img&amp;gt;
    &amp;lt;div class=body&amp;gt;
        &amp;lt;h2&amp;gt;Thievery Corporation &amp;amp;ndash; The Mirror Conspiracy&amp;lt;/h2&amp;gt;
        &amp;lt;ol&amp;gt;
            &amp;lt;li&amp;gt;Treasures&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Le Monde&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Indra&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Lebanese Blonde&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Focus on Sight&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Air Batucada&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Só com você&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Samba Tranquille&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Shadows of Ourselves&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;The Hong Kong Triad&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Illumination&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;The Mirror Conspiracy&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Tomorrow&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Bario Alto&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Guide for I and I&amp;lt;/li&amp;gt;
        &amp;lt;/ol&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There we have two totally different pieces of content sharing the same base object, which is great!&lt;/p&gt;

&lt;p&gt;However, let’s say you decide you want to change the display of albums on your site, you now want to have the album art full-width with the track listing &lt;em&gt;below&lt;/em&gt; it—no longer side-by-side as the media object is.&lt;/p&gt;

&lt;p&gt;A lot of people here would argue that using an abstraction ties you to a permanent visual style; and they would be correct! That’s the point! You can no longer use the media object here, you have to change your markup. This isn’t a problem with the abstraction, it’s a problem with its implementation.&lt;/p&gt;

&lt;p&gt;Instead of trying to use just CSS for force the media object to display differently in &lt;em&gt;this&lt;/em&gt; case, we stop using the media object altogether. This abstraction is no longer suitable. We open up the include that houses the markup that handles albums and we get rid of some markup; not everything can or should be done through CSS alone. We hit our boolean; do we use the abstraction or not? In this case, not.&lt;/p&gt;

&lt;h2&gt;When to extend&lt;/h2&gt;

&lt;p&gt;So above we discussed when to stop using abstractions, but what about when we legitimately need to extend them?&lt;/p&gt;

&lt;p&gt;Let’s take another example using &lt;a href=&quot;http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/&quot;&gt;the media object&lt;/a&gt; again. Here we have an amazingly simple abstraction that places image-like content alongside textual content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*
&amp;lt;a href=http://twitter.com/csswizardry class=media&amp;gt;
    &amp;lt;img src=avatar.jpg alt=&quot;&quot; class=img&amp;gt;
    &amp;lt;span class=body&amp;gt;@csswizardry&amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;
*/&amp;lt;/span&amp;gt;
.media{
    display:block;
}
    .img{
        float:left;
        &amp;lt;mark&amp;gt;margin-right:10px;&amp;lt;/mark&amp;gt;
    }
        .img img{
            display:block;
        }
    .body{
        overflow:hidden;
    }
        .body &amp;gt; :last-child{
            margin-bottom:0;
        }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this we see that there will be a &lt;code&gt;10px&lt;/code&gt; margin between the image and the text-content to the right. By and large this is fine, but let’s go back to our album listing example again and imagine we are still using the media object. &lt;code&gt;10px&lt;/code&gt; here just seems a little too cramped so what we do is &lt;em&gt;extend&lt;/em&gt; the media object for cases where we use it for album listings, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- HTML --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;div class=&quot;media album&quot;&amp;gt;
    &amp;lt;img src=/img/products/themirrorconspiracy.jpg alt=&quot;&quot; class=&quot;img &amp;lt;mark&amp;gt;album-art&amp;lt;/mark&amp;gt;&quot;&amp;gt;
    &amp;lt;div class=body&amp;gt;
        ...
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
.media{
    display:block;
}
    .img{
        float:left;
        margin-right:10px;
    }
    &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Increase spacing if image is an album cover. */&amp;lt;/span&amp;gt;
    &amp;lt;mark&amp;gt;.album-art{&amp;lt;/mark&amp;gt;
        &amp;lt;mark&amp;gt;margin-right:20px;&amp;lt;/mark&amp;gt;
    &amp;lt;mark&amp;gt;}&amp;lt;/mark&amp;gt;
    ...&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we can see how the base object remains intact but we extend it with a more specific use-case to modify its appearance. No other uses of the media object will be effected, only ones we explicitly flagged as being &lt;code&gt;.album-art&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here we make changes via extension, leaving our base—and every other instance of it—completely untouched.&lt;/p&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;If you’re using OOCSS you need to be aware that using an object is fairly boolean. You need to understand the open/closed principle and that once you’ve written an abstraction you’re committed to it (unless you fancy a large refactoring job). With this in mind avoid abstracting too early and abstract &lt;em&gt;very&lt;/em&gt; carefully. Needing to modify an object is a big warning sign.&lt;/p&gt;

&lt;p&gt;If you find you’re having to undo or—even worse—change base objects, you need to stop and consider where things went wrong. If an abstraction no longer becomes suitable that’s cool; we’re allowed to touch markup so just stop using it in your HTML. If you’re finding you only ever need to peg classes onto things to extend their appearance then you’re doing it right!&lt;/p&gt;

&lt;p&gt;Do not modify your abstractions; needing to do so is a bad sign. If you need to alter things then &lt;em&gt;extend&lt;/em&gt; them.&lt;/p&gt;

&lt;p&gt;When working with OOCSS always keep in the back of your mind that &lt;strong&gt;objects are open to extension but closed to modification.&lt;/strong&gt; This will force you to write your base objects as stripped back, abstract and reusable as possible. Modify their appearance only by extension (that is to say, by adding more classes).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Single-direction margin declarations</title>
   <link href="http://inuitcss.com/2012/06/single-direction-margin-declarations"/>
   <updated>2012-06-12T18:11:59+01:00</updated>
   <id>http://inuitcss.com/2012/06/single-direction-margin-declarations</id>
   <content type="html">&lt;p&gt;This morning I awoke to find Smashing Magazine had retweeted &lt;a href=&quot;https://twitter.com/csswizardry/status/190090844181774336&quot;&gt;a tweet I made two months ago&lt;/a&gt; about how you should always try and apply margins in one direction only. This, like most rules in web development, is a very general (and breakable) rule. It’s even a rule you can opt not to follow at all, but after receiving a slew of Tweets asking why, I thought I’d write up why it’s a rule I live by, and one I’d recommend to anyone…&lt;/p&gt;

&lt;p&gt;I’m not sure how I arrived at this rule, but I’m really glad I did and I would likely never ever change it. The basic premise is that you should try and define all your margins in one direction. This means always use &lt;code&gt;margin-bottom&lt;/code&gt; to push items down the page, and &lt;code&gt;margin-left&lt;/code&gt; to push them across the page. I’m going to focus mainly on &lt;code&gt;margin-bottom&lt;/code&gt; throughout this article as it’s the most obvious to explain, but this can be applied to both directions (top/bottom, right/left).&lt;/p&gt;

&lt;p&gt;The benefits are, as I see them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Easier to define vertical rhythm in one fell swoop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More confidence in (re)moving components if you know their margins all push in the same direction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Components and elements don’t have to necessarily live in a certain order if their margins aren’t dependent on adjoining sides.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not being concerned with collapsing margins means one less thing to worry about.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Defining vertical rhythm&lt;/h2&gt;

&lt;p&gt;This next bit on its own is enough to convince me, this one tip is one of the most valuable ones I have, personally.&lt;/p&gt;

&lt;p&gt;Whenever I start a new project I typically want to know two things; my base &lt;code&gt;font-size&lt;/code&gt; and my base &lt;code&gt;line-height&lt;/code&gt;. Let’s say that I choose a base &lt;code&gt;font-size&lt;/code&gt; of 16px and a base &lt;code&gt;line-height&lt;/code&gt; of 24px. This gives me (&lt;a href=&quot;http://csswizardry.com/2011/12/measuring-and-sizing-uis-2011-style/&quot;&gt;in proper units&lt;/a&gt;) this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;html{
    font:&amp;lt;mark&amp;gt;1em&amp;lt;/mark&amp;gt;/&amp;lt;mark&amp;gt;1.5&amp;lt;/mark&amp;gt; &quot;Comic Sans MS&quot;, cursive;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That 1.5 is my &lt;a href=&quot;http://coding.smashingmagazine.com/2011/03/14/technical-web-typography-guidelines-and-techniques/#tt-magic-number&quot;&gt;Magic Number&lt;/a&gt;. This is massively important; knowing this number allows me to set up my entire project’s vertical rhythm in &lt;em&gt;one go&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h1,h2,h3,h4,h5,h6,hgroup,
ul,ol,dd,
p,figure,
pre,table,fieldset,hr{
    margin-bottom:&amp;lt;mark&amp;gt;1.5&amp;lt;/mark&amp;gt;rem;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bosh. Done. Now any block level element (I may have missed some) I add anywhere in that page will have a &lt;code&gt;line-height&lt;/code&gt; of 24px (if my base &lt;code&gt;font-size&lt;/code&gt; is 16px) and will be spaced apart by 24px (again, if my base &lt;code&gt;font-size&lt;/code&gt; is 16px).&lt;/p&gt;

&lt;p&gt;I can extend that list of selectors as and when I need to and all will remain in order:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h1,h2,h3,h4,h5,h6,hgroup,
ul,ol,dd,
p,figure,
pre,table,fieldset,hr,
&amp;lt;mark&amp;gt;.header,.media,.island&amp;lt;/mark&amp;gt;{
    margin-bottom:1.5rem;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For me that is reason enough to stick to just defining my margins in one direction, I can just drop any element anywhere and it will obey the same vertical rhythm as any others.&lt;/p&gt;

&lt;h2&gt;Confidence in portability&lt;/h2&gt;

&lt;p&gt;So if I know that all my margins are consistently in the same direction then I can be a lot more confident that if I add, move or &lt;em&gt;remove&lt;/em&gt; an element my spacing won’t mess up. This isn’t just about something as pretentious as vertical rhythm, this is about spacing in general. If everything is the same then it doesn’t really matter what is where, it all behaves similarly.&lt;/p&gt;

&lt;p&gt;If I had some odd situation where I have a &lt;code&gt;margin-top&lt;/code&gt; on element &lt;em&gt;A&lt;/em&gt;, a &lt;code&gt;margin-top&lt;/code&gt; and &lt;code&gt;margin-bottom&lt;/code&gt; on element &lt;em&gt;B&lt;/em&gt; and a &lt;code&gt;margin-bottom&lt;/code&gt; on element &lt;em&gt;C&lt;/em&gt; how can I be sure that removing &lt;em&gt;B&lt;/em&gt; won’t break anything? I can’t, because I mixed up my margins!&lt;/p&gt;

&lt;h2&gt;Less to think about&lt;/h2&gt;

&lt;p&gt;So if you can be sure things are a lot less likely to break there’s one less thing to worry (as much) about.&lt;/p&gt;

&lt;p&gt;One counter argument I got on Twitter today was that I didn’t ‘get’ collapsing margins. This kind of response really annoys (and offends) me. A similar one I get is ‘You just don’t understand specificity!’ whenever I advise against the use of IDs. It’s a developer’s understanding of a subject that allows them to know when to avoid or circumvent something.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/CSS2/box.html#collapsing-margins&quot;&gt;Collapsing margins&lt;/a&gt; aren’t rocket science but they &lt;em&gt;are&lt;/em&gt; one more caveat, one more thing to remember. Look at all that in the spec, all of that to have to consider just as a result of adjoining margins on elements. Don’t mix &lt;code&gt;margin-top&lt;/code&gt; and &lt;code&gt;margin-bottom&lt;/code&gt; and you won’t even need to think about that.&lt;/p&gt;

&lt;p&gt;As a developer gets better they try to be less clever. I know where using IDs can be a pain so I save myself the hassle by not using them, same with collapsing margins; no one gets points for taking the more complex route. I honestly believe that if anything with caveats or potential ‘gotchas’ can be avoided they should be*.&lt;/p&gt;

&lt;p&gt;I find I have never had any collapsed margin oddities in any of my projects because I avoid introducing the possibility.&lt;/p&gt;

&lt;h2&gt;Exceptions&lt;/h2&gt;

&lt;p&gt;By applying the &lt;code&gt;margin-bottom&lt;/code&gt; to all block-level elements that means that most things you put into a page will carry that spacing. Let’s say for example you have a heading in a promotional box that you don’t wish to have a &lt;code&gt;margin-bottom&lt;/code&gt;, simply override the rule as you would with any sensibly architected CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h1,h2,h3,h4,h5,h6,hgroup,
...{
    margin-bottom:1.5rem;
}
...
.promo-title{
    padding-bottom:1.5rem;
    border-bottom:1px solid #ccc;
    &amp;lt;mark&amp;gt;margin-bottom:0;&amp;lt;/mark&amp;gt;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using more specific selectors you can undo or alter your spacings with ease.&lt;/p&gt;

&lt;p&gt;In working at &lt;a href=&quot;http://www.bskyb.com&quot;&gt;Sky&lt;/a&gt;, there were times when we wanted a larger break between one section and another, let’s say double (&lt;code&gt;3rem&lt;/code&gt;) between a carousel and the content below it. Simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.carousel{
    ...
    margin-bottom:3rem;
    ...
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interestingly, what I actually did was create an abstract class of &lt;code&gt;.landmark&lt;/code&gt; which carried that &lt;code&gt;margin-bottom:3rem;&lt;/code&gt; to denote any content that was deemed a large, thematic break in the page (signified by larger spacing).&lt;/p&gt;

&lt;p&gt;Other times we had a boxed-off bit of content for which I used the &lt;a href=&quot;http://csswizardry.com/2011/10/the-island-object/&quot;&gt;Island Object&lt;/a&gt;. Some CSS like this…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.island{
    padding:1.5rem;
    -webkit-border-radius:4px;
       -moz-border-radius:4px;
            border-radius:4px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…would often lead to compounding margin-plus-padding issues, &lt;a href=&quot;http://jsfiddle.net/csswizardry/5p8ts/&quot;&gt;thus&lt;/a&gt;. The solution here was simply to remove the &lt;code&gt;margin-bottom&lt;/code&gt; from the last element, &lt;a href=&quot;http://jsfiddle.net/csswizardry/5p8ts/1/&quot;&gt;like so&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Breaking the rule&lt;/h3&gt;

&lt;p&gt;Obviously there will come a time when this rule needs breaking; we can’t even try and kid ourselves--&lt;em&gt;all&lt;/em&gt; web development rules get broken. However, before you do go against it, double and triple check that there isn’t a nicer solution. I really cannot remember the last time I broke this rule, but I’m sure I have and will need to in future. I just really, &lt;em&gt;really&lt;/em&gt; try not to.&lt;/p&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;Everything I’ve written here is nigh on impossible to prove and isn’t quantifiable, but speaking anecdotally and from experience on some huge websites, the method I use works perfectly. More than perfectly. I genuinely cannot remember a time I have had problems with collapsing margins or spacing issues or anything arising from arbitrary margin declarations.&lt;/p&gt;

&lt;p&gt;If you think this might be of use then I urge you to try it, it really has worked wonders on every site I’ve ever employed this on. Conversely, if I’ve missed a trick please do tell me!&lt;/p&gt;

&lt;p&gt;If you don’t like the idea of it then that’s totally cool; I can’t prove anything and if you’re comfortable as you are then that’s great!&lt;/p&gt;

&lt;p&gt;*From the guy who likes unquoted attributes in HTML… I know!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Keep your CSS selectors short</title>
   <link href="http://inuitcss.com/2012/05/keep-your-css-selectors-short"/>
   <updated>2012-05-15T19:35:38+01:00</updated>
   <id>http://inuitcss.com/2012/05/keep-your-css-selectors-short</id>
   <content type="html">&lt;p&gt;One thing I believe, as a very, &lt;em&gt;very&lt;/em&gt; general rule of thumb, is that as sites get bigger, selectors should get shorter.&lt;/p&gt;

&lt;p&gt;By this I mean that if you want to create extensible and maintainable, flexible and predictable websites, you should really take care to make your CSS selectors as dev-friendly as possible; i.e. short.&lt;/p&gt;

&lt;p&gt;Keeping CSS selectors short helps with a lot of things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Increases selector efficiency&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduces location dependency&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Increases portability&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduces chances of selector breakage&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Decreases specificity&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can make code more forgiving&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is a very vague list, so I’m going to address each in order. You will find that there is a lot of crossover between each point (e.g. reducing location dependency inherently means your selectors are more portable) but I feel they are all points in their own right.&lt;/p&gt;

&lt;h2&gt;Increases selector efficiency&lt;/h2&gt;

&lt;p&gt;I have written before about CSS selector efficiency. I'm going to gloss over a lot of the intricacies in this post so for a full background understanding I recommend you read &lt;a href=&quot;http://csswizardry.com/2011/09/writing-efficient-css-selectors/&quot;&gt;Writing efficient CSS selectors&lt;/a&gt; first.&lt;/p&gt;

&lt;p&gt;If we ignore actual types of selector (&lt;code&gt;*{}&lt;/code&gt; is typically the slowest, depending on how it's being used, IDs are the fastest followed by classes, descendants are comparably quite slow followed by pseudo-selectors) then &lt;em&gt;in general&lt;/em&gt; it is safe to say that shorter selectors are faster.&lt;/p&gt;

&lt;p&gt;This stands to reason, if we compare these two selectors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;html body .header .nav{}
.nav{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There we can see pretty clearly that in the first example, the browser has to look out for four things, the &lt;code&gt;.nav&lt;/code&gt; class, then the &lt;code&gt;.header&lt;/code&gt; class, then the &lt;code&gt;body&lt;/code&gt; element and then, finally, the &lt;code&gt;html&lt;/code&gt; element (browsers read selectors right-to-left).&lt;/p&gt;

&lt;p&gt;With the second example the browser only needs to look for one thing; the &lt;code&gt;.nav&lt;/code&gt; class. The browser has &lt;em&gt;four times&lt;/em&gt; less work to do to match that selector. Every time you write a selector try and trim as much losable stuff from it as possible. Instead of &lt;code&gt;ul.nav{}&lt;/code&gt; (two checks) write &lt;code&gt;.nav{}&lt;/code&gt; (one check). Instead of &lt;code&gt;.nav li a{}&lt;/code&gt; (three) write &lt;code&gt;.nav a{}&lt;/code&gt; (two).&lt;/p&gt;

&lt;p&gt;Now, &lt;a href=&quot;http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/&quot;&gt;CSS selector performance is—by-and-large—not something we &lt;em&gt;really&lt;/em&gt; need to worry about any more&lt;/a&gt;, but that doesn't mean we should be wasteful. I'm sure none of us would miss a lost £5 but that doesn't mean we go slipping banknotes into paper shredders… Selector efficiency &lt;em&gt;does&lt;/em&gt; exist and you might as well improve it where you &lt;strong&gt;very easily&lt;/strong&gt; can.&lt;/p&gt;

&lt;h2&gt;Reduces location dependency&lt;/h2&gt;

&lt;p&gt;By keeping selectors short you are likely to be reducing the amount of descendant (e.g. &lt;code&gt;.sidebar .promo{}&lt;/code&gt;) and child (e.g. &lt;code&gt;.sidebar &amp;gt; .promo{}&lt;/code&gt;) selectors. By removing these descending types of selectors you are reducing the necessity for an element to live inside another one. Let's reuse the &lt;code&gt;.sidebar .promo{}&lt;/code&gt; example…&lt;/p&gt;

&lt;p&gt;By having a selector like &lt;code&gt;.sidebar .promo{}&lt;/code&gt; we are saying we want to target any promotional item that lives in an element with the class of &lt;code&gt;.sidebar&lt;/code&gt;. This means that we are tied to always using that styling inside a certain element; we have a dependency on location.&lt;/p&gt;

&lt;p&gt;By replacing &lt;code&gt;.sidebar .promo{}&lt;/code&gt; with something like &lt;code&gt;.secondary-promo{}&lt;/code&gt; we can now place the element in question &lt;em&gt;anywhere&lt;/em&gt; we wish. In the sidebar—as before—but now also in the footer, or in the header, or after an article.&lt;/p&gt;

&lt;p&gt;By reducing descendants we can really reduce dependency and make things a lot more portable…&lt;/p&gt;

&lt;h2&gt;Increases portability&lt;/h2&gt;

&lt;p&gt;So now that we're not tied to locationally dependant selectors, we find that our components are a lot more portable. We can move things a lot more easily because our CSS doesn't care where a thing lives, it just cares that it exists. Awesome!&lt;/p&gt;

&lt;p&gt;Another way to increase portability is to not qualify selectors. A qualified selector is one like &lt;code&gt;ul.nav{}&lt;/code&gt; or &lt;code&gt;a.button{}&lt;/code&gt; or &lt;code&gt;div.content{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Qualified selectors are bad because they reduce efficiency (more checks than we really need) but—more importantly—because they tie us to specific elements. We can't now use that &lt;code&gt;.button&lt;/code&gt; class on an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, for example. We can't &lt;a href=&quot;http://csswizardry.com/2011/09/the-nav-abstraction/&quot;&gt;apply &lt;code&gt;.nav&lt;/code&gt; to an &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; to make a breadcrumb&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selectors should be element-agnostic&lt;/strong&gt;. Your CSS shouldn't care what element you're wanting to apply styling to.&lt;/p&gt;

&lt;p&gt;Another way to make selectors more portable is to drop elements &lt;em&gt;altogether&lt;/em&gt;. Take this, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Base widget styling */&amp;lt;/span&amp;gt;
.widget{}

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Style up widget titles */&amp;lt;/span&amp;gt;
.widget &amp;gt; h2{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have a troublesome selector; what if that &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; needs to become a &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;? What if we need to add another, non-titling &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; as a child of &lt;code&gt;.widget&lt;/code&gt;? We've made ourselves a very rigid and unportable selector here. Instead we should have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Base widget styling */&amp;lt;/span&amp;gt;
.widget{}

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Style up widget titles */&amp;lt;/span&amp;gt;
.widget-title{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can apply &lt;code&gt;.widget-title&lt;/code&gt; to &lt;em&gt;any&lt;/em&gt; element—let's say a &lt;code&gt;&amp;lt;h4&amp;gt;&lt;/code&gt;—and can now also have any number of unclassed &lt;code&gt;&amp;lt;h4&amp;gt;&lt;/code&gt;s in the widget without them adopting any title styling. Ossom!&lt;/p&gt;

&lt;h2&gt;Reduces chances of selector breakage&lt;/h2&gt;

&lt;p&gt;The longer a selector is, the more things the browser has to satisfy before it can match it. The more checks there are then—naturally—the more chance there is for something to go wrong.&lt;/p&gt;

&lt;p&gt;A (very exaggerated) selector like &lt;code&gt;body &amp;gt; div:nth-of-type(2) &amp;gt; article:first-child &amp;gt; p:first-child{}&lt;/code&gt;—borrowed from my talk &lt;a href=&quot;https://speakerdeck.com/u/csswizardry/p/breaking-good-habits?slide=15&quot;&gt;Breaking Good Habits&lt;/a&gt;—has &lt;em&gt;ten&lt;/em&gt; checks; ten things that must be satisfied in order for the browser to make that match.&lt;/p&gt;

&lt;p&gt;All that needs to happen is the location of the &lt;code&gt;div:nth-of-type(2)&lt;/code&gt; to change or the &lt;code&gt;p:first-child&lt;/code&gt; to become a &lt;code&gt;blockquote&lt;/code&gt; or the &lt;code&gt;article:first-child&lt;/code&gt; to no longer be a child of the &lt;code&gt;div:nth-of-type(2)&lt;/code&gt; or &lt;em&gt;any manner&lt;/em&gt; of things before that selector will break. Simply replacing that with a class of &lt;code&gt;.intro{}&lt;/code&gt; means that there is only one thing that could possibly break, and the chances of that happening are pretty much zero (you'd have to explicitly delete the class from your HTML to prevent a match).&lt;/p&gt;

&lt;p&gt;Shorter selectors mean there is statistically less chance for things to go wrong.&lt;/p&gt;

&lt;h2&gt;Decreases specificity&lt;/h2&gt;

&lt;p&gt;This is the big one! This is where it really matters!&lt;/p&gt;

&lt;p&gt;Longer selectors have a higher specificity. Specificity is a nightmare and &lt;strong&gt;you should keep specificity as low as possible all of the time&lt;/strong&gt;. We already know that we &lt;a href=&quot;http://csswizardry.com/2011/09/when-using-ids-can-be-a-pain-in-the-class/&quot;&gt;&lt;strong&gt;do not use IDs in CSS&lt;/strong&gt;&lt;/a&gt; but a chain of selectors are often just as bad (though not quite).&lt;/p&gt;

&lt;p&gt;A selector like &lt;code&gt;.widget &amp;gt; h2{}&lt;/code&gt; has a higher specificity (as well as the other problems we discussed) than a selector like &lt;code&gt;.widget-title{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.nav li a{}&lt;/code&gt; has a higher specificity than &lt;code&gt;.nav a&lt;/code&gt; (and is also less efficient). Reducing selector length reduces selector specificity and that is &lt;strong&gt;very important&lt;/strong&gt;. High specificity leads to self-induced specificity battles that can only be won by making subsequent selectors &lt;em&gt;more&lt;/em&gt; specific (or using &lt;code&gt;!important&lt;/code&gt;, shame on you). This is a terrible thing. The easiest way to reduce specificity (after &lt;em&gt;dropping IDs from your CSS &lt;strong&gt;completely&lt;/strong&gt;&lt;/em&gt;) is to keep your selectors short.&lt;/p&gt;

&lt;h2&gt;Can make code more forgiving&lt;/h2&gt;

&lt;p&gt;This is a very specific but very decent example of how short selectors can make code more forgiving. However, I will warn you, you can argue two sides of what I'm about to tell you; you can argue that it makes your code a lot more flexible and can gracefully handle breakages &lt;strong&gt;or&lt;/strong&gt; you could argue that it allows breakages in the first place by being too lenient. Anyway, here's a true story…&lt;/p&gt;

&lt;p&gt;In working on a pretty huge project at Sky I stuck to my own rules and coded a (vertical) nav bar CSS like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.nav{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Nav styles */&amp;lt;/span&amp;gt; }

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Note NO .nav li styles as this was a vertically stacking nav. */&amp;lt;/span&amp;gt;

.nav a{ display:block; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* More styles */&amp;lt;/span&amp;gt; }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, there was a CMS error which went undetected where the markup getting spat out was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;ul class=nav&amp;gt;
    &amp;lt;a href=#&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;a href=#&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;a href=#&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;a href=#&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Spot the problem? No &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s! This is &lt;em&gt;really&lt;/em&gt; not cool &lt;strong&gt;but&lt;/strong&gt;, as I had used &lt;code&gt;.nav a{}&lt;/code&gt; instead of &lt;code&gt;.nav li a{}&lt;/code&gt; nothing broke. My code was a lot more forgiving than if I'd had that third check in there.&lt;/p&gt;

&lt;p&gt;Now, this doesn't make the markup right, and it does actually &lt;em&gt;allow&lt;/em&gt; poorer markup than a more verbose selector, but you can see how the CSS was very forgiving of a markup error.&lt;/p&gt;

&lt;p&gt;Now I said you could argue both sides here, a more verbose selector means that we'd have spotted the CMS error immediately as no styles would have hit the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;s. But! In the same breath, our CSS was flexible enough to be okay with that. Make of it what you will, because I too am sat on the fence and a little disappointed that the error wasn't spotted, but here is a very specific example of how shorter selectors can lead to more forgiving CSS.&lt;/p&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;I did mention that this is a rule I've applied to larger sites but, honestly, you should apply this everywhere. The things we've discussed tend to really come into their own (and their absence painfully aware) on larger builds, but they will definitely, &lt;em&gt;definitely&lt;/em&gt; help you on builds of all sizes; small or large.&lt;/p&gt;

&lt;p&gt;So, by using more classes and less descendants, keeping selectors short and portable, keeping selectors element-agnostic and generally considering maintenance and chance-of-change when writing our CSS, we can really easily improve the quality of our code infinitely. We can make things more efficient, more forgiving, more flexible and more reusable just by revisiting one of the most simple and fundamental aspects of CSS; our selectors.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Front-Trends 2012</title>
   <link href="http://inuitcss.com/2012/04/front-trends-2012"/>
   <updated>2012-04-29T18:25:58+01:00</updated>
   <id>http://inuitcss.com/2012/04/front-trends-2012</id>
   <content type="html">&lt;p&gt;Last night I landed back in &lt;a href=&quot;http://instagr.am/p/KAOHsOojIg&quot;&gt;a cold, miserable Leeds&lt;/a&gt; after spending what was by far the most exciting, amazing and fun few days I’ve ever had—as a speaker at &lt;a href=&quot;http://2012.front-trends.com/&quot;&gt;Front-Trends&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some time last year I was invited to speak at the conference, the first of its type I have &lt;em&gt;ever&lt;/em&gt; spoken at; ‘nervous’ doesn’t even come close.&lt;/p&gt;

&lt;p&gt;I delivered my talk—&lt;a href=&quot;http://speakerdeck.com/u/csswizardry/p/breaking-good-habits-1&quot;&gt;Breaking Good Habits&lt;/a&gt;—to 470 people! My only previous speaking experience was in the tiny English town of Barnsley to a small room of no more than 50. &lt;a href=&quot;http://www.flickr.com/photos/csswizardry/7123682471/in/set-72157629558792354&quot;&gt;This&lt;/a&gt; was the most terrifying thing &lt;em&gt;ever&lt;/em&gt; (and there are over a hundred people out of shot).&lt;/p&gt;

&lt;p&gt;I also snapped some pretty poor iPhone pictures of my time in Warsaw which, if you’re interested in, you can grab &lt;a href=&quot;http://www.flickr.com/photos/csswizardry/sets/72157629558792354/&quot;&gt;on Flickr&lt;/a&gt;. If you’re a speaker and somehow find that you like my poorly focussed phone-camera snap of yourself then please, by all means, grab yourself a copy.&lt;/p&gt;

&lt;h2&gt;The talks&lt;/h2&gt;

&lt;p&gt;All of the talks were fantastic, very, very diverse, a mixture of technical and theoretical. They were all remarkable but my &lt;em&gt;personal&lt;/em&gt; favourites were &lt;a href=&quot;http://twitter.com/rachelandrew&quot;&gt;Rachel&lt;/a&gt;’s, &lt;a href=&quot;http://twitter.com/chriscoyier&quot;&gt;Chris&lt;/a&gt;’, &lt;a href=&quot;http://twitter.com/mathias&quot;&gt;Mathias&lt;/a&gt;’ and &lt;a href=&quot;http://twitter.com/bartaz&quot;&gt;Bartek&lt;/a&gt;’s.&lt;/p&gt;

&lt;p&gt;Rachel spoke about something that I’ve thought and agreed with for a long time; solving problems as and when they happen, not bloating your code from the outset with 101 different frameworks and, the thing that resounded with me the most, &lt;em&gt;we learn by making our own mistakes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Chris’ talk covered a lot about the concerns we as developers need to take into account these days with the shift in the web landscape. It was just &lt;em&gt;so&lt;/em&gt; funny that you couldn’t help lap up everything he said. I can’t do his talk justice, wait for the video!&lt;/p&gt;

&lt;p&gt;Mathias’ talk was just one of weird HTML quirkiness, something that I find super-interesting. I can’t wait for the video for that one (he was the only speaker to receive a full round of applause mid-talk!).&lt;/p&gt;

&lt;p&gt;Bartek covered the fact that everyone who writes code is, whether they know it or not, teaching someone else who is reading that code. It was a really feel-good talk that has got me really excited to rewrite CSS Wizardry (which is long overdue anyway).&lt;/p&gt;

&lt;p&gt;To see the videos and slides as they come available I recommend you follow &lt;a href=&quot;http://twitter.com/fronttrends&quot;&gt;the Front-Trends Twitter account&lt;/a&gt;; you will definitely want to catch them when they get online!&lt;/p&gt;

&lt;h3&gt;My talk&lt;/h3&gt;

&lt;p&gt;I was so, so nervous when I woke up on the morning of my talk. All I ate all day was an apple. I got on stage at 13:00, and saw the crowd of 450+ staring back at me. I was terrified.&lt;/p&gt;

&lt;p&gt;I got straight into the swing of things but was very aware of just how nervous I was. I can’t remember the half-hour of my talk at all, it’s now a total blur, and I was worried I’d really messed it up &lt;em&gt;but&lt;/em&gt; I got some absolutely amazing feedback from Twitter and people who found me after the talk personally. It seems everything went well!&lt;/p&gt;

&lt;h2&gt;The people&lt;/h2&gt;

&lt;p&gt;Front-Trends allowed me to finally meet some people who I’ve known online for ages. Me and &lt;a href=&quot;http://twitter.com/LeaVerou&quot;&gt;Lea&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/chriscoyier&quot;&gt;Chris&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/smashingmag&quot;&gt;Vitaly&lt;/a&gt; and others have followed each other for years and Front-Trends was my chance to finally meet them in person.&lt;/p&gt;

&lt;p&gt;I took &lt;a href=&quot;http://twitter.com/GotNoSugarBaby&quot;&gt;Jamie Mason&lt;/a&gt; along &lt;a href=&quot;http://www.flickr.com/photos/csswizardry/7123696997/in/set-72157629558792354&quot;&gt;with me&lt;/a&gt;; Jamie is someone I met when I moved to BSkyB and he’s one of my best friends. Absolutely hilarious and incredibly likeable, as well as a very, very talented JS developer, he was a great person to have along (especially considering my nerves).&lt;/p&gt;

&lt;p&gt;I got to meet &lt;a href=&quot;http://twitter.com/rachelandrew&quot;&gt;Rachel Andrew&lt;/a&gt; who me and Jamie hung out with for a couple of days. Her talk was one of my favourites (she’s a great developer who speaks a &lt;em&gt;lot&lt;/em&gt; of sense) and she’s also just super cool; she’s my new favourite person in the world! So clever yet humble, really laid back and fun, very easy to get on with and just all-round awesome. It was great to be able to hang out with her so much.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/smashingmag&quot;&gt;Vitaly Friedman&lt;/a&gt;, owner of Smashing Magazine, was someone I’d wanted to meet for &lt;em&gt;years&lt;/em&gt; and owe a heck of a lot to. It’s likely that the only reason you know CSS Wizardry exists is because of a Smashing Magazine tweet (and there have been lots). Vitaly was one hell of a guy, absolutely lovely! It was ace having a few beers with him, and I really hope to meet him again soon.&lt;/p&gt;

&lt;p&gt;Another person who was an absolute blast to hang out with was &lt;a href=&quot;http://twitter.com/alexgiron&quot;&gt;Alex Giron&lt;/a&gt;; a fun, funny guy who was real great company!&lt;/p&gt;

&lt;p&gt;Me and Jamie also met a lot of non-speakers which was really great. Far too many to name, but we spent a great chunk of time with &lt;a href=&quot;http://twitter.com/RowanManning&quot;&gt;Rowan&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/samhicks1985&quot;&gt;Sam&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/monkeyhutch&quot;&gt;Perry&lt;/a&gt; (who can be seen with his hands in the air at the very back, &lt;a href=&quot;http://www.flickr.com/photos/csswizardry/7123682471/in/set-72157629558792354&quot;&gt;here&lt;/a&gt;), &lt;a href=&quot;http://twitter.com/tomalterman&quot;&gt;Tom&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/turbalan&quot;&gt;Pavel&lt;/a&gt; (I hope I got that right!).&lt;/p&gt;

&lt;h2&gt;Beer&lt;/h2&gt;

&lt;p&gt;This was a hot topic on Twitter... Free beer being served &lt;em&gt;throughout&lt;/em&gt; the conference; not just after but &lt;em&gt;during&lt;/em&gt;. You could sit with a beer and watch your favourite developer give a talk. That’s actually pretty awesome.&lt;/p&gt;

&lt;p&gt;A lot of people on Twitter said to drink beer during a conference is unprofessional and that you shouldn’t serve any intoxicating beverages at such an event. To me that’s not right; drinking at a conference isn’t unprofessional, being drunk &lt;em&gt;is&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The weather was amazing during the conference, hovering around 30°C. There was a lot of grass outside the venue, it was &lt;em&gt;ideal&lt;/em&gt; beer weather. The beer acted as a social lubricant; we’re a young dynamic industry, we deal day-in-day-out with cool and interesting stuff, we’re not a bunch of boring squares who dress in suits, we’re a community of interesting and excitable individuals, the exact kind of people I’d love to have a beer with—and got to!&lt;/p&gt;

&lt;p&gt;The fact that beer was being served throughout the two days of baking sun where 470 like-minded people were gathered to watch some of the web’s best front-end developers (and me) give talks gave the whole thing a real festival feel. Front-Trends 2012 felt like a festival, a festival of designers, developers, sun, music and some absolutely stellar talks. Seriously, it was unreal. People commenting from afar on the beer situation unfortunately didn’t have the full context, they couldn’t see that no one was drunk, no one started any drinking games or competitions, no one embarrassed themselves; nothing went wrong.&lt;/p&gt;

&lt;h2&gt;In short&lt;/h2&gt;

&lt;p&gt;So, to sum up, in going to Front-Trends 2012 I:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Delivered a talk to &lt;a href=&quot;http://www.flickr.com/photos/csswizardry/7123682471/in/set-72157629558792354&quot;&gt;470 people&lt;/a&gt; from all over the globe.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spent the whole time with Jamie Mason, one of my best and funniest friends.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Saw some absolutely fantastic talks by some truly genius people.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hung out with Rachel Andrew for a couple of days.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Watched football in a bar with Jamie, Vitaly and Alex Giron.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Chilled out on a hammock with Lea Verou.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Almost died laughing at Chris Coyier.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally met Vitaly Friedman.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Saw a lot of beautiful sights in Warsaw.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lots, lots more.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Front-Trends was Wednesday to Saturday non-stop fun, interesting talks, great weather, lovely people and a beautiful city. It was my first and hopefully not my last talk at a proper conference, it was organised incredibly well and I would recommend that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Anyone thinking of heading to conferences over the next few years should get to Front-Trends.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People thinking of getting into speaking should try get a slot at Front-Trends (they got in touch with me even though I had zero speaking experience).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People organising conferences take a leaf out of &lt;a href=&quot;http://twitter.com/czerskip&quot;&gt;Paweł&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/varjs&quot;&gt;Damian&lt;/a&gt;’s book.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;To the organisers, the lovely people of Warsaw and the speakers and attendees of Front-Trends, a massive, massive thank you!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Harry&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The single responsibility principle applied to CSS</title>
   <link href="http://inuitcss.com/2012/04/the-single-responsibility-principle-applied-to-css"/>
   <updated>2012-04-28T22:57:37+01:00</updated>
   <id>http://inuitcss.com/2012/04/the-single-responsibility-principle-applied-to-css</id>
   <content type="html">&lt;p&gt;Having just spoken at &lt;a href=&quot;http://2012.front-trends.com/&quot;&gt;the Front-Trends conference in Warsaw&lt;/a&gt;, I’ve decided to expand on something which my talk mentioned a lot: classes.&lt;/p&gt;

&lt;p&gt;My talk covered how to build big, scalable front-ends and one of the key factors involved in doing so is sensible and generous use of abstracted classes. One thing that really helps you achieve this is the application of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;, a method used mainly in OO programming.&lt;/p&gt;

&lt;p&gt;Loosely, the single responsibility principle states that every module or chunk of code (a function etc) should do one job well and one job only. The benefits of this are mainly in the way of maintainability and extensibility.&lt;/p&gt;

&lt;p&gt;If we don’t adhere to the SRP then we are likely to end up with code which does more than it should, this means that altering one part of that code could negatively impact a seemingly unrelated part of the same snippet. It also makes our code a lot less flexible in that we find our code is trying to do too much; it is too specific in its job to be portable and reusable. Abstracting chunks of functionality into several responsibilities means we can reuse a lot more of our code and recombine it over and over with other similarly abstracted chunks.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;Wikipedia article&lt;/a&gt; makes a much better job of explaining than I can so I would recommend giving that a quick read (it’s only short).&lt;/p&gt;

&lt;p&gt;Also, you will find that a lot of us do this already, and perhaps without even realising. A class of &lt;code&gt;.wrapper&lt;/code&gt; is a good example of the SRP at play; by having a single, reusable class whose sole job it is to group content we make our code a lot easier to work with. We don’t need to apply lots of widths to lots of elements; we use one extra &lt;code&gt;div&lt;/code&gt; and delegate the width-constraining responsibility to that.&lt;/p&gt;

&lt;p&gt;We do this because it makes sense, but we don’t do it often enough; if we start actually thinking like this all the time we find we can vastly improve our code...&lt;/p&gt;

&lt;p&gt;The SRP is normally applied in programming circles but I have definitely found it is &lt;em&gt;incredibly&lt;/em&gt; useful when making lean, scalable front-ends. Here’s a quick example of un-abstracted code that &lt;strong&gt;doesn’t&lt;/strong&gt; follow the SRP:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- HTML --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;a href=/product class=&amp;lt;mark&amp;gt;promo&amp;lt;/mark&amp;gt;&amp;gt;Buy now!&amp;lt;/a&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
.promo{
    display:block;
    padding:20px;
    margin-bottom:20px;
    background-color:#09f;
    color:#fff;
    tex-shadow:0 0 1px rgba(0,0,0,0.25);
    border-radius:4px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have a class for a promotional box of content. Here we are doing &lt;strong&gt;two&lt;/strong&gt; things—we are defining box model and structure &lt;em&gt;and&lt;/em&gt; we are defining cosmetics (colouring etc).&lt;/p&gt;

&lt;p&gt;We can refactor this code to adhere to the SRP by splitting those two chunks of functionality into two classes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- HTML --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;a href=product class=&quot;&amp;lt;mark&amp;gt;island&amp;lt;/mark&amp;gt; promo&quot;&amp;gt;Buy now!&amp;lt;/a&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
.island{
    display:block;
    padding:20px;
    margin-bottom:20px;
}

.promo{
    background-color:#09f;
    color:#fff;
    tex-shadow:0 0 1px rgba(0,0,0,0.25);
    border-radius:4px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have two classes which each carry a single responsibility; &lt;code&gt;.island&lt;/code&gt; boxes off content and &lt;code&gt;.promo&lt;/code&gt; applies our promotional styling. This now means that we can do things like this, which previously we couldn’t:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- HTML --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;h2&amp;gt;Buy now with promo code: &amp;lt;span class=&amp;lt;mark&amp;gt;promo&amp;lt;/mark&amp;gt;&amp;gt;0MG4WE50ME&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previously we couldn’t have managed this as the &lt;code&gt;.promo&lt;/code&gt; class also carried a lot of box model; by abstracting our code into single responsibilities we can pick and choose what we want to use and where a lot more easily.&lt;/p&gt;

&lt;p&gt;We can take this much, much further; now we also have a generic class for boxing off content! Where we once might have had:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- HTML --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;div id=header&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div id=content&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div id=sub-content&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div id=footer&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
#header{
    padding:20px;
    margin-bottom:20px;
    background-color:#121416;
    color:#fff;
}

#content{
    width:640px;
    float:left;
    margin-right:20px;
    padding:20px;
    margin-bottom:20px;
}

#sub-content{
    width:280px;
    float:left;
    padding:20px;
    margin-bottom:20px;
}

#footer{
    padding:20px;
    margin-bottom:20px;
    background-color:#e4e4e4;
    color:#333;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We would now have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- HTML --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;div class=&quot;&amp;lt;mark&amp;gt;island&amp;lt;/mark&amp;gt; header&quot;&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&quot;&amp;lt;mark&amp;gt;island&amp;lt;/mark&amp;gt; content&quot;&amp;gt;

    &amp;lt;h2&amp;gt;Buy now with promo code &amp;lt;span class=&amp;lt;mark&amp;gt;promo&amp;lt;/mark&amp;gt;&amp;gt;0MG4WE50ME&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;div class=&quot;&amp;lt;mark&amp;gt;island&amp;lt;/mark&amp;gt; sub-content&quot;&amp;gt;

    &amp;lt;a href=product class=&quot;&amp;lt;mark&amp;gt;island&amp;lt;/mark&amp;gt; &amp;lt;mark&amp;gt;promo&amp;lt;/mark&amp;gt;&quot;&amp;gt;Buy now!&amp;lt;/a&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;div class=&quot;&amp;lt;mark&amp;gt;island&amp;lt;/mark&amp;gt; footer&quot;&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
.island{
    display:block;
    padding:20px;
    margin-bottom:20px;
}

.promo{
    background-color:#09f;
    color:#fff;
    tex-shadow:0 0 1px rgba(0,0,0,0.25);
    border-radius:4px;
}

.header{
    background-color:#121416;
    color:#fff;
}

.content{
    width:640px;
    float:left;
    margin-right:20px;
}

.sub-content{
    width:280px;
    float:left;
}

.footer{
    background-color:#e4e4e4;
    color:#333;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because we abstracted our code out we now have a really portable class for simply boxing off content!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; You should also abstract your layout to a grid system, taking the floats and widths off the page components and leaving that responsibility to the grids.&lt;/p&gt;

&lt;p&gt;Just some of the benefits of working like this are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Your CSS is a lot DRYer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can make far-reaching changes to your designs by simply modifying a base abstraction only once.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can make safer changes because you know that when editing a class you are only ever altering &lt;em&gt;one&lt;/em&gt; responsibility.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can combine responsibilities to make a variety of components from a lot of abstracted classes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Now we can take it further &lt;em&gt;still&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Because we have a nice &lt;code&gt;.island&lt;/code&gt; class whose sole responsibility is to box off content then we can now do things like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- HTML --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;div class=&quot;island content&quot;&amp;gt;
    ...
    &amp;lt;form&amp;gt;
        &amp;lt;p class=&quot;island &amp;lt;mark&amp;gt;error&amp;lt;/mark&amp;gt;&quot;&amp;gt;Please provide your name.&amp;lt;/p&amp;gt;
        ...
        &amp;lt;label class=&amp;lt;mark&amp;gt;error&amp;lt;/mark&amp;gt;&amp;gt;Name:&amp;lt;/label&amp;gt;
        ...
    &amp;lt;/form&amp;gt;
    ...
&amp;lt;/div&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
.island{
    display:block;
    padding:20px;
    margin-bottom:20px;
}

.error{
    background-color:#fce0e2;
    color:#c00;
}
.error.island{
    border:5px solid #c00;
    border-radius:4px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because we have our chunks of CSS only working on one thing at a time then we can reuse and combine useful things time and time again. I’ve written about this before: &lt;a href=&quot;https://plus.google.com/u/0/110483125936065828120/posts/DGPQzUdPi84&quot;&gt;Class based builds are like eating at Subway&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;When to use it?&lt;/h2&gt;

&lt;p&gt;There’s no definite answer to questions like this but as a general rule try and stick to the SRP any time you think that subsets of a style rule could be split out into more manageable and &lt;strong&gt;reusable&lt;/strong&gt; abstractions. Any time you are coding a potentially repeatable design pattern then try and split it out as per the single responsibility principle.&lt;/p&gt;

&lt;h3&gt;But!&lt;/h3&gt;

&lt;p&gt;It’s important not to take this too far; classes should be abstracted but ideally not presentational. Classes like &lt;code&gt;.round-corners&lt;/code&gt; for the sake of SRP are really not all that advisable.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My HTML/CSS coding style</title>
   <link href="http://inuitcss.com/2012/04/my-html-css-coding-style"/>
   <updated>2012-04-20T18:58:53+01:00</updated>
   <id>http://inuitcss.com/2012/04/my-html-css-coding-style</id>
   <content type="html">&lt;p&gt;Whenever I post jsFiddles, tutorials, articles or do some work here at Sky, I’m very particular about my coding style and am often asked questions about it. A lot of people say ‘code is art’; to me that sentence is a little pretentious but what I &lt;em&gt;do&lt;/em&gt; think is that code can be a little more quirky and original than most people write it. It can be interesting. &lt;a href=&quot;https://twitter.com/mathias&quot;&gt;Mathias Bynens&lt;/a&gt; is constantly tweeting crazy little snippets of quirky, valid JS; he’s also made &lt;a href=&quot;http://mothereff.in&quot;&gt;some great little tools&lt;/a&gt; to help you explore the different avenues available to you when writing awesome, expressive and ‘different’ code.&lt;/p&gt;

&lt;p&gt;When I write HTML and CSS I have a certain set of rules and guidelines I stick to with regards syntax and formatting. I‘ve decided to write them up here &lt;strong&gt;not&lt;/strong&gt; to preach or tell you how to do things, but simply to share how &lt;em&gt;I&lt;/em&gt; like to work. If you hate the things I do that’s cool, these are not recommendations. If you like anything I do then great; you can have it. What I &lt;em&gt;would&lt;/em&gt; love to see is other people doing the same; please consider writing up your coding styles, nuances and preferences and share them about!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;HTML&lt;/h2&gt;

&lt;p&gt;With HTML5 we have a lot looser syntax which means more scope for experimentation than we were typically used to with XHTML. With things like &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s not requiring closing, some attributes not requiring quotes, tags not needing to be lowercase and elements like &lt;code&gt;&amp;lt;hr /&amp;gt;&lt;/code&gt;s not needing to be self-closing, there’s a lot to play with! Here’s what I do with my HTML...&lt;/p&gt;

&lt;h3&gt;Unquoted attributes&lt;/h3&gt;

&lt;p&gt;Where I don’t need to, I don’t quote attributes. Where I would have had &lt;code&gt;class=&quot;wrapper&quot;&lt;/code&gt; I now have &lt;code&gt;class=wrapper&lt;/code&gt;. Why? Because I can and I like the look of it!&lt;/p&gt;

&lt;p&gt;Obviously, sometimes you do need to quote attributes. If you have multiple classes like &lt;code&gt;class=wrapper header-wrapper&lt;/code&gt; then you &lt;em&gt;need&lt;/em&gt; quotes. Without quotes the browser sees this as: &lt;code&gt;class=&quot;wrapper&quot; header-wrapper=&quot;&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To know when you can and when you can’t use quotes then have a tinker with Mathias’ &lt;a href=&quot;http://mothereff.in/unquoted-attributes&quot;&gt;Mothereffing unquoted attribute value validator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are instances where you &lt;em&gt;could&lt;/em&gt; use unquoted attributes but I choose not to. It’s hard to summarise this in a quick rule so I’ll give an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;input type=submit class=btn value=Login&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is perfectly valid usage of unquoted attributes, however, imagine the client calls up the agency and (very rightly) says Hey, the word &lt;em&gt;Login&lt;/em&gt; needs to be &lt;em&gt;Log in&lt;/em&gt;, can we change that please? The project manager knows the designer is totally flat out busy and doesn't have the time for smaller amends at the moment. Because project managers are awesome lovely people (right? Right?!), they decide that they can make this simple change themselves to save the designer a job. They open up the relevant file, see &lt;code&gt;value=Login&lt;/code&gt; and simply change it to &lt;code&gt;value=Log in&lt;/code&gt;, assuming that’s all there is to it. Now, the PM is likely not a technical person so they won’t necessarily know that this will now need quoting; the designer would have.&lt;/p&gt;

&lt;p&gt;So, anywhere where the content of the attribute is subject to arbitrary change, I like to quote the attributes as a backup. Also, any time an attribute is populated dynamically (for example, through a CMS) it is best to quote it just in case; if you aren’t manually and consciously altering the attribute, play it safe and pop some quotes round it...&lt;/p&gt;

&lt;p&gt;Now, I know what you’re thinking: If you sometimes have to use quotes then why not always use quotes? It’s more consistent. Well, you’re half right. It is more consistent on the whole, but by introducing rules I make my own consistency; if you can get away with not using quotes, then do so.&lt;/p&gt;

&lt;h3&gt;No self closing tags&lt;/h3&gt;

&lt;p&gt;With HTML5 we can write things like &lt;code&gt;&amp;lt;hr /&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; and so on. I choose to omit the &lt;code&gt;/&amp;gt;&lt;/code&gt;, so in my HTML you’ll see things like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;meta name=viewport content=&quot;width=device-width, minimum-scale=1.0, maximum-scale=1.0&quot;&amp;gt;
&amp;lt;link rel=stylesheet href=css/style.css&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unquoted attributes where I can, and no self closing tags.&lt;/p&gt;

&lt;h3&gt;Optional closing tags&lt;/h3&gt;

&lt;p&gt;In HTML5 (or non-XHTML syntax) you can omit actual, full closing tags from &lt;a href=&quot;http://meiert.com/en/blog/20080601/optional-tags-in-html-4/&quot;&gt;certain elements&lt;/a&gt;! This means that the following is totally valid:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Lorem
    &amp;lt;li&amp;gt;Ipsum
    &amp;lt;li&amp;gt;Dolor
    &amp;lt;li&amp;gt;Sit
    &amp;lt;li&amp;gt;Amet
&amp;lt;/ul&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I &lt;em&gt;don’t&lt;/em&gt; write my HTML like this as I’m just not too keen on the look of it... If you want to though, you certainly can.&lt;/p&gt;

&lt;h3&gt;Whitespace&lt;/h3&gt;

&lt;p&gt;This one is hard to quantify, but I like to use whitespace to loosely reflect the separation of elements that you might see once rendered. I group and space elements with whitespace as you would expect them to be grouped visually in the rendered page, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;dl&amp;gt;

    &amp;lt;dt&amp;gt;Lorem&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.&amp;lt;/dt&amp;gt;

    &amp;lt;dt&amp;gt;Ipsum&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante.&amp;lt;/dt&amp;gt;

    &amp;lt;dt&amp;gt;Dolor&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;Morbi in sem quis dui placerat ornare. Pellentesque odio nisi euismod in pharetra.&amp;lt;/dt&amp;gt;

&amp;lt;/dl&amp;gt;


&amp;lt;div class=promo&amp;gt;

    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Pellentesque habitant morbi tristique&amp;lt;/strong&amp;gt; senectus et netus et malesuada fames ac turpis egestas.&amp;lt;/p&amp;gt;    
    &amp;lt;a href=# class=btn&amp;gt;Lorem&amp;lt;/a&amp;gt;

&amp;lt;/div&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A mixture of no, single and double lines of whitespace help to separate elements, or show their visual relationship to one another. For example, the &lt;code&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;s and &lt;code&gt;&amp;lt;dd&amp;gt;&lt;/code&gt;s belong with each other, but are separate from other groupings.&lt;/p&gt;

&lt;h3&gt;Comments on closing tags&lt;/h3&gt;

&lt;p&gt;After every major chunk of HTML, for example, the end of a carousel, or the end of the content &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, I place a closing-comment, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div class=content&amp;gt;

    ...

    &amp;lt;div class=carousel&amp;gt;
    ...
    &amp;lt;/div&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- /carousel --&amp;gt;&amp;lt;/span&amp;gt;

    ...

&amp;lt;/div&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- /content --&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is certainly not uncommon practice, but because all closing tags look the same as each other (they can’t carry the classes that the opening tags do) it’s often nice to leave a comment so you know what element you’re dealing with.&lt;/p&gt;

&lt;h3&gt;Namespaced fragment identifiers&lt;/h3&gt;

&lt;p&gt;I came up with &lt;a href=&quot;http://csswizardry.com/2011/06/namespacing-fragment-identifiers/&quot;&gt;this idea to namespace fragment identifiers&lt;/a&gt; last year. It’s basically, I think, a nice way to add a little more meaning to your fragment identifiers and give a little bit more of a clue as to what they actually link to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;a href=&amp;lt;mark&amp;gt;#section:fragment-identifiers&amp;lt;/mark&amp;gt;&amp;gt;Fragment identifiers&amp;lt;/a&amp;gt;

...

&amp;lt;div id=&amp;lt;mark&amp;gt;section:fragment-identifiers&amp;lt;/mark&amp;gt;&amp;gt;...&amp;lt;/div&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2&gt;CSS&lt;/h2&gt;

&lt;p&gt;So far I’ve dealt with how I write HTML, but what about CSS? My CSS is a lot less ‘different’, it’s mainly only formatting and syntax rules here.&lt;/p&gt;

&lt;h3&gt;No IDs&lt;/h3&gt;

&lt;p&gt;This is more a technical thing, but I have &lt;a href=&quot;http://csswizardry.com/2011/09/when-using-ids-can-be-a-pain-in-the-class/&quot;&gt;a blanket-ban on IDs in CSS&lt;/a&gt;. There is literally no point in them, and they only ever cause harm. Everything that needs styling is done so without using IDs.&lt;/p&gt;

&lt;h3&gt;Table of contents&lt;/h3&gt;

&lt;p&gt;At the top of my CSS files I have a table of contents that maps to the section titles in the document, it looks a little like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    CONTENTS
\*------------------------------------*/&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*
NOTES
RESET
SHARED     Share anything we can across elements.
MAIN       HTML, BODY, etc.
*/&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Section titles&lt;/h3&gt;

&lt;p&gt;I denote each section (layout, type, tables etc) of my CSS thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    $MAIN
\*------------------------------------*/&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This section heading is also prepended with a &lt;code&gt;$&lt;/code&gt;. This is so that--when I do a find for a section--I actually do a find for &lt;code&gt;$MAIN&lt;/code&gt; and not &lt;code&gt;MAIN&lt;/code&gt;. This means that I’m only ever searching within section headings. A search for &lt;code&gt;$MAIN&lt;/code&gt; will only ever find me a section with that name whereas a search for &lt;code&gt;MAIN&lt;/code&gt; could find me something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.s{
    background-image:url(/img/css/sprites/&amp;lt;mark&amp;gt;main&amp;lt;/mark&amp;gt;.png);
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Being able to search just in the scope of headings is very, very useful.&lt;/p&gt;

&lt;p&gt;I also leave five carriage returns between each section, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    $MAIN
\*------------------------------------*/&amp;lt;/span&amp;gt;





&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    $TYPE
\*------------------------------------*/&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that when scrolling quickly through my stylesheet I know that any gaps in the code are likely to be new sections.&lt;/p&gt;

&lt;h3&gt;The shared section&lt;/h3&gt;

&lt;p&gt;I wrote about the shared section briefly on Smashing Magazine in my article &lt;a href=&quot;http://coding.smashingmagazine.com/2011/08/26/writing-css-for-others/&quot;&gt;Writing CSS for others&lt;/a&gt;. This is basically a section in a stylesheet where, instead of declaring one rule over and over, we define it once and attach selectors to it, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;a,.brand,h1,h2,h3,h4,h5,h6{
    color:#BADA55;
}
h1,h2,h3,h4,h5,h6,
ul,ol,dl,
p,
table,
form,
pre,
hr{
    margin-bottom:24px;
    margin-bottom:1.5rem;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doing this means that things I want to use over and over are only written once, and I can update all instances in one place. It’s kinda like variables in vanilla CSS...&lt;/p&gt;

&lt;h3&gt;Formatting&lt;/h3&gt;

&lt;p&gt;I write multiline CSS with a distinct lack of whitespace that most people seem to hate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.wrapper{
    margin:0 auto;
    max-width:940px;
    padding:10px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No spaces before braces or after colons.&lt;/p&gt;

&lt;h3&gt;Vendor prefixes&lt;/h3&gt;

&lt;p&gt;I write vendor prefixes so that the values all line up vertically; this means I can scan them quicker (to check they're all identical) and I can alter them all in one go if my editor supports typing in columns:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.island{
    padding:1.5em;
    margin-bottom:1.5em;
    -webkit-border-radius:&amp;lt;mark&amp;gt;4px&amp;lt;/mark&amp;gt;;
       -moz-border-radius:&amp;lt;mark&amp;gt;4px&amp;lt;/mark&amp;gt;;
            border-radius:&amp;lt;mark&amp;gt;4px&amp;lt;/mark&amp;gt;;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Indenting rulesets&lt;/h3&gt;

&lt;p&gt;One thing I do like to do is indent my rulesets to mirror the nesting of their corresponding HTML. For example, take this carousel HTML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div class=carousel&amp;gt;

    &amp;lt;ul class=panes&amp;gt;

        &amp;lt;li class=pane&amp;gt;

            &amp;lt;h2 class=pane-title&amp;gt;Lorem&amp;lt;/h2&amp;gt;

        &amp;lt;/li&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- /pane --&amp;gt;&amp;lt;/span&amp;gt;

        &amp;lt;li class=pane&amp;gt;

            &amp;lt;h2 class=pane-title&amp;gt;Ipsum&amp;lt;/h2&amp;gt;

        &amp;lt;/li&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- /pane --&amp;gt;&amp;lt;/span&amp;gt;

        &amp;lt;li class=pane&amp;gt;

            &amp;lt;h2 class=pane-title&amp;gt;Dolor&amp;lt;/h2&amp;gt;

        &amp;lt;/li&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- /pane --&amp;gt;&amp;lt;/span&amp;gt;

    &amp;lt;/ul&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- /panes --&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;/div&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- /carousel --&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My CSS for this would be formatted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    $CAROUSEL
\*------------------------------------*/&amp;lt;/span&amp;gt;
.carousel{
    [styles]
}

    .panes{
        [styles]
    }

        .pane{
            [styles]
        }

            .pane-title{
                [styles]
            }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By doing this, I can see from the CSS roughly how the HTML should look; I don’t need the HTML in front of me in order to work out what lives in what.&lt;/p&gt;

&lt;h3&gt;HTML in CSS&lt;/h3&gt;

&lt;p&gt;In situations where it &lt;em&gt;would&lt;/em&gt; be useful for a developer to know exactly how a chunk of CSS applies to some HTML, I often include a snippet of HTML in a CSS comment, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    $TOOLTIPS
\*------------------------------------*/&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*
&amp;lt;small class=tooltip&amp;gt;&amp;lt;span&amp;gt;Lorem ipsum dolor&amp;lt;/span&amp;gt;&amp;lt;/small&amp;gt;
*/&amp;lt;/span&amp;gt;
.tooltip{
    [styles]
}
    .tooltip &amp;gt; span{
        [styles]
    }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;For a loose example of the above, poke through &lt;a href=&quot;https://github.com/csswizardry/vanilla&quot;&gt;vanilla&lt;/a&gt; or the &lt;a href=&quot;http://hry.rbrts.me&quot;&gt;hry.rbrts.me&lt;/a&gt; source &lt;a href=&quot;https://github.com/csswizardry/hry.rbrts.me&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just to reiterate, this is my coding &lt;em&gt;style&lt;/em&gt;; I’m not making suggestions or laying down rules here. If you like anything then feel free to adopt it yourself, if you hate it then that’s cool (just hope you don’t inherit one of my projects!)&lt;/p&gt;

&lt;p&gt;I’d really love if people wrote up and shared their own; there are loads of different ways of writing code and I’d be really interested to see what other people do. There’s a really good opportunity for learning some really neat tips!&lt;/p&gt;

&lt;p&gt;If you do write your own, please tweet it at me &lt;strong&gt;with the hashtag &lt;a href=&quot;https://twitter.com/#!/search/realtime/%23codestyle&quot;&gt;#codestyle&lt;/a&gt;&lt;/strong&gt;, that way everyone can easily keep track of any posts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unquoted attributes, no self-closing tags, loads of whitespace, weird CSS indenting and a lot of comments; what's yours?&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing faavorite</title>
   <link href="http://inuitcss.com/2012/04/introducing-faavorite"/>
   <updated>2012-04-17T21:25:51+01:00</updated>
   <id>http://inuitcss.com/2012/04/introducing-faavorite</id>
   <content type="html">&lt;p&gt;Okay, I say ‘introducing’, but it’s been live for almost a month now!&lt;/p&gt;

&lt;p&gt;Me and one of my bestest friends and most-talented-developers-ever &lt;a href=&quot;http://twitter.com/makeusabrew&quot;&gt;Nick Payne&lt;/a&gt; have been working since the beginning of 2012 on my faavorite project to date: &lt;a href=&quot;http://faavorite.com&quot;&gt;faavorite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;faavorite is, at its heart, &lt;a href=&quot;http://faavorite.com&quot;&gt;a tool for managing your Twitter favorites. You can tag, search, discuss, consume, read, share (and a lot, lot more) yours and others’ Twitter favorites&lt;/a&gt; from right within the app. We’ve put your favorites to work &lt;strong&gt;big time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We all know how favorites work; you see a funny tweet, something you want to read later, a great code tip or just something that made you smile, and you favorite it. Whilst the intention is good, how often do you head back to your favorites? Twitter don’t really do anything of use with them; you can’t search them, you can sort or categorise them, you can’t &lt;em&gt;really&lt;/em&gt; do anything with them…&lt;/p&gt;

&lt;p&gt;This is a problem Nick and I really seemed agreed on, and we both wanted to solve it. And, over a few months, that’s what we did, and what we’re still doing.&lt;/p&gt;

&lt;p&gt;I aim to do at least one technical post about faavorite pretty soon detailing the mobile-first, OOCSS, designed-in-the-browser, no-IE7-support approach. I want to document the front-end architecture and a few new things in quite a lot of detail but with 101 things on at the moment that will have to wait.&lt;/p&gt;

&lt;p&gt;For now I’d like to thank:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://twitter.com/makeusabrew&quot;&gt;Nick&lt;/a&gt;&lt;/strong&gt;, for just being superawesome. He’s worn many hats throughout this project, including—but not limited to—developer, DevOps, SysAdmin, hotelier, barista and a whole host more. You can read &lt;a href=&quot;http://paynedigital.com/2012/04/faavorite-tech-stack&quot;&gt;his impressive and mind-boggling technical writeup&lt;/a&gt; of the app at your own &lt;del&gt;risk&lt;/del&gt; will.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://twitter.com/lucybest&quot;&gt;Lucy&lt;/a&gt;&lt;/strong&gt;, Nick’s girlfriend, for putting up with me seeing Nick more than she now gets to, and for cooking up some ace meals during our full-weekend coding sessions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://twitter.com/WengersToyBus&quot;&gt;Bryan James&lt;/a&gt;&lt;/strong&gt;, the guy who created the faavorite brand. It’s a thing of beauty, I’m sure you’ll agree.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You guys!&lt;/strong&gt; The users, the people who’ve given feedback and suggestions and who’ve generally made the project worthwhile.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you’ve not signed up already but use Twitter then I encourage you to give it a whirl; it’s free and, well, I think it’s pretty awesome: &lt;a href=&quot;http://faavorite.com&quot;&gt;faavorite.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh and one other thing; if you’re already in (and like) faavorite, please consider inviting your friends along. Content is better shared and the more the merrier. We really need to get some non-web-geeks in faavorite as soon as possible in order to diversify (and not seem like an app just for web dev types) so if you have any friends on Twitter who might be interested then please do send them our way! Happy faavoriting!&lt;/p&gt;

&lt;p&gt;Cheers,
&lt;em&gt;H&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Comments on CSS Wizardry</title>
   <link href="http://inuitcss.com/2012/04/comments-on-css-wizardry"/>
   <updated>2012-04-16T08:08:07+01:00</updated>
   <id>http://inuitcss.com/2012/04/comments-on-css-wizardry</id>
   <content type="html">&lt;p&gt;Hi guys, long time no speak. I've been absolutely rushed off my feet of late with 101 other things. CSS Wizardry--although it hasn't been updated in far too long--has had a massive surge of comment spam. Massive :(&lt;/p&gt;

&lt;p&gt;I can't pick through 6,000+ comments looking for the odd real one so I'm gonna blitz them all and if you have left a comment which hasn't made it live just let me know and I'll reinstate it.&lt;/p&gt;

&lt;p&gt;Cheers, and sorry,
&lt;em&gt;H&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hacker News rebuttal</title>
   <link href="http://inuitcss.com/2012/03/hacker-news-rebuttal"/>
   <updated>2012-03-13T01:29:12+00:00</updated>
   <id>http://inuitcss.com/2012/03/hacker-news-rebuttal</id>
   <content type="html">&lt;p&gt;Yesterday &lt;a href=&quot;http://news.ycombinator.com/item?id=3693610&quot;&gt;I decided to post on Hacker News something I’ve recently been working on for both myself and Sky&lt;/a&gt;. That something was a list of &lt;a href=&quot;https://github.com/csswizardry/CSS-Guidelines/blob/master/CSS%20Guidelines.md&quot;&gt;guidelines as to how best write CSS for manageable and maintainable projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, a number of the HN community didn’t take so well to my points so I’ve decided to publish a full response, as opposed to the disjointed and frankly unprofessional comment discussion that was emerging.&lt;/p&gt;

&lt;p&gt;One user in particular took exception to a lot of my advice and it is his issues I shall address most directly. This isn’t a vendetta at all, more my trying to answer his and others’ concerns at large. He offered a pretty 1:1 comeback to a lot of my points so I shall try to maintain a similar format here.&lt;/p&gt;

&lt;p&gt;I may paraphrase a lot here so I urge you, &lt;strong&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=3693610&quot;&gt;please, read the original thread&lt;/a&gt;&lt;/strong&gt;. I apologise and regret and instances in which I come across as rude and/or unprofessional; I acted on impulse rather than rationally, as I should have done.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;”For each level of markup nesting, try and indent your CSS to match.”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;He said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Nope.”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Indenting CSS to mirror your markup structure can be very useful for a number of reasons, chief among which is the ability to see &lt;em&gt;at a glance&lt;/em&gt; how the listed CSS selectors should be used in HTML. For example, when building a carousel, I often find myself with CSS selectors like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.carousel{}
.panes{}
.pane{}
.slide-image{}
.slide-title{}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As these selectors are only one class deep it is difficult to see at a glance how they might map to my HTML. One solution might be to write my CSS like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.carousel{}
.carousel .panes{}
.carousel .panes .pane{}
.carousel .panes .pane .slide-image{}
.carousel .panes .pane .slide-title{}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But of course you don’t need me to tell you how nasty that is…&lt;/p&gt;

&lt;p&gt;Instead, I prefer a structure more like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.carousel{}
    .panes{}
        .pane{}
            .slide-image{}
            .slide-title{}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here my selectors are still nice and short but I can still see how they map to my HTML structure. I find this really useful to see at a glance how these rules relate to one another.&lt;/p&gt;

&lt;p&gt;If you don’t like this, or won’t find it useful, that’s cool! Just don’t use it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Also write vendor prefixed CSS so that colons all line up”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;He said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Nope”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I really have no idea why you wouldn’t do this one. It’s often been proposed that we should write vendor prefixed CSS thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;-webkit-border-radius:4px;
   -moz-border-radius:4px;
        border-radius:4px;
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means all our values—the bits that matter the most—are lined up to a) scan quickly and b) edit at once with columnal typing (in text editors which support it). This, to me, is a &lt;a href=&quot;http://www.google.co.uk/search?sourceid=chrome&amp;amp;ie=UTF-8&amp;amp;q=define%3Ano-brainer&quot;&gt;no-brainer&lt;/a&gt; and a very quick-win.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Instead of building dozens of unique components, try and spot repeated design patterns abstract them; build these skeletons as base ‘objects’ and then peg classes onto these to extend their styling for more unique circumstances.”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;He said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;[Not unless you are a big website like Facebook]&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It doesn’t matter if you are working on the next Facebook or for some guy from the pub, if you can build a website from several repeated components you should. From a performance, consistency, maintainability and sheer sensibility point of view, don’t solve the same problem a dozen times when you can solve it once with an abstraction.&lt;/p&gt;

&lt;p&gt;Best practices are best practices, the size of a project is irrelevant.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“All components should be left totally free of widths; your components should always remain fluid and their widths should be governed by a grid system.”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;He said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Nope. Again, grid systems are something that should be used on a case-by-case basis, according to the nature of the site you're building.”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Here I made something of a mistake; when I say grid system what I actually mean is &lt;em&gt;any&lt;/em&gt; means of abstracting your layout into its own layer.&lt;/p&gt;

&lt;p&gt;If this &lt;em&gt;is&lt;/em&gt; a grid system then this is simple; a grid system handles your layout and your components fill it.&lt;/p&gt;

&lt;p&gt;If you are not using a grid system then wrapper and parent elements should handle layout and the components should still say fluid. As I said on Twitter just three days prior to this:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Box-model properties are the most fragile and unpredictable and thus should be avoided wherever you can. Leave layout to wrappers/parents…” (&lt;a href=&quot;https://twitter.com/csswizardry/status/178062012742504448&quot;&gt;#&lt;/a&gt;)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“When sites break it‘s usually because of layout—the less layout stuff we declare the less chance it has to break. Abstract layout to grids!” (&lt;a href=&quot;https://twitter.com/csswizardry/status/178063631265710080&quot;&gt;#&lt;/a&gt;)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Whether using a grid system or not, your components should not carry dimensions. Think of a page like a set of shelves; you set up your shelving units (grid system (or similar)) and then populate them with things (components). If you didn’t have the shelves erected then the components would be supporting themselves, holding themselves up; this makes moving or changing them very volatile.&lt;/p&gt;

&lt;p&gt;Abstract your layout to wrappers, parents or grid systems, always.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Heavily location-based selectors are bad for a number of reasons.”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;He said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Nope. What you're arguing against is a rule that has a high degree of specificity…”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I’m not; I’m talking about location based styling. As soon as an elements begins to rely on its parent, and their parent, and their parent’s parent then you are doing it wrong. Your styles should never rely too heavily on where they live as this makes them &lt;em&gt;incredibly&lt;/em&gt; unportable.&lt;/p&gt;

&lt;p&gt;Putting classes on the elements you wish to affect rather than drilling down to them via the DOM tree is a lot better in terms of portability in that you don’t have to rely on a location in order to set styles. This one really is a &lt;a href=&quot;http://www.google.co.uk/search?sourceid=chrome&amp;amp;ie=UTF-8&amp;amp;q=define%3Ano-brainer&quot;&gt;no-brainer&lt;/a&gt; for me…&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“An over-qualified selector is one like div.promo”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;He said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;[This is actually a good idea unless you want a class to be applicable to any element]&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Erm, yes please! Ideally classes are applicable to any element; classes should be element-agnostic. The ability to apply them to any element we wish is &lt;em&gt;exactly&lt;/em&gt; what we want.&lt;/p&gt;

&lt;p&gt;Why would you ever, &lt;em&gt;ever&lt;/em&gt; write &lt;code&gt;div.promo{}&lt;/code&gt; in your stylesheet if that could be left at &lt;code&gt;.promo{}&lt;/code&gt;?! Why would you &lt;em&gt;ever&lt;/em&gt; limit yourself to only being able to use a class on one type of element when you could leave the leading type selector off and have an element-agnostic rule?&lt;/p&gt;

&lt;p&gt;This is another &lt;a href=&quot;http://www.google.co.uk/search?sourceid=chrome&amp;amp;ie=UTF-8&amp;amp;q=define%3Ano-brainer&quot;&gt;no-brainer&lt;/a&gt; to me. Don’t tie yourself to things when you really just don’t need to. I think we can all agree that &lt;code&gt;.promo{}&lt;/code&gt; is a lot more (re)usable than &lt;code&gt;div.promo{}&lt;/code&gt;. By tying an element to any class you are the only thing that will hinder you going forward; you are preemptively closing a lot of doors on yourself…&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Do not use IDs in CSS at all.”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;He said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“NOPE NOPE NOPE NOPE NOPE. Understand specificity rules. Write good selectors. Don't outright ban IDs just because you're not careful enough to write clean CSS.”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I’m pretty sure no CSS developer has ever said ‘I wish I’d used an ID here instead of a class.’&lt;/p&gt;

&lt;p&gt;IDs work, sure, but they are way too specific. It doesn’t matter how good a developer you are, you cannot change the fact that an ID is massively more specific than a class.&lt;/p&gt;

&lt;p&gt;I would genuinely love to see an elegant solution to &lt;a href=&quot;http://jsfiddle.net/csswizardry/3sxZR/&quot;&gt;this&lt;/a&gt; that doesn’t use a class over an ID. (&lt;a href=&quot;http://csswizardry.com/2011/09/when-using-ids-can-be-a-pain-in-the-class/&quot;&gt;There isn't one.&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;There is literally &lt;em&gt;no&lt;/em&gt; reason why, from a purely CSS point of view, that an ID is better than a class. An ID is impossible to reuse (whether you want to or not) and they have a way-over-the-top specificity.&lt;/p&gt;

&lt;p&gt;Anything you can do with an ID can be done with a class, but with none of the drawbacks. IDs will only ever trip you up because you can never reuse them and they will trump your class-based-selectors by quite an order of magnitude.&lt;/p&gt;

&lt;p&gt;Classes; all the bits you love about IDs with none of the bits that are like IDs.&lt;/p&gt;

&lt;p&gt;To me, another &lt;a href=&quot;http://www.google.co.uk/search?sourceid=chrome&amp;amp;ie=UTF-8&amp;amp;q=define%3Ano-brainer&quot;&gt;no-brainer&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“As a general rule, all layout and box-model rules can and will work without an IE stylesheet if you refactor and rework your CSS.”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;He said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Hahahahahahahahahhaa”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was the sole CSS developer on &lt;a href=&quot;http://skybet.com&quot;&gt;Sky Bet&lt;/a&gt;. This project (as a whole) has taken over a year for the whole team involved (and almost a year of my dev time).&lt;/p&gt;

&lt;p&gt;To support IE7+ I used all of zero IE stylesheets. Not one. A project which took me almost a year did not require one single IE stylesheet. It is doable, it should be done.&lt;/p&gt;

&lt;p&gt;I haven’t written an IE stylesheet in all of my professional career. I started working when I was 18 so that makes three years; I haven’t written an IE stylesheet in over three years. It’s not that hard, seriously.&lt;/p&gt;

&lt;p&gt;To just laugh off such a statement seemed a little odd, but seriously, if you invest enough time and take enough care, you will not need an IE stylesheet.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Like I said in &lt;a href=&quot;https://github.com/csswizardry/CSS-Guidelines/blob/master/README.md&quot;&gt;the documents’s README&lt;/a&gt;, you can disregard the advice if you wish, but make sure you fully understand it before shunning it completely.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pragmatic, practical font sizing in CSS</title>
   <link href="http://inuitcss.com/2012/02/pragmatic-practical-font-sizing-in-css"/>
   <updated>2012-02-29T23:49:06+00:00</updated>
   <id>http://inuitcss.com/2012/02/pragmatic-practical-font-sizing-in-css</id>
   <content type="html">&lt;p&gt;One thing I've been thinking a lot about lately is how to build sites properly. Not what we have been &lt;em&gt;told&lt;/em&gt; is proper, but what actually makes sense for us as developers. I recently spoke at &lt;a href=&quot;http://thedigitalbarn.co.uk/&quot;&gt;The Digital Barn&lt;/a&gt; on exactly this; my talk—Breaking Good Habits—dealt with how we as developers need to solve problems not only for our users and clients, but for ourselves as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/stubbornella&quot;&gt;Nicole Sullivan&lt;/a&gt;—who totally rocks—has laid a lot of new foundations for us in her work on &lt;a href=&quot;http://oocss.org&quot;&gt;OOCSS&lt;/a&gt; and her 'unconventional' but absolutely spot-on approach to building websites. Gems like &lt;a href=&quot;http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/&quot;&gt;&lt;em&gt;the media object&lt;/em&gt;&lt;/a&gt; have seriously changed how I build websites and, if you take the time to study it for yourself, I think it might just do the same for you as well.&lt;/p&gt;

&lt;h2&gt;Double-stranded heading hierarchy&lt;/h2&gt;

&lt;p&gt;Another absolutely stellar nugget of wisdom she's given us is what I call &lt;em&gt;double-stranded heading hierarchy&lt;/em&gt;. This is the practice of defining a class every time you define a heading in CSS.&lt;/p&gt;

&lt;p&gt;For example, if--for whatever reason--we want our &lt;code&gt;h2&lt;/code&gt;s in our sidebar to be the same size as a &lt;code&gt;h1&lt;/code&gt;, and the &lt;code&gt;h4&lt;/code&gt;s in our footer to be the same size as a &lt;code&gt;h3&lt;/code&gt;, we might have had some code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- HTML --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;div class=content&amp;gt;
  &amp;lt;h1&amp;gt;Lorem&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=sub-content&amp;gt;
  &amp;lt;h2&amp;gt;Lorem&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=footer&amp;gt;
  &amp;lt;h4&amp;gt;Lorem&amp;lt;/h4&amp;gt;
&amp;lt;/div&amp;gt;



&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
h1,
.sub-content h2{ [font styles] }
h2{ [font styles] }
h3,
.footer h4{ [font styles] }
h4{ [font styles] }
h5{ [font styles] }
h6{ [font styles] }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But now we'd have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- HTML --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;div class=content&amp;gt;
  &amp;lt;h1&amp;gt;Lorem&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=sub-content&amp;gt;
  &amp;lt;h2 class=h1&amp;gt;Lorem&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=footer&amp;gt;
  &amp;lt;h4 class=h3&amp;gt;Lorem&amp;lt;/h4&amp;gt;
&amp;lt;/div&amp;gt;



&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
h1,.h1{ [font styles] }
h2,.h2{ [font styles] }
h3,.h3{ [font styles] }
h4,.h4{ [font styles] }
h5,.h5{ [font styles] }
h6,.h6{ [font styles] }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the former is far more arbitrary and those lists of selectors can soon become unwieldy, especially over a larger project. By assigning a class along with each heading style we now have those styles attached to a very flexible selector that can be moved anywhere, rather than to a very specific and non-movable one.&lt;/p&gt;

&lt;p&gt;Now, I'm not such a fan of the &lt;code&gt;.hN&lt;/code&gt; notation, I much prefer a solution that I &lt;em&gt;believe&lt;/em&gt; to have been suggested by Mr Jeremy Keith, and that is to use abstract classes made up of the first six letters of the Greek alphabet, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h1,.alpha   { [font styles] }
h2,.beta    { [font styles] }
h3,.gamma   { [font styles] }
h4,.delta   { [font styles] }
h5,.epsilon { [font styles] }
h6,.zeta    { [font styles] }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which now gives us:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div class=content&amp;gt;
  &amp;lt;h1&amp;gt;Lorem&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=sub-content&amp;gt;
  &amp;lt;h2 class=alpha&amp;gt;Lorem&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=footer&amp;gt;
  &amp;lt;h4 class=gamma&amp;gt;Lorem&amp;lt;/h4&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neat, huh?&lt;/p&gt;

&lt;p&gt;So now &lt;code&gt;.alpha&lt;/code&gt; can carry the style information of a &lt;code&gt;h1&lt;/code&gt; wherever you wish; it doesn't depend on location &lt;em&gt;or&lt;/em&gt; a type of element. A double-stranded heading hierarchy; lovely.&lt;/p&gt;

&lt;h2&gt;Extending this?&lt;/h2&gt;

&lt;p&gt;Okay, so now we have our heading styles all nice and portable we've won most of the battle. I've been using this method for months now and I &lt;em&gt;love&lt;/em&gt; it. My CSS is so much more efficient, more portable, more powerful, I can build faster, I'm not repeating font styles over and over, but what next?&lt;/p&gt;

&lt;p&gt;The other night whilst working on &lt;a href=&quot;http://faavorite.com&quot;&gt;faavorite&lt;/a&gt; with &lt;a href=&quot;http://twitter.com/makeusabrew&quot;&gt;Nick&lt;/a&gt; I came up with a full on font-sizing micro-framework.&lt;/p&gt;

&lt;p&gt;The problems I found I had with font-sizing on &lt;em&gt;any&lt;/em&gt; site include (but are not limited to):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Repetition of &lt;code&gt;font-size&lt;/code&gt;, &lt;code&gt;line-height&lt;/code&gt; etc declarations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Overly-specific and/or location-dependent selectors (e.g. &lt;code&gt;.sidebar h2{}&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arbitrary font sizes could and &lt;em&gt;did&lt;/em&gt; creep into my CSS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When using &lt;code&gt;rem&lt;/code&gt; with &lt;code&gt;px&lt;/code&gt; fallbacks, there is a lot to type!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And a few important things to remember:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Font sizes, like colour palettes, should be limited, preset and non-arbitrary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vertical rhythm is important and easy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DRY code is important for both efficiency and maintainability.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's important to save yourself as much time as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Classes are neither semantic or insemantic.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With this in mind, I decided that I wanted to use font-sizing much like a grid system; define it once in the stylesheet and just constantly reuse it.&lt;/p&gt;

&lt;h3&gt;Preset font sizes&lt;/h3&gt;

&lt;p&gt;Like colour palettes are, font sizes should be strict, predefined and intentional. From both a code and design point of view, you shouldn't deviate from your scale—you shouldn't really ever need to and doing so will just make code harder to work with.&lt;/p&gt;

&lt;p&gt;Presetting your font sizes is pretty easy; typically you might have requirements for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Normal body copy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Headings 1–6&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Small print&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A few other sizes for larger-than-normal headings etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Setting the base font size is simple, just pop it on the &lt;code&gt;html&lt;/code&gt; and everything will inherit it, paragraphs, lists, tables, you name it.&lt;/p&gt;

&lt;p&gt;For your headings you define a series of &lt;code&gt;hN&lt;/code&gt; and its corresponding Greek letter class, e.g. &lt;code&gt;h1,.alpha{}&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Non-standard font-sizing&lt;/h3&gt;

&lt;p&gt;You ever had that need to turn a design &lt;a href=&quot;http://www.youtube.com/watch?v=EbVKWCpNFhY&quot;&gt;up to 11&lt;/a&gt;? When you have a masthead promo and even a &lt;code&gt;h1&lt;/code&gt; ain't big enough? I think we all have…&lt;/p&gt;

&lt;p&gt;It's tempting to create a new, unique selector to cater for this new requirement, perhaps something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.masthead h1{ font-size:5em; }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And whilst this will work, you'll only ever get that 5em goodness if you use &lt;em&gt;specifically&lt;/em&gt; a &lt;code&gt;h1&lt;/code&gt; that is &lt;em&gt;specifically&lt;/em&gt; in a &lt;code&gt;.masthead&lt;/code&gt;. This isn't very reusable at all. Sadface.&lt;/p&gt;

&lt;p&gt;To combat this, I decided to create some new abstract classes, this time borrowing &lt;a href=&quot;http://en.wikipedia.org/wiki/SI_prefix&quot;&gt;SI prefixes&lt;/a&gt;. Now we have the &lt;code&gt;h1,.alpha{}&lt;/code&gt; through to &lt;code&gt;h6,.zeta{}&lt;/code&gt; that we did before, but as well as those we have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.giga{ [font styles] }
.mega{ [font styles] }
.kilo{ [font styles] }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These classes are the ones &lt;em&gt;above&lt;/em&gt; &lt;code&gt;h1&lt;/code&gt; and are the seldom used ones that make stuff massive!&lt;/p&gt;

&lt;h3&gt;Going the other way?&lt;/h3&gt;

&lt;p&gt;Okay, so far we've worked with body copy to headings to beyond; what about small print? Well I opted to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;small,&amp;lt;del datetime=&quot;2012-03-01T00:00:16+00:00&quot;&amp;gt;.omega&amp;lt;/del&amp;gt;&amp;lt;ins datetime=&quot;2012-03-01T00:00:16+00:00&quot;&amp;gt;.milli&amp;lt;/ins&amp;gt;{ [font styles] }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://csswizardry.com/2011/01/html5-and-text-level-semantics/#small-el&quot;&gt;&lt;code&gt;small&lt;/code&gt; has been redefined in HTML5&lt;/a&gt; so that's an element we can use again freely&lt;del&gt; and &lt;code&gt;.omega&lt;/code&gt; is simply the last letter in the Greek alphabet&lt;/del&gt;.&lt;/p&gt;

&lt;h4&gt;Addendum&lt;/h4&gt;

&lt;p&gt;That there genius and awesome chap &lt;a href=&quot;http://twitter.com/TomNomNom&quot;&gt;Tom Hudson&lt;/a&gt; suggested I use &lt;code&gt;.milli&lt;/code&gt; for this as it goes &lt;em&gt;below&lt;/em&gt; the regular scale. So, anything &lt;em&gt;on&lt;/em&gt; the normal scale is Greek letters, anything &lt;em&gt;off&lt;/em&gt; the scale (above or below) is SI prefixes.&lt;/p&gt;

&lt;h3&gt;Vertical rhythm&lt;/h3&gt;

&lt;p&gt;To maintain vertical rhythm we need two key ingredients; consistent line heights and consistent bottom margins. We need a &lt;a href=&quot;http://coding.smashingmagazine.com/2011/03/14/technical-web-typography-guidelines-and-techniques/#tt-magic-number&quot;&gt;magic number&lt;/a&gt;. This number is typically defined by the line height of your body copy, so if you have &lt;code&gt;html{ font-size:16px; line-height:1.5; }&lt;/code&gt; then your magic number is 16 x 1.5 = &lt;strong&gt;24&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now you know that all your line heights and margin bottoms &lt;em&gt;have&lt;/em&gt; to be a multiple of 24px.&lt;/p&gt;

&lt;h2&gt;Bringing it together&lt;/h2&gt;

&lt;p&gt;It really is imperative to take a look at an actual example of all the above brought together in order to fully 'get' it. I made &lt;a href=&quot;https://bitly.com/xxiqfm&quot;&gt;this jsFiddle demo&lt;/a&gt; of &lt;em&gt;just&lt;/em&gt; CSS; you can add HTML and tinker with it yourselves, combining elements with classes to create double stranded, portable font sizing framework stuff!&lt;/p&gt;

&lt;h2&gt;Where does that leave us?&lt;/h2&gt;

&lt;p&gt;We now have a self-contained font-sizing framework which should hopefully mean we never need to define another &lt;code&gt;font-size&lt;/code&gt; declaration again! We can manage our brand specific type rules from one place, we can build stuff faster, we can build faster stuff, we can keep our code DRYer, we can keep our styling a lot more consistent, we can keep styling location _in_dependent and we can make far reaching changes in one fell-swoop!&lt;/p&gt;

&lt;p&gt;Feel free to take the code and modify or improve it.&lt;/p&gt;

&lt;p&gt;Also please note that I am not suggesting we all use these specific classes; experiment, find your own, see what you're comfortable with and report back!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Breaking Good Habits—The Digital Barn</title>
   <link href="http://inuitcss.com/2012/02/breaking-good-habits-the-digital-barn"/>
   <updated>2012-02-12T12:36:11+00:00</updated>
   <id>http://inuitcss.com/2012/02/breaking-good-habits-the-digital-barn</id>
   <content type="html">&lt;p&gt;Yesterday—11 February, 2012—I gave my first talk ever to the attendees of &lt;a href=&quot;http://thedigitalbarn.co.uk/&quot;&gt;The Digital Barn&lt;/a&gt;, a small independent conference organised by &lt;a href=&quot;http://about.me/mwatson&quot;&gt;Matt Watson&lt;/a&gt; and &lt;a href=&quot;http://mkjones.co.uk/&quot;&gt;Kimb Jones&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My talk, Breaking Good Habits, took a look at how we as front-end developers often, and usually with the best of intentions, solve the wrong problems for the wrong people, causing ourselves maintainability nightmares in the name of 'best practice'.&lt;/p&gt;

&lt;p&gt;I looked at common misconceptions and offered more practical and sensible alternatives in the shape of OOCSS, and more.&lt;/p&gt;

&lt;p&gt;I'd really like to thank everyone that turned up, but specific thanks go to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://twitter.com/makeusabrew&quot;&gt;Nick Payne&lt;/a&gt;&lt;/strong&gt;—moral support (and chauffeur).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://about.me/mwatson&quot;&gt;Matt&lt;/a&gt; and &lt;a href=&quot;http://mkjones.co.uk/&quot;&gt;Kimb&lt;/a&gt;&lt;/strong&gt;—for organising the event and providing me with such a great opportunity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://twitter.com/brucel&quot;&gt;Bruce Lawson&lt;/a&gt;&lt;/strong&gt;—for being an absolute gent, easing my nerves before the talk and saying nice things about it afterward.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://twitter.com/stubbornella&quot;&gt;Nicole Sullivan&lt;/a&gt;&lt;/strong&gt;—for changing the way I build websites and giving me, indirectly, knowledge I was able to share in my talk.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Slides&lt;/h2&gt;

&lt;p&gt;My slides and personal notes are available online but if you are going to &lt;a href=&quot;http://2012.front-trends.com/&quot;&gt;Front-Trends 2012&lt;/a&gt; I implore you &lt;strong&gt;please do not look at them&lt;/strong&gt;. I shall be reworking/repurposing this talk for my appearance in Warsaw.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://speakerdeck.com/u/csswizardry/p/breaking-good-habits&quot;&gt;Slides on Speaker Deck&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/csswizardry/Talks/tree/master/Digital%20Barn%202012&quot;&gt;Notes and original Keynote file on GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks all who turned out, I hope you enjoyed yourselves. I thoroughly enjoyed myself, and The North needs more mini-conferences!!!&lt;/p&gt;

&lt;p&gt;For more info on the conference itself the super-awesome &lt;a href=&quot;http://twitter.com/leannebuchan&quot;&gt;Leanne Buchan&lt;/a&gt; did &lt;a href=&quot;http://theculturevulture.co.uk/blog/digital-design/a-digital-conference-in-the-metropolis/&quot;&gt;a feature with me on The Culture Vulture&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On HTML and CSS best practices</title>
   <link href="http://inuitcss.com/2011/12/on-html-and-css-best-practices"/>
   <updated>2011-12-11T12:15:26+00:00</updated>
   <id>http://inuitcss.com/2011/12/on-html-and-css-best-practices</id>
   <content type="html">&lt;p&gt;Best practices are exactly that; &lt;em&gt;best&lt;/em&gt;. Not 'better', not 'good when…' or 'best if…', just best. They're always the best, no matter what.&lt;/p&gt;

&lt;p&gt;This is something I learned whilst undertaking the single biggest project of my career so far; the complete (and not-yet-live) rebuild of one of BSkyB's most trafficked websites. For years I'd been working on medium-sized projects where I strove to use as few classes as possible, my CSS was so elegant and hand-crafted and everything used the cascade. I thought it was beautiful.&lt;/p&gt;

&lt;p&gt;I found my old approach isn't best practice when working on a big site, therefore it's not best practice at all… You can scale down the big site mentality to smaller builds, you can't scale up small site mentality to bigger ones. With this in mind, how you'd build bigger sites is best practice, how you tend to build smaller sites is &lt;em&gt;typically&lt;/em&gt; (though, as ever, not always) based on fallacy and myth.&lt;/p&gt;

&lt;p&gt;I recently rebuilt my friend &lt;a href=&quot;http://sampenrose.co.uk/&quot;&gt;Sam's design portfolio site&lt;/a&gt;. Typically I'd have used IDs everywhere, not used any OO and not really paid much attention to the length or efficiency of my CSS selectors. This would have worked but only because the site is small. Any attempts by Sam to scale the site up, add pages, move components or alter the layout would have been hampered by these methods. Instead I decided to apply big-site mentality and dropped any IDs, used an OO approach and made sure every component is reusable. &lt;a href=&quot;https://github.com/csswizardry/sampenrose.co.uk&quot;&gt;The resulting code&lt;/a&gt; is incredibly flexible, very efficient and still looks nice.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;OOCSS is &lt;em&gt;always&lt;/em&gt; best practice.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DRY is &lt;em&gt;always&lt;/em&gt; best practice.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Efficiency is &lt;em&gt;always&lt;/em&gt; best practice.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maintainability is &lt;em&gt;always&lt;/em&gt; best practice.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flexibility is &lt;em&gt;always&lt;/em&gt; best practice.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It doesn't matter if you're building the next Facebook or if it's just a site for the builder down the road; best practice is always best. You might not notice an inefficient selector on a small site, but it doesn't mean that it's not still inefficient. Just because you don't notice something it doesn't mean it's not still happening.&lt;/p&gt;

&lt;p&gt;Build every site like it's a 1000 page behemoth because then it can scale; it may never need to, but it &lt;em&gt;can&lt;/em&gt;. Building every site like it's a piece of art, using convoluted selectors and rigid, ID ridden code, it can never scale, even if you want it to.&lt;/p&gt;

&lt;p&gt;Your code might look like the &lt;a href=&quot;http://en.wikipedia.org/wiki/Sistine_Chapel&quot;&gt;Sistine Chapel&lt;/a&gt;, but if it's a chore to maintain, or you find you can't pick up a component and drop it anywhere with zero worry, then it's not powerful. Code is about power before prettiness. You might feel dirty at first, but when you realise how nicely things fall into place using proper best practices you'll see the benefits.&lt;/p&gt;

&lt;p&gt;The only person who cares how pretty your code is is you. Your users want fast UIs, your clients want reliable builds and you and your team want code that is easy to maintain 6 months and a dozen client mind-changes down the line.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best always means best, it has no caveats or conditions.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Further reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.lukew.com/ff/entry.asp?1379&quot;&gt;Our Best Practices are Killing Us&lt;/a&gt; by Nicole Sullivan&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://oocss.org/&quot;&gt;OOCSS.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Measuring and sizing UIs, 2011-style (and beyond)</title>
   <link href="http://inuitcss.com/2011/12/measuring-and-sizing-uis-2011-style"/>
   <updated>2011-12-07T13:10:21+00:00</updated>
   <id>http://inuitcss.com/2011/12/measuring-and-sizing-uis-2011-style</id>
   <content type="html">&lt;p&gt;For years we used pixels to lay out web pages. Then, not so long ago, we were dabbling with ems to make our pages &lt;em&gt;elastic&lt;/em&gt;. Now, in 2011, most of us are adopting a responsive approach and using fluid grids and percentages.&lt;/p&gt;

&lt;p&gt;These methods seem to have all happened sequentially, with us each time dropping the last. I've decided, though, that the best builds use aspects of all previous methods; fixed, elastic and fluid.&lt;/p&gt;

&lt;h2&gt;Using percentages…&lt;/h2&gt;

&lt;p&gt;Let's forget responsive design for a second. Responsive design is a three-tiered approach but here we're only interested in fluid layouts (N.B. not even necessarily fluid grids). A fluid layout, as you all know, is one that is size-agnostic; it acts like a liquid, occupying a constant percentage of a varying space.&lt;/p&gt;

&lt;p&gt;Now, fluid grids are a little tricky as they're based around full grid systems. Luckily I've created a simple &lt;a href=&quot;http://csswizardry.com/fluid-grids/&quot;&gt;fluid grid calculator&lt;/a&gt; to work these behemoths out, but in more simple terms it's remarkably easy to set a fluid layout even if that was never the intention.&lt;/p&gt;

&lt;p&gt;If your designer sends you a two-column design then all you need to do is work out &lt;strong&gt;not&lt;/strong&gt; how big the respective columns are, but instead work out &lt;em&gt;how much bigger one is than the other&lt;/em&gt;. That is to say; stop thinking 'this content area is 600px and the sidebar is 300px' and &lt;em&gt;start&lt;/em&gt; thinking 'this content area is twice as big as the sidebar'. Percentages work well whether you're going responsive or not!&lt;/p&gt;

&lt;p&gt;Design is about proportions, not absolutes, and in ignoring actual pixel measurements in favour of relative ones you can ensure that designs are not tethered to numbers, but to proportions.&lt;/p&gt;

&lt;p&gt;So the next PSD you get sent that is not meant to be responsive, just try this method out and at least make it fluid. If your sidebar is 220px wide and your content area is 640px then take that as meaning 'the content area is 2.909 times bigger than the sidebar'.&lt;/p&gt;

&lt;h3&gt;…or using nothing at all&lt;/h3&gt;

&lt;p&gt;Even better than using percentages is to use no measurement at all. All components you build (navs, tables, figures, thumbnail galleries, banners, you name it) should never have widths (and never &lt;em&gt;ever&lt;/em&gt; have heights) applied to them. They should be constrained only by their parents.&lt;/p&gt;

&lt;p&gt;An element without measurements is inherently fluid, but in the best possible way; &lt;em&gt;it will work wherever you put it&lt;/em&gt;. Ironically, the most important takeaway from this--an article about setting measurements--is simply 'don't'. Every time you can avoid setting a measurement, you should.&lt;/p&gt;

&lt;h2&gt;Using ems&lt;/h2&gt;

&lt;p&gt;Ems are an old favourite. They're great for setting type, and with ems it's &lt;em&gt;all&lt;/em&gt; about the type.&lt;/p&gt;

&lt;p&gt;As I outline in the next section, I don't actually set font-sizes in ems; I use rems which is essentially &lt;em&gt;ems-with-benefits&lt;/em&gt;. What I do set in ems is things &lt;em&gt;to do with&lt;/em&gt; type; &lt;code&gt;margin-bottom&lt;/code&gt;s on paragraphs, lists, headings and the like; paddings on buttons, nav links and promos and other such measurements; borders on promos etc.&lt;/p&gt;

&lt;p&gt;What this does is ensure that the 'feel' of the design is maintained no matter how far a user wishes to scale their text.&lt;/p&gt;

&lt;p&gt;Let's take an example. A designer has made a PSD with a nav in it. The nav links are blocks with a font-size of 12px (0.75em) and a padding of 5px, &lt;a href=&quot;http://jsfiddle.net/csswizardry/NZLwc/&quot;&gt;thus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, as I stated previously, a lot of design isn't about numbers, it's about &lt;em&gt;proportions&lt;/em&gt;. It's not about 12px and 5px looking best here, it's about &lt;em&gt;a link looks best when its padding is just under half its own font-size&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It can be a confusing way of looking at things at first, but once you realise that the 12 and 5 are actually totally irrelevant here and that it's about their &lt;em&gt;relation&lt;/em&gt; to one another, you should soon get the hang of things.&lt;/p&gt;

&lt;p&gt;Let's assume the user doubles their font-size, now you have a link that is 24px in size but still has a padding of 5px. That's going to look very cramped. This is why we need to set paddings on text in ems, so that they track the font-size. In this case 5px as an em unit of 12px is 0.417, so now &lt;a href=&quot;http://jsfiddle.net/csswizardry/NZLwc/2/&quot;&gt;our code looks like this&lt;/a&gt;. Try scaling up these two examples up and see how the second looks a lot nicer when the padding scales too.&lt;/p&gt;

&lt;p&gt;So, whenever you are setting a measurement because it looks good when set against nearby type (think borders, paddings, margins etc) try and forget the absolutes and begin thinking 'this padding needs to be just under half of whatever the font-size needs to be'.&lt;/p&gt;

&lt;p&gt;Not convinced that users scale their text all that much? Well I have no data but I love &lt;a href=&quot;https://twitter.com/5minuteargument/status/134682811683717121&quot;&gt;this thought provoking analogy&lt;/a&gt; from &lt;a href=&quot;https://twitter.com/5minuteargument/&quot;&gt;@5minuteargument&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;I'm going to start using TV volume as a CSS font analogy: not everyone is listening to your programme at the same volume…&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Please note that when I refer to scaling I don't mean the browser's Ctrl+[+/-] scaling/zooming, I mean a user stylesheet or design alteration that changes the base font-size of the document.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Line-heights&lt;/h3&gt;

&lt;p&gt;There are several ways of setting line-heights. A general rule of thumb is to never set them in pixels as this, as discussed above, won't track your font-size. In this case you'd set them in ems or percentages, so that you never end up with 'a font-size of 12px and a line height of 18px', you'd get 'text whose line-height is 1.5 times its font-size'.&lt;/p&gt;

&lt;p&gt;However, even better than using ems, you just set them unitless. Work out the em value, but drop the em &lt;em&gt;from&lt;/em&gt; the value, so &lt;code&gt;line-height:1.5em;&lt;/code&gt; would just be &lt;code&gt;line-height:1.5;&lt;/code&gt;. Eric Meyer explains this nicely &lt;a href=&quot;http://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/&quot;&gt;over on his site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To work out unitless line-heights is simple. Use the following equation: the line-height I want ÷ the font-size I have. Want a 20px heading to have a 30px line-height? 30 ÷ 20 = 1.5. A 12px button to have a 24px line-height? 24 ÷ 12 = 2.&lt;/p&gt;

&lt;h2&gt;Using rems&lt;/h2&gt;

&lt;p&gt;Despite &lt;a href=&quot;http://csswizardry.com/2011/05/font-sizing-with-rem-could-be-avoided/&quot;&gt;my initial thoughts&lt;/a&gt;, I have now started setting type in rems (with a pixel fallback).&lt;/p&gt;

&lt;p&gt;This gives us two things, firstly we have what I call 'progressive accessibility' in that it brings the accessibility benefits of ems but only in more advanced browsers.&lt;/p&gt;

&lt;p&gt;Secondly, and more importantly, it gives us the confidence of pixels plus the scaling properties of ems. This is ridiculously cool. What this means is that we avoid the annoying compounding issues that ems can give us (a &lt;code&gt;small&lt;/code&gt; in a smaller-than-body-copy promo springs to mind) but we can also keep their feature of scalability; we can alter the (font-)size of an entire document based on a parent rather than having to redeclare each individual elements' font-size over and over. It really is the best of both worlds.&lt;/p&gt;

&lt;p&gt;Take &lt;a href=&quot;http://jsfiddle.net/csswizardry/6CEjX/&quot;&gt;this example&lt;/a&gt;. Try changing the &lt;code&gt;html&lt;/code&gt;'s font-size to 2em, does the page scale up as a whole? Nope. &lt;a href=&quot;http://jsfiddle.net/csswizardry/6CEjX/1/&quot;&gt;Try this one&lt;/a&gt;. See how just changing the &lt;code&gt;html&lt;/code&gt; element's font-size will make your entire page act accordingly. This is something that pixels can't give us...&lt;/p&gt;

&lt;p&gt;Interestingly, &lt;a href=&quot;https://github.com/csswizardry/hry.rbrts.me/blob/master/css/style.css#LC152&quot;&gt;I also set &lt;code&gt;margin-bottom&lt;/code&gt; in rems&lt;/a&gt; so as to always maintain a consistent vertical rhythm around my &lt;a href=&quot;http://coding.smashingmagazine.com/2011/03/14/technical-web-typography-guidelines-and-techniques/#tt-magic-number&quot;&gt;magic number&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Using pixels&lt;/h2&gt;

&lt;p&gt;I've said before today that the pixel's day is numbered in the web design world. Most of my work involves ems, rems, percentages or nothing at all. The only time I ever really use pixels is if I have a known and fixed dimension to work to; nearly all the time this is images and icons.&lt;/p&gt;

&lt;p&gt;Most pixel based measurements pertain to laying out fixed-size images like avatars or sprited elements who require fixed-size background images applying to them. Nearly everything else is best suited to proportional sizing with ems or to non-sizing with just being left fully fluid.&lt;/p&gt;

&lt;p&gt;There really isn't much work left for the old pixel in 2011.&lt;/p&gt;

&lt;h2&gt;An example&lt;/h2&gt;

&lt;p&gt;A fairly decent pre-existing example of the techniques discussed would be my &lt;a href=&quot;http://hry.rbrts.me/&quot;&gt;hry.rbrts.me&lt;/a&gt; hub-site.&lt;/p&gt;

&lt;p&gt;If you open that page and fire up your inspector you should see that:&lt;/p&gt;

&lt;p&gt;Percentages&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The `body` and `article`s all have their structure set in percentages.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The social icons _component_ is free of dimensions, it's fully fluid and will always occupy its parent, wherever you put it.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ems&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The indentations of `ul`s, `ol`s and `dd`s are all set in ems so that they will scale with the lists' font-size. The gaps between sections are also set in ems so that if the font-size ever increases, so will the space around sections of text.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Line-heights&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;These are all set unitlessly (except the tagline which needs to line up with the logo).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rems&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Type styles are all set in rems to allow us scaling with control.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pixels&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Only the social media icons and the logo, which are fixed in size before we even start thinking about CSS, are set in pixels.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you'd prefer, you can poke through the nicely formatted and commented CSS &lt;a href=&quot;https://github.com/csswizardry/hry.rbrts.me/blob/master/css/style.css&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Key points&lt;/h2&gt;

&lt;p&gt;The key things to take away from this article are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Set structure in percentages.&lt;/strong&gt; This includes content areas, sidebars etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Set type in rems&lt;/strong&gt; with a pixel fallback for older browsers. This gives us a great amount of control with added scalability.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Set type-&lt;em&gt;related&lt;/em&gt; items in ems&lt;/strong&gt; so that paddings et al scale with the font-size.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Set line-heights in relative units.&lt;/strong&gt; Or, even better, with no units at all.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don't set measurements on components at all.&lt;/strong&gt; They should remain fully fluid and 'just work' wherever you drop them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So there are a few tips and guidelines on sizing UIs and designs in 2011. We have a whole host of brilliant methods at our disposal and we can just cherry-pick them whatever they're best suited to.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Create a notched current-state nav</title>
   <link href="http://inuitcss.com/2011/11/create-a-notched-current-state-nav"/>
   <updated>2011-11-08T20:00:57+00:00</updated>
   <id>http://inuitcss.com/2011/11/create-a-notched-current-state-nav</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://twitter.com/ilmv&quot;&gt;Ben Everard&lt;/a&gt; &lt;a href=&quot;https://twitter.com/ilmv/status/133640383568678912&quot;&gt;tweeted last night&lt;/a&gt; asking if anyone knew how to build a notched nav, like &lt;a href=&quot;http://cl.ly/1h1S3E2G3H1X06193r08&quot;&gt;this&lt;/a&gt;. I was in bed at the time, I spotted it about midnight and was on my phone. As soon as I saw this I jumped out of my bed and turned my Mac on. I love stuff like this!&lt;/p&gt;

&lt;p&gt;Anyway, &lt;a href=&quot;http://jsfiddle.net/csswizardry/ZDNu7/21/embedded/result/&quot;&gt;this is my solution&lt;/a&gt;, and &lt;a href=&quot;http://jsfiddle.net/csswizardry/ZDNu7/21&quot;&gt;this is its code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically there are two main parts to this technique; the punching-the-hole-through-the-nav and the masking-the-hole-to-be-a-triangle. Both techniques couldn't be simpler, and we use pseudo elements to do it.&lt;/p&gt;

&lt;h2&gt;Punching holes through elements&lt;/h2&gt;

&lt;p&gt;This whole technique can only work by taking advantage of the behaviours of fixed background images. The exact same &lt;code&gt;background:;&lt;/code&gt; applied to two elements give an odd result if both are also fixed. It gives the effect of a hole having been &lt;a href=&quot;http://jsfiddle.net/csswizardry/7BXUf/show/&quot;&gt;punched right through your page to the background...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What we do here, then, is create a pseudo element with &lt;code&gt;.nav .current a:before&lt;/code&gt; and sit this at the bottom of the current list item. We then apply the fixed background to this &lt;em&gt;as well as&lt;/em&gt; the page. This is our punched hole already sorted, &lt;a href=&quot;http://jsfiddle.net/csswizardry/ZDNu7/27/&quot;&gt;only it's square...&lt;/a&gt; we want a triangle.&lt;/p&gt;

&lt;h2&gt;Masking the hole&lt;/h2&gt;

&lt;p&gt;To mask the hole to appear like a triangle we use another pseudo element and the CSS triangle hack to cover things up.&lt;/p&gt;

&lt;p&gt;The triangle hack works by selectively applying borders to zero width/height elements, take a look at &lt;a href=&quot;http://jsfiddle.net/csswizardry/ZDNu7/28/&quot;&gt;this version with the triangles highlighted&lt;/a&gt;. All we need to do here is make some of them the same colour as the nav and &lt;a href=&quot;http://jsfiddle.net/csswizardry/ZDNu7/21/&quot;&gt;we're done&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;So, by cleverly using a pseudo element we can spoof a hole through elements and then using a second one we can mask the corners off!&lt;/p&gt;

&lt;p&gt;The full, commented CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.nav{
    overflow:hidden; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* To clear floats */&amp;lt;/span&amp;gt;
    background:#111;
    margin:0;
    padding:0;
    list-style:none;
}
.nav li{
    float:left;
}
.nav a{
    display:block;
    padding:2em &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* &amp;lt;-- This is our magic number, this defines how large our notch can be! */&amp;lt;/span&amp;gt; 1em;
    color:#fff;
    text-decoration:none;
}
.nav a:hover{
    text-decoration:underline;
}
.nav .current a{
    position:relative;
    text-decoration:underline;
    cursor:text;
}
.nav .current a:before,
.nav .current a:after{
    content:&quot;&quot;;
    display:block;
    width:2em; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Must match our magic number... */&amp;lt;/span&amp;gt;
    height:2em; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* ...our notch will end up being half this size. We define it in ems to scale it up with the text size. */&amp;lt;/span&amp;gt;
    position:absolute;
    bottom:0;
    left:50%;
    margin-left:-1em; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Half of our magic number. */&amp;lt;/span&amp;gt;
}
body,
.nav .current a:before{
    background:url(http://farm5.static.flickr.com/4102/4876702379_82fe2bd7a8_b.jpg) top left no-repeat fixed; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Apply to the notch and the relevant container (this case, body). */&amp;lt;/span&amp;gt;
}
.nav .current a:after{
    width:0;
    height:0;
    border:1em solid #111; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Half of our magic number and same colours as our nav's background. */&amp;lt;/span&amp;gt;
    border-bottom-color:transparent;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Drawbacks&lt;/h3&gt;

&lt;p&gt;There are drawbacks here; you &lt;em&gt;have&lt;/em&gt; to have a fixed background image and you have to have a solid background colour for your nav, but they are reasonable trade-offs, considering this doesn't use any extra markup at all &lt;em&gt;and&lt;/em&gt; works in IE8+!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Build-along #1, reflection and reasoning</title>
   <link href="http://inuitcss.com/2011/11/build-along-1-reflection-and-reasoning"/>
   <updated>2011-11-05T16:03:54+00:00</updated>
   <id>http://inuitcss.com/2011/11/build-along-1-reflection-and-reasoning</id>
   <content type="html">&lt;p&gt;Here are, in no particular order, just a few thoughts about &lt;a href=&quot;http://csswizardry.com/2011/11/css-wizardry-build-along-1/&quot;&gt;the build-along&lt;/a&gt; I did last night. These thoughts cover the thinking and reasoning behind the decisions I made. The build-along was a single, small PSD, but the following should apply to builds of any size. Get into the habit of doing the following on tiny sites and you'll be well equipped to build that next Facebook meets YouTube with a dash of LinkedIn that that prospective client just emailed you about...&lt;/p&gt;

&lt;p&gt;Here is &lt;a href=&quot;http://dl.dropbox.com/u/2629908/build-along/index.html&quot;&gt;the final build&lt;/a&gt; and its code is on &lt;a href=&quot;https://github.com/csswizardry/build-along-1&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;HTML first&lt;/h2&gt;

&lt;p&gt;I built this HTML-first. No CSS other than the UA's &lt;em&gt;whatsoever&lt;/em&gt;. No images, no styles, no JS, no classes, no containers, nothing. I started with pure text-level and content semantics. No &lt;code&gt;div&lt;/code&gt;s, no &lt;code&gt;span&lt;/code&gt;s, nothing that would in any way aid styling. Nail your pure, raw HTML first before even &lt;em&gt;thinking&lt;/em&gt; about CSS. This ensures you're thinking fully about the most important aspect of any site; its content.&lt;/p&gt;

&lt;h2&gt;No IDs&lt;/h2&gt;

&lt;p&gt;The build uses no IDs for styling. This was quite an odd shift for me to make, and I made it &lt;a href=&quot;http://csswizardry.com/2011/09/when-using-ids-can-be-a-pain-in-the-class/&quot;&gt;a number of weeks back&lt;/a&gt;. The main drawback of using IDs is that they introduce a specificity wild card not unlike using &lt;code&gt;!important&lt;/code&gt; (though obviously not as horrible). By not using them it means that I can't really get tripped up by overly specific selectors as easily as I could if I &lt;em&gt;was&lt;/em&gt; using IDs. I've not removed the chance completely, but really easily and quickly lessened it.&lt;/p&gt;

&lt;h2&gt;'Ugly' classes to do lots of heavy lifting&lt;/h2&gt;

&lt;p&gt;There are quite a few classes that some might deem ugly; the media and grid classes instantly spring to mind. The thing here is that &lt;strong&gt;classes aren't semantic or insemantic&lt;/strong&gt;, they're merely sensible or insensible. If a &lt;code&gt;div&lt;/code&gt; is 6 columns wide then a class of &lt;code&gt;.grid-6&lt;/code&gt; is totally sensible, if it needs to change then change it. If you ever redesign you'll be touching the markup anyway; I'm convinced the pure CSS redesign (in a commercial world) is a myth.&lt;/p&gt;

&lt;p&gt;These classes also bring performance benefits, once a class gets called once it becomes free to use again; a performance freebie. If you use &lt;code&gt;grid-6&lt;/code&gt; once on a page, every subsequent usage is totally free, from a performance point of view.&lt;/p&gt;

&lt;h2&gt;Portable sprite icons&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.s&lt;/code&gt; class is a theoretically horrible class, but as we outlined above, nothing (except micro-formats and similar) reads or even cares what you name your classes. &lt;a href=&quot;http://jsfiddle.net/csswizardry/YdhEU/&quot;&gt;You can name a class anything you wish and a browser has to honour it&lt;/a&gt;, just pick wisely!&lt;/p&gt;

&lt;p&gt;So, the &lt;code&gt;.s&lt;/code&gt; class is one good example. Whenever you want to use an icon background image you ideally want to sprite it, but in fluid elements this isn't possible. Enter a &lt;em&gt;spriting element&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is just an empty element that gets the sprite applied to it in its own fixed width/height box.&lt;/p&gt;

&lt;p&gt;Chris Coyier uses &lt;a href=&quot;http://css-tricks.com/13224-pseudo-spriting/&quot;&gt;pseudo elements for this&lt;/a&gt; which is great as it's really clean, but the major drawback for me here is that they're not very portable. A pseudo element is tied explicitly to an element in the CSS, so you can't just drop the icon wherever you wish. Using an empty element means you &lt;em&gt;can&lt;/em&gt; drop an icon wherever you wish. It's six-of-one and half-a-dozen of the other; cleanliness versus portability; pick which one you'd rather have.&lt;/p&gt;

&lt;p&gt;I can imagine that 75% reading this still think it's a horrible, but we need to remember that an empty element affects &lt;em&gt;nothing&lt;/em&gt;. It's empty so it has no content, if it has no content then screen readers don't encounter anything in it.&lt;/p&gt;

&lt;p&gt;You're probably also thinking that it's heavily presentational, but there's really no difference between:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;i class=&quot;s star&quot;&amp;gt;&amp;lt;/i&amp;gt;
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;img src=star.png alt=&quot;&quot;&amp;gt;
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first is just out-and-out better in that it allows you to sprite that image up!&lt;/p&gt;

&lt;p&gt;I was asked why an &lt;code&gt;i&lt;/code&gt; and not a &lt;code&gt;span&lt;/code&gt;. I'm almost ashamed of the answer but it's purely because &lt;code&gt;i&lt;/code&gt; is shorter, it's as simple as that. I know that a &lt;code&gt;span&lt;/code&gt; is probably better suited as it's devoid of semantics but as there's no content in the &lt;code&gt;i&lt;/code&gt; nothing is affected by semantics anyway. Feel free to use whatever element you prefer though, like I said, my reasoning is kind of shameful!&lt;/p&gt;

&lt;h2&gt;Mobile first, lay the foundations&lt;/h2&gt;

&lt;p&gt;I did this build mobile first, sort out the content, the type, the general &lt;em&gt;feel&lt;/em&gt; of the site first, then used &lt;code&gt;min-width&lt;/code&gt; media queries to build &lt;strong&gt;up&lt;/strong&gt; the desktop version.&lt;/p&gt;

&lt;p&gt;Incidentally I don't use &lt;a href=&quot;https://github.com/scottjehl/Respond&quot;&gt;respond.js&lt;/a&gt; or similar to get media queries working in IE et al, they get the mobile version. The layout of the site is not that important because &lt;strong&gt;a PSD is a clue, not a contract&lt;/strong&gt;. A PSD tells you how a site should generally appear; the type, the colours, any brand treatments, that kind of stuff.&lt;/p&gt;

&lt;p&gt;If you spend enough time on the mobile version that should be good enough to serve as the baseline, anything on top is a bonus for browsers that support media queries.&lt;/p&gt;

&lt;h2&gt;Grid systems just make life easier&lt;/h2&gt;

&lt;p&gt;In a similar vein to the above, grid systems are typically frowned upon as being insemantic, but the joy is that, as we covered, classes are neither semantic or in semantic. Plus--even better than that--a &lt;code&gt;div&lt;/code&gt; is devoid of any semantics, it's a generic container element. Adding these to your markup comes free-of-charge. Using a grid system allows developers to quickly construct consistent, robust and efficient layouts in seconds.&lt;/p&gt;

&lt;h2&gt;'Extraneous' divs actually make builds far more robust and extensible&lt;/h2&gt;

&lt;p&gt;You should &lt;em&gt;never&lt;/em&gt; add markup where avoidable, but that doesn't mean you should avoid it at all costs. Sometimes adding an extra &lt;code&gt;div&lt;/code&gt; will make components a lot less brittle, rather than relying on unpredictable style rules and overly slim markup, sometimes it's just far better to add another &lt;code&gt;div&lt;/code&gt; to ensure a more robust build.&lt;/p&gt;

&lt;p&gt;Take for example &lt;a href=&quot;http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/&quot;&gt;the media object&lt;/a&gt;. You could probably build that construct using far less HTML, but then would it be as extensible? You could just assume there will only ever be an &lt;code&gt;img&lt;/code&gt; floated left with a &lt;code&gt;p&lt;/code&gt; to the right of it, but if you do that and a client asks for a list with that &lt;code&gt;p&lt;/code&gt; and a caption under the &lt;code&gt;img&lt;/code&gt; you're in a bit of a pickle; if you just start out with a &lt;code&gt;div&lt;/code&gt; on each side to start with then you have the ability to build whatever the client throws at you, and it will always be predictable.&lt;/p&gt;

&lt;p&gt;So, add extra markup where it saves you headaches. I'm more impressed by powerful and extensible code than I am with lean and brittle solutions, and I can guarantee which the client will prefer...&lt;/p&gt;

&lt;h2&gt;Don't measure stuff&lt;/h2&gt;

&lt;p&gt;Throughout this build I only measured one thing; the grid system. I honestly think that, in web design, the pixel's days are numbered. Build everything without a care as to its dimensions. Everything in the build can be moved around and dropped anywhere else without you needing to worry if it'll fit. All your components should always be fully fluid and only constrained by their parent, in this case the grid system.&lt;/p&gt;

&lt;p&gt;Here's a challenge, next time your designer sends you a PSD designed on, say, the &lt;a href=&quot;http://960.gs&quot;&gt;960GS&lt;/a&gt;, resize your browser to 800px wide and build it like that. That'll really put your fluid, responsive skills to the test!&lt;/p&gt;

&lt;h2&gt;Be resourceful&lt;/h2&gt;

&lt;p&gt;During this build I copied and pasted &lt;em&gt;loads&lt;/em&gt; of code. I used &lt;a href=&quot;https://github.com/csswizardry/vanilla&quot;&gt;my vanilla boilerplate&lt;/a&gt;, I copied and pasted &lt;a href=&quot;http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/&quot;&gt;the media object&lt;/a&gt;, &lt;a href=&quot;csswizardry.com/2011/09/the-nav-abstraction/&quot;&gt;the nav abstraction&lt;/a&gt;, &lt;a href=&quot;csswizardry.com/2011/10/fully-fluid-responsive-css-carousel/&quot;&gt;the carousel&lt;/a&gt;. If it already exists somewhere then reuse it! There are no prizes for writing more lines of code; be resourceful.&lt;/p&gt;

&lt;h2&gt;Take away?&lt;/h2&gt;

&lt;p&gt;Even on tiny sites, powerful markup is far more quick, robust, extensible and sensible than convoluted, brittle stuff. No one reads your classes except other developers. Users appreciate fast UIs, clients appreciate stable and robust sites and you, the developer, like to save time, be efficient and only solve problems once.&lt;/p&gt;

&lt;p&gt;What may at first seem like an ugly class or bloated markup is actually a really quick, predictable and reusable construct.&lt;/p&gt;

&lt;p&gt;Websites make us money, so let's make them as quickly as possible and in the most predictable, future proof way we can.&lt;/p&gt;

&lt;h2&gt;Finally&lt;/h2&gt;

&lt;p&gt;There is a video of the build to go with this, but I need your opinions, do you want the full, several hour epic or do you want it sped up to, say, double speed? I'm going to get that processed as soon as possible.&lt;/p&gt;

&lt;h2&gt;Update&lt;/h2&gt;

&lt;p&gt;As promised, I recorded the whole thing warts and all. You might be interested to know a few things non-code related about the build-along.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The whole lot was done on an 11″ MacBook Air with no external mouse or keyboard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My good friend Jake, who is wanting to learn a little about web development, was next to me the whole time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I cooked and ate my (now famous (in tiny, tiny circles)) chili during the build-along.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Refreshment was courtesy of &lt;a href=&quot;http://twitpic.com/78e9yd&quot;&gt;Matusalem and Fentimans&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The songs you saw on my Spotify are not necessarily wholly representative of my taste in music ;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The normal, non-sped-up recording is now on YouTube. &lt;a href=&quot;http://www.youtube.com/watch?v=dH-KgnepMUw&amp;amp;hd=1&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com/watch?v=9NToqlCJzfQ&amp;amp;hd=1&quot;&gt;Part 2&lt;/a&gt;. The sped-up version is proving a little more troublesome; crunching over 4 hours of video on an 11″ Air is taking a while...&lt;/p&gt;

&lt;h3&gt;Sped-up video&lt;/h3&gt;

&lt;p&gt;To view the faster video right away, simply opt in to &lt;a href=&quot;http://www.youtube.com/html5&quot;&gt;YouTube's HTML5 Trial&lt;/a&gt;, open the YouTube URLs above in Chrome and then select the playback speed options that now appear on the player.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS Wizardry build-along #1</title>
   <link href="http://inuitcss.com/2011/11/css-wizardry-build-along-1"/>
   <updated>2011-11-03T19:59:14+00:00</updated>
   <id>http://inuitcss.com/2011/11/css-wizardry-build-along-1</id>
   <content type="html">&lt;p&gt;Okay, so here we are, about to kick off the build-along. Make sure you are &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;following me on Twitter&lt;/a&gt; at around &lt;a href=&quot;https://www.google.com/search?q=Time+in+the+UK&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;aq=t&amp;amp;rls=org.mozilla:en-US:official&amp;amp;client=firefox-a#pq=time+in+the+uk&amp;amp;hl=en&amp;amp;sugexp=kjrmc&amp;amp;cp=8&amp;amp;gs_id=b&amp;amp;xhr=t&amp;amp;q=Time+in+UK&amp;amp;tok=y6_ahb4u2yl-RL_lp8cxLw&amp;amp;pf=p&amp;amp;sclient=psy-ab&amp;amp;safe=off&amp;amp;client=firefox-a&amp;amp;hs=Q63&amp;amp;rls=org.mozilla:en-US%3Aofficial&amp;amp;source=hp&amp;amp;pbx=1&amp;amp;oq=Time+in++UK&amp;amp;aq=0&amp;amp;aqi=g2g-c1g1&amp;amp;aql=f&amp;amp;gs_sm=&amp;amp;gs_upl=&amp;amp;bav=on.2,or.r_gc.r_pw.r_cp.,cf.osb&amp;amp;fp=282a81e04a27f8a1&amp;amp;biw=1024&amp;amp;bih=583&quot;&gt;&lt;strong&gt;7pm UK time on the 4 November&lt;/strong&gt;&lt;/a&gt; as I'm hoping to start the build-along around then. Thanks to &lt;a href=&quot;http://www.leviflair.com/&quot;&gt;Levi Flair&lt;/a&gt; for this PSD:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://csswizardry.com/wp-content/uploads/2011/11/hnpw_home.jpg&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2011/11/hnpw_home-626x1023.jpg&quot; alt=&quot;Build-along PSD screenshot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to everyone who sent a design in! I feel bad that I can't do them all because the quality was really high. Sorry if I didn't pick you, a lot more went into the decision than &lt;em&gt;just&lt;/em&gt; looks; I needed to consider time-frames, aesthetics, complexity and suitability to the build-along format.&lt;/p&gt;

&lt;h2&gt;Follow along&lt;/h2&gt;

&lt;p&gt;Live code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You can watch the actual build take shape by [periodically refreshing this page](http://dl.dropbox.com/u/2629908/build-along/index.html).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Video&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I'm actually going to be recording my screen throughout the whole thing, code, Spotify, Twitter, you'll see it all. I'll be putting this online a few days after (I won't be doing a live screen-cast).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GitHub&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I'm going to commit build milestones to [a GitHub repo](https://github.com/csswizardry/build-along-1) periodically so you can see each major step of the build as it happens.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Twitter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Follow me](http://twitter.com/csswizardry) and keep an eye on [the #buildAlong hashtag](https://twitter.com/search/%23buildAlong) (please also use this for anything you Tweet about the event).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Feel free to Tweet at me whilst I'm working. This should be fun!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sam Penrose Design—process and write-up</title>
   <link href="http://inuitcss.com/2011/11/sam-penrose-design-process-and-write-up"/>
   <updated>2011-11-02T22:22:08+00:00</updated>
   <id>http://inuitcss.com/2011/11/sam-penrose-design-process-and-write-up</id>
   <content type="html">&lt;p&gt;Last weekend, one of my best friends &lt;a href=&quot;http://twitter.com/sam_penrose&quot;&gt;Sam&lt;/a&gt; and I had a hack-weekend. One weekend of non-stop design and build. It was a pretty brutal affair considering we were only making a tiny portfolio site; a weekend of 4am nights, junk food, beer and dangerous amounts of Red Bull.&lt;/p&gt;

&lt;p&gt;I've just about recovered now, and here is the result: &lt;a href=&quot;http://sampenrose.co.uk/&quot;&gt;Sam Penrose Design--Creative designer and graffiti artist based in Leeds, UK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sampenrose.co.uk&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2011/11/sampenrose.co_.uk_.jpg&quot; alt=&quot;Screenshot of the Sam Penrose Design website&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was a really cool build for me, Sam was a great 'client' in that he instantly 'got' progressive enhancement, he was totally cool with the fact that differences between browsers may be quite obvious (and glaring). He was fine with his idea of a design ending up being more like three designs, when different browsers are accounted for.&lt;/p&gt;

&lt;p&gt;Buzzword time! This build was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Heavily&lt;/em&gt; progressively enhanced&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Content-out&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mobile first&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Responsive&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Designed in browser&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I'll touch on each of these in a little more detail.&lt;/p&gt;

&lt;h2&gt;Progressive enhancement&lt;/h2&gt;

&lt;p&gt;Basic really; this site uses loads of gradients, round corners, shadows, all that stuff. None of it works in IE_x_ but that's cool. Sites don't have to look the same in every browser (and we took that to a bit of an extreme where media queries are concerned).&lt;/p&gt;

&lt;p&gt;It uses my &lt;a href=&quot;csswizardry.com/2011/10/fully-fluid-responsive-css-carousel/&quot;&gt;fluid carousel&lt;/a&gt; which doesn't even behave like a carousel in IE, it acts as more of a promo. This is fine, though, as we were careful to only put non-essential content in here. Got a good browser? You get a pure CSS carousel. Got an older one? You get what looks like a nice, fluid promo panel.&lt;/p&gt;

&lt;p&gt;In case you're interested here is a screenshot of IE8:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://csswizardry.com/wp-content/uploads/2011/11/untitled.JPG&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2011/11/untitled.JPG&quot; alt=&quot;Sam Penrose Design in IE8&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Content-out&lt;/h2&gt;

&lt;p&gt;We started off with just the content; I built pure markup to start, with no CSS whatsoever. We got the content into the page and then Sam decided how he'd like to design around that. It worked a treat and kept everything really really clean.&lt;/p&gt;

&lt;h2&gt;Mobile first&lt;/h2&gt;

&lt;p&gt;With the content in place, we looked to build the site mobile first. This was really simple, but we spent most of the time on it. We simply created a fluid, single column design. We spent ages working on the mobile, most stripped back version to ensure that it was a perfect base. We wanted to make sure that anything on top of the mobile version would be taking the site &lt;a href=&quot;http://www.youtube.com/watch?v=EbVKWCpNFhY&quot;&gt;up to 11&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Investing so much time on the mobile version was really fun and really sensible, it made the next bit a breeze.&lt;/p&gt;

&lt;h2&gt;Responsive&lt;/h2&gt;

&lt;p&gt;Naturally, the site is responsive. The interesting thing is, though, that we've not bothered getting media queries to work in IE. The beauty of having spent so much time on the mobile version is that it's not just an &lt;em&gt;okay&lt;/em&gt; state to serve IE, it's actually a really nice one! The site is all fluid and built with &lt;code&gt;min-width&lt;/code&gt; media queries to size the site up from mobile as opposed to down from desktop.&lt;/p&gt;

&lt;h2&gt;Designed in the browser&lt;/h2&gt;

&lt;p&gt;Other than to process some portfolio images and create the dotted background image, Photoshop wasn't used once. We built the whole site in the browser. The interesting thing about our process though was that Sam doesn't code, but nor was he Photoshopping.&lt;/p&gt;

&lt;p&gt;As he was learning the theory of exciting techniques in 2011 web design, he was applying them just as fast in order to art direct the design and build. He switched on to the idea of progressive enhancement and mobile first instantly so he didn't struggle to adapt to a new way of thinking. He called the shots, saw how designing in the browser allowed us to test, iterate, drop and ultimately refine and create his ideas. Such a lean and neat process. He didn't get precious about things, he didn't beat a dead horse, he suggested, we tried, we reworked, we settled on the most pragmatic options.&lt;/p&gt;

&lt;p&gt;So yeah, quite a fun and productive hack-weekend, if a little tiring.&lt;/p&gt;

&lt;p&gt;Sam, by the way, is a newly freelance designer, so if you need any stuff doing you know where to find him. He's also on Twitter at &lt;a href=&quot;http://twitter.com/sam_penrose&quot;&gt;@sam_penrose&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fully fluid, responsive CSS carousel</title>
   <link href="http://inuitcss.com/2011/10/fully-fluid-responsive-css-carousel"/>
   <updated>2011-10-31T22:46:10+00:00</updated>
   <id>http://inuitcss.com/2011/10/fully-fluid-responsive-css-carousel</id>
   <content type="html">&lt;p&gt;If you &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;follow me on Twitter&lt;/a&gt; you'll know I've been pretty enthused about this &lt;a href=&quot;http://dl.dropbox.com/u/2629908/sandbox/fluid-css-carousel/index.html&quot;&gt;fluid CSS carousel&lt;/a&gt; of mine. There are two aspects to it; the fluidity and the CSS functionality.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://dl.dropbox.com/u/2629908/sandbox/fluid-css-carousel/index.html&quot;&gt;Demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The demo features photos of me, taken on various mountains by &lt;a href=&quot;http://twitter.com/suzehaworth&quot;&gt;Suze&lt;/a&gt;. Cheers to her for the content.&lt;/p&gt;

&lt;h2&gt;The fluidity&lt;/h2&gt;

&lt;p&gt;Making a carousel fluid is actually ridiculously simple. Let us assume you have five panels. Remember that number!&lt;/p&gt;

&lt;p&gt;A carousel is made up of three basic components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A viewport&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A wrapper for the panes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A pane&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Thus, our markup is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div class=carousel&amp;gt;

  &amp;lt;ul class=panes&amp;gt;

    &amp;lt;li&amp;gt;
      &amp;lt;h2&amp;gt;Pane 01 title&amp;lt;/h2&amp;gt;
      &amp;lt;img src=pane-01.jpg alt=&quot;&quot;&amp;gt;
    &amp;lt;/li&amp;gt;

    &amp;lt;li&amp;gt;
      &amp;lt;h2&amp;gt;Pane 02 title&amp;lt;/h2&amp;gt;
      &amp;lt;img src=pane-02.jpg alt=&quot;&quot;&amp;gt;
    &amp;lt;/li&amp;gt;

    &amp;lt;li&amp;gt;
      &amp;lt;h2&amp;gt;Pane 03 title&amp;lt;/h2&amp;gt;
      &amp;lt;img src=pane-03.jpg alt=&quot;&quot;&amp;gt;
    &amp;lt;/li&amp;gt;

    &amp;lt;li&amp;gt;
      &amp;lt;h2&amp;gt;Pane 04 title&amp;lt;/h2&amp;gt;
      &amp;lt;img src=pane-04.jpg alt=&quot;&quot;&amp;gt;
    &amp;lt;/li&amp;gt;

    &amp;lt;li&amp;gt;
      &amp;lt;h2&amp;gt;Pane 05 title&amp;lt;/h2&amp;gt;
      &amp;lt;img src=pane-05.jpg alt=&quot;&quot;&amp;gt;
    &amp;lt;/li&amp;gt;

  &amp;lt;/ul&amp;gt;

&amp;lt;/div&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the viewport defines what we see, we slide our panes behind it and they poke through, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2011/10/carousel-anatomy.jpg&quot; alt=&quot;Anatomy of a carousel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The red denotes the viewport (and incidentally a single pane), the blue denotes the whole five panes &lt;em&gt;behind&lt;/em&gt; the viewport.&lt;/p&gt;

&lt;p&gt;We just slide these behind the viewport to show a certain amount at a time, et voilà; carousel. But, you all know how carousels work, right...?&lt;/p&gt;

&lt;p&gt;To make this fluid is so simple. The viewport needs to fill its container, so this gets &lt;code&gt;width:100%;&lt;/code&gt;. Easy.&lt;/p&gt;

&lt;p&gt;One pane needs to fit nicely in the viewport, so this needs to occupy 100% of the viewport. With this in mind...&lt;/p&gt;

&lt;p&gt;We have five panes, remember, so the &lt;code&gt;ul&lt;/code&gt; needs a width of 500%. Five panes that are each the same width as the viewport gives us a width of &lt;strong&gt;500%&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now we know:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.carousel{
  width:100%;
}
.panes{
  width:500%;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if &lt;code&gt;.panes&lt;/code&gt; holds five panes, each pane should be 20% its width. This is where it might get a little confusing...&lt;/p&gt;

&lt;p&gt;The viewport is 100% width, the wrapper is five times as big as that and each pane is one fifth the width of the wrapper.&lt;/p&gt;

&lt;p&gt;Our code is left at:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    $CAROUSEL
\*------------------------------------*/&amp;lt;/span&amp;gt;
.carousel{
    overflow:hidden;
    &amp;lt;mark&amp;gt;width:100%;&amp;lt;/mark&amp;gt;
}
.panes{
    list-style:none;
    position:relative;
    &amp;lt;mark&amp;gt;width:500%;&amp;lt;/mark&amp;gt; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Number of panes * 100% */&amp;lt;/span&amp;gt;
    overflow:hidden; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* This is used solely to clear floats, it does not add functionality. */&amp;lt;/span&amp;gt;

    -moz-animation:carousel 30s infinite;
    -webkit-animation:carousel 30s infinite;
    animation:carousel 30s infinite;
}
.panes &amp;gt; li{
    position:relative;
    float:left;
    &amp;lt;mark&amp;gt;width:20%;&amp;lt;/mark&amp;gt; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* 100 / number of panes */&amp;lt;/span&amp;gt;
}
.carousel img{
    display:block;
    width:100%;
    max-width:100%;
}
.carousel h2{
    font-size:1em;
    padding:0.5em;
    position:absolute;
    right:10px;
    bottom:10px;
    left:10px;
    text-align:right;
    color:#fff;
    background-color:rgba(0,0,0,0.75);
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The basic equation for making a carousel with any number of panes is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.carousel{
  width:100%;
}
.panes{
  width:&amp;lt;mark&amp;gt;100 * number of panes&amp;lt;/mark&amp;gt;%;
}
.panes &amp;gt; li{
  width:&amp;lt;mark&amp;gt;100 / number of panes&amp;lt;/mark&amp;gt;%;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, a four-pane carousel would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.carousel{
  width:100%;
}
.panes{
  width:&amp;lt;mark&amp;gt;400&amp;lt;/mark&amp;gt;%;
}
.panes &amp;gt; li{
  width:&amp;lt;mark&amp;gt;25&amp;lt;/mark&amp;gt;%;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It really is that simple. That's all there is to making a fluid carousel.&lt;/p&gt;

&lt;h2&gt;CSS powered&lt;/h2&gt;

&lt;p&gt;Okay, in this carousel I decided I was going to power it with CSS. This is super unorthodox so if you're yelling WTF at your screen please read on!&lt;/p&gt;

&lt;p&gt;It was going to be (and actually is) used on my good friend &lt;a href=&quot;http://sampenrose.co.uk/&quot;&gt;Sam Penrose's new design portfolio&lt;/a&gt;, so knowing we had free reign and a little chance to experiment I decided to opt for a pure CSS solution.&lt;/p&gt;

&lt;p&gt;This is simple in theory but the maths gets &lt;em&gt;so&lt;/em&gt; tricky.&lt;/p&gt;

&lt;p&gt;All we do is animate &lt;code&gt;.panels&lt;/code&gt; from right to left then back again. We animate for a bit, we pause, we animate again, pause again and so on until it's done. Then we loop it infinitely.&lt;/p&gt;

&lt;p&gt;The CSS is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;@keyframes carousel{
    0%    { left:0; }
    11%   { left:0; }
    12.5% { left:-100%; }
    23.5% { left:-100%; }
    25%   { left:-200%; }
    36%   { left:-200%; }
    37.5% { left:-300%; }
    48.5% { left:-300%; }
    50%   { left:-400%; }
    61%   { left:-400%; }
    62.5% { left:-300%; }
    73.5% { left:-300%; }
    75%   { left:-200%; }
    86%   { left:-200%; }
    87.5% { left:-100%; }
    98.5% { left:-100%; }
    100%  { left:0; }
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The numbers are so tricky to work with and if anyone can come up with a decent equation to describe it I would be so happy. I've got &lt;a href=&quot;http://twitter.com/makeusabrew&quot;&gt;Nick&lt;/a&gt; on the job, but I've not worked it out yet; I can't quite grasp the relation between five panes and the numbers above in a way that I could do some quick maths to work out the animations for a four-pane carousel.&lt;/p&gt;

&lt;p&gt;The problem is that you have to know how many full moves and pauses are needed for a full iteration of the carousel (before it starts on its infinite loop), and then how to evenly space these numbers between 0 and 100%. My animations last for 1.5% and pause for 11%, these numbers are perfect for adding up to 100%.&lt;/p&gt;

&lt;h2&gt;Update&lt;/h2&gt;

&lt;p&gt;Massive thanks to Clay who's worked out that the number of steps is 4n-3 and that the total time between start of one animation and the next is 100 / 2(n-1) (where n is the number of panes). See &lt;a href=&quot;http://csswizardry.com/2011/10/fully-fluid-responsive-css-carousel/#comment-95396&quot;&gt;his full comment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, the code above will sort you out a perfect animation for a five panes so feel free to nab it! I'll update if and when I crack some maths!&lt;/p&gt;

&lt;h3&gt;Wait, CSS?!&lt;/h3&gt;

&lt;p&gt;Using CSS for this is really, really unorthodox so comes with some massive caveats.&lt;/p&gt;

&lt;p&gt;Do not use CSS to animate this carousel if:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You require the contents of every pane to be visually accessible to the user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You require full browser support.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You do not require interactions (like stopping the animation or clicking between panes).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If you are going to use this CSS-only method then ensure that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The user can still use the site fully without the contents of the panes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You are okay with older browsers not animating and just displaying the first pane.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You do not want or require users to be able to interact with the carousel.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If you can't use CSS then combine the fluidity above with plain ol' trusty JS.&lt;/p&gt;

&lt;p&gt;I will happily say that the fluidity is the most important, useful and impressive thing about this technique. Until I, or anyone, can get you a decent equation to substitute your numbers into, the CSS animations are too cumbersome and restrictive to be of large-scale use to most people.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The CSS Wizardry build-along is go!</title>
   <link href="http://inuitcss.com/2011/10/the-css-wizardry-build-along-is-go"/>
   <updated>2011-10-27T17:22:22+01:00</updated>
   <id>http://inuitcss.com/2011/10/the-css-wizardry-build-along-is-go</id>
   <content type="html">&lt;p&gt;Okay, so you decided it wouldn't be boring and that I'm not big-headed in thinking that people might actually want to watch me coding, so I'm quite excited to announce that &lt;a href=&quot;http://csswizardry.com/2011/10/build-along-testing-the-water/&quot;&gt;the build-along&lt;/a&gt; will be going ahead!&lt;/p&gt;

&lt;p&gt;Entry is now closed. Thanks all who sent in a PSD, watch this space for a launch article.&lt;/p&gt;

&lt;p&gt;Obviously there need to be some terms and conditions. Apologies if these seem a little harsh(ly worded) but they are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PSDs only.&lt;/strong&gt; Sorry, I don't work with Fireworks enough to make me quick enough for this type of exercise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The PSD I choose is my choice. I am only doing one and it'll most likely be one that's fun but not mountains of work; I need to be able to do it in a night.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CSS and HTML only.&lt;/strong&gt; No Javascript as I don't know Javascript; you would not want me even attempting it!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The code I provide will be &lt;em&gt;final&lt;/em&gt;. Progressive enhancement will be used, it won't look the same in every browser, you won't get to make any change requests or ask for bug fixes after the fact. Naturally I'm going to do a good job, you won't end up with any messy code, but as this is entirely free I can't take instruction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you're, for whatever reason, unhappy with the outcome I'm afraid you're stuck with it... Whether the final page goes into production or not is entirely up to you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The PSD must be all above board; I won't be building you a new adult dating site ;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This one is entirely your responsibility but I strongly advise you are fully transparent if your PSD will be sold on to a client. I have no qualms with you making a profit on my work but make sure your client is cool with it, especially when their site design will be being made totally public.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I'm keen to keep this as informal as possible, but the format will take:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you want me to build your PSD please email a &lt;strong&gt;full-size JPG&lt;/strong&gt; of your design by &lt;strong&gt;Wednesday 2 November 2011&lt;/strong&gt; to harry at csswizardry dot com &lt;strong&gt;with the subject line &lt;em&gt;Build-along&lt;/em&gt;&lt;/strong&gt;. This subject line is vital as I'm going to set up a Gmail rule to group stuff. Any non-conforming emails might get overlooked.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I'll look at the JPGs and choose one to build. I'll announce the person I choose in a blog post and also email them directly, at which point they reply with their actual PSD file. If your PSD didn't get chosen then I will not email you I'm afraid; that'd take forever!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The PSD must be properly constructed. I don't want to be battling with any &lt;em&gt;Layer 12 Copy 4 v2&lt;/em&gt; stuff!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure you provide any font-files or Typekit etc information if your design uses them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I'm most likely going to be building the PSD on &lt;strong&gt;Friday 4 November 2011&lt;/strong&gt;. The reason for this is that if it keeps me up into the early hours then I'd rather that was on a weekend rather than a work-night. This does mean that if you want to follow along then you'll have to be in on a Friday evening, no pub!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I'll announce the URL in a blog post and Twitter, you can follow along live.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The code &lt;em&gt;will&lt;/em&gt; be getting committed to GitHub, too, so make sure you're okay with that!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This all seems a bit formal, I realise, but it really won't be. I just need to make sure I have all the stuff in the right place at the right time!&lt;/p&gt;

&lt;p&gt;Pop any questions in the comments and I'll update the post as necessary. Please hashtag &lt;em&gt;any and all&lt;/em&gt; tweets about the event with &lt;strong&gt;#buildAlong&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, in summary:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Get a nice, neat, tidy PSD together.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Send me a &lt;strong&gt;JPG&lt;/strong&gt; of it as per the exact email rules.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I'll announce whose PSD I'll be building in a blog post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be around at about 7pm UTC (Dublin, Edinburgh, Lisbon, London) on Friday 4th November to watch along as I code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will get a HTML/CSS single page template emailed back to you once it's done.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Right, get emailing me!&lt;/p&gt;

&lt;h2&gt;Update&lt;/h2&gt;

&lt;p&gt;While there are loads of you interested in watching this event, no one has sent in a PSD. Not one! Mention this to friends, your boss, your designer, anyone. Without a PSD the build-along can't run :(&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Build-along (testing the water)</title>
   <link href="http://inuitcss.com/2011/10/build-along-testing-the-water"/>
   <updated>2011-10-25T18:47:50+01:00</updated>
   <id>http://inuitcss.com/2011/10/build-along-testing-the-water</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; The build along &lt;a href=&quot;http://csswizardry.com/2011/11/build-along-1-reflection-and-reasoning/&quot;&gt;went ahead&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I've been toying around with this idea the last few weeks. I've decided to do a quick &lt;em&gt;testing-the-water&lt;/em&gt; blog post to gauge interest and see whether anyone else would be into the idea. The story goes thus...&lt;/p&gt;

&lt;p&gt;A few weeks ago I was building a page for my good friend and awesome chap &lt;a href=&quot;http://twitter.com/makeusabrew&quot;&gt;Nick Payne&lt;/a&gt;--the page had been designed by another swell fella, &lt;a href=&quot;http://twitter.com/anatomic&quot;&gt;Ian Thomas&lt;/a&gt;. We're all pretty good friends and all excel in different areas, Ian designed Nick's site and, &lt;a href=&quot;http://csswizardry.com/2011/09/do-designers-need-to-code/&quot;&gt;as designers &lt;em&gt;don't&lt;/em&gt; need to code&lt;/a&gt;, I built it. Nick sorted all the back-end and is building it onto &lt;a href=&quot;http://jaoss.org&quot;&gt;JAOSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; Ian can and does actually code, but for this project we all wanted a slice of the action so, in this case, he didn't...&lt;/p&gt;

&lt;p&gt;Anyway, I always build static HTML files in my &lt;a href=&quot;http://db.tt/9mQuY9k&quot;&gt;Dropbox&lt;/a&gt; &lt;em&gt;public&lt;/em&gt; directory as people can have a quick look at it if I need to share it, plus I can test it on a variety of browsers on different devices. I gave Nick the URL early on and told him I was about to get to work...&lt;/p&gt;

&lt;p&gt;An hour or so later I got a text from Nick saying that he was loving seeing the progress with every refresh, which I also thought was pretty cool.&lt;/p&gt;

&lt;p&gt;Enter my idea... a live build-along!&lt;/p&gt;

&lt;p&gt;The idea I'm toying with is that people (it could be pretty much anyone) get in touch (somehow) with PSDs they need building; a PSD that they were going to get their staff in their agency to do, or that they were going to give out to a freelancer, anything, and I will pick one and build it for free on the provision I can build it in my public directory and that people can watch along as I code away.&lt;/p&gt;

&lt;p&gt;There are obviously some massive requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;People would actually want to watch me code a page up; I feel I may be being terribly big-headed in assuming people might actually want to watch me code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The PSD is all above board, doesn't break any NDAs etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whoever gets 'picked' doesn't mind their work being made wholly public from the outset.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The outcomes would be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Someone gets a free template (one page) built.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People who wouldn't die of boredom get to follow along as I build a page (I seriously think the idea of seeing how someone tackles a build would be really cool, it'd be like watching TV and yelling along: 'Clear your floats!!!')&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So basically:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;People submit PSDs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I choose one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I pick an evening to build it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I share the URL on Twitter and in a blog post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People can keep the tab open and keep dipping in-and-out as I build, watching the progress.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For people not in the right time-zone I could potentially record the screen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I finish and hand back a fully coded single-page.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Naturally there would be some informal terms and conditions that I'd iron out nearer the time but for now, anyone interested?&lt;/p&gt;

&lt;p&gt;Lemme know!
&lt;em&gt;Harry&lt;/em&gt;
  &lt;em&gt;[NDA]: Non-Disclosure Agreement
  &lt;/em&gt;[JAOSS]: Just Another Open Source System&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Reset restarted</title>
   <link href="http://inuitcss.com/2011/10/reset-restarted"/>
   <updated>2011-10-18T20:17:39+01:00</updated>
   <id>http://inuitcss.com/2011/10/reset-restarted</id>
   <content type="html">&lt;p&gt;Everyone knows the trusty CSS reset; that oh-so-useful tool that saves us many a headache. We love it so much in fact that we tend to use it on every project--but therein lies the problem…&lt;/p&gt;

&lt;p&gt;When I discovered the CSS reset I almost cried with joy; the sheer amount of headaches, bug fixes--and thus time--it saved me was astounding. I vowed from that day on that I'd always use it, wherever I go. I've now realised that was a little silly…&lt;/p&gt;

&lt;p&gt;I've realised that each time I blindly copy paste my reset, I do so without thinking, I've never really stopped to think about what's in it, or what it all does.&lt;/p&gt;

&lt;p&gt;Some time ago I removed the frankly ridiculous lists rest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;ul,ol{ list-style:none; }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have no idea how this ever got into a reset. I mean sure, it resets it--and Meyer does tell you to use the reset with care--but to remove the bullets from lists is more than a little daft if you ask me. Lists without bullets are the exception rather than the rule, so remove them &lt;em&gt;only&lt;/em&gt; when you don't want them, otherwise you end up with code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;ul,ol{ list-style:none; }

.nav li{
    display:inline
}

.plain-old-regular-list{
    list-style:disc outside;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whereas this is actually way more sensible:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.nav{
    list-style:none;
}
.nav li{
    display:inline
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anyway, that aside, I've recently realised that my reset was getting stupid, and it's embarrassing to admit that I had stylesheets like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* RESET */&amp;lt;/span&amp;gt;
h1,h2,h3,h4,h5,h6{
  font-weight:normal;
}
em,strong{
  font-style:normal;
  font-weight:normal;
}

...

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* TYPE */&amp;lt;/span&amp;gt;
h1,h2,h3,h4,h5,h6{
  font-weight:bold;
}
em{
  font-style:italic;
}
strong{
  font-weight:bold;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know, face palm, right?&lt;/p&gt;

&lt;p&gt;So I started to slowly slim my reset down to some sensible defaults and I removed things that I found myself constantly overwriting or deleting and finally, tonight, I skimmed over the HTML spec's text level elements and I restarted my reset using sensible default styles based on the elements' semantics.&lt;/p&gt;

&lt;p&gt;The reset is below, but &lt;strong&gt;do not treat this one as the final version!&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    RESET
\*------------------------------------*/
/*
A more considered reset; more of a restart...
*/&amp;lt;/span&amp;gt;
html,body,div,span,applet,object,iframe,
h1,h2,h3,h4,h5,h6,p,blockquote,pre,hr,
a,abbr,address,cite,code,
del,dfn,em,img,ins,kbd,q,s,samp,
small,strong,sub,sup,tt,var,
b,u,i,
dl,dt,dd,ol,ul,li,
fieldset,form,label,legend,
table,caption,tbody,tfoot,thead,tr,th,td,
article,aside,canvas,details,figcaption,figure,
footer,header,hgroup,menu,nav,section,summary,
time,mark,audio,video{
    margin:0;
    padding:0;
}
article,aside,details,figcaption,figure,footer,
header,hgroup,menu,nav,section{
    display:block;
}
h1,h2,h3,h4,h5,h6{
    font-size:100%;
}
table{
    border-collapse:collapse;
    border-spacing:0;
}
strong,b,mark{
    font-weight:bold;
    font-style:inherit;
}
em,i,cite,q,address,dfn,var{
    font-style:italic;
    font-weight:inherit;
}
abbr[title],dfn[title]{
    cursor:help;
    border-bottom:1px dotted;
}
ins{
    border-bottom:1px solid;
}
a,u,ins{
    text-decoration:none;
}
del,s{
    text-decoration:line-through;
}
pre,code,samp,kbd{
    font-family:monospace;
}
small{
    font-size:0.75em;
}
img{
    border:none;
    font-style:italic;
}
input,
select,
textarea{
    font:inherit;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find the always-up-to-date reset in &lt;a href=&quot;https://github.com/csswizardry/vanilla&quot;&gt;vanilla on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Things I've removed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Deprecated elements like &lt;code&gt;big&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;acronym&lt;/code&gt; etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Aforementioned lists reset.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removal of borders from fieldsets (this needs defining on a per-design basis).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Font weights and styles have been redefined rather than removed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed the underlines from the redefined &lt;code&gt;u&lt;/code&gt; element as well as from the &lt;code&gt;a&lt;/code&gt; by default as per my article &lt;a href=&quot;http://csswizardry.com/2011/05/on-negative-hovers/&quot;&gt;On negative hovers&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Things I've added:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Default stylings for text-level elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Default styles for several new and/or redefined HTML5 elements (e.g. &lt;code&gt;mark&lt;/code&gt; and &lt;code&gt;u&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://csswizardry.com/2011/06/styling-alt-text-on-images/&quot;&gt;Text styles on images&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make form elements inherit type properly.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Even if you don't choose to use my reset (though it'd be great if you did) the one thing I urge you to take from this article is &lt;strong&gt;think about your reset&lt;/strong&gt;. If you find yourself constantly overwriting rules from it then you ought to remove them. And remember; your reset can change per-build! You don't always have to use the same one, just alter it where necessary for each design.&lt;/p&gt;

&lt;p&gt;For example, let's say that most of the time you opt to not have bordered &lt;code&gt;fieldset&lt;/code&gt;s; if this is the case then it is safe to keep that section in your reset. But if, for whatever reason, a design &lt;em&gt;does&lt;/em&gt; include them then simply &lt;em&gt;remove&lt;/em&gt; that part. This makes far more sense than styling a &lt;code&gt;fieldset&lt;/code&gt; twice; once in your reset to remove a border and once in your CSS to reapply it.&lt;/p&gt;

&lt;p&gt;Reconsider your reset; the one I've authored is a pretty comprehensive one that will remove all quirky bits and pieces and leave you with nice--rather than stark--defaults. If you opt not to adopt mine then give your own some loving. &lt;strong&gt;Restart your reset!&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The ‘island’ object</title>
   <link href="http://inuitcss.com/2011/10/the-island-object"/>
   <updated>2011-10-16T13:03:43+01:00</updated>
   <id>http://inuitcss.com/2011/10/the-island-object</id>
   <content type="html">&lt;p&gt;One thing I've been doing a lot of lately, since starting at &lt;a href=&quot;http://bskyb.com&quot;&gt;Sky&lt;/a&gt;, is writing abstractions. &lt;a href=&quot;http://www.oocss.org&quot;&gt;OOCSS&lt;/a&gt; is nothing new, but its basic premise is that you can build really simple objects using a base class and then extend that object with more classes to add more styling to make a simple construct progressively more complex and specific.&lt;/p&gt;

&lt;p&gt;One abstraction I love is by &lt;a href=&quot;https://twitter.com/stubbornella&quot;&gt;Nicole Sullivan&lt;/a&gt; (one of the best front-end devs in the world ever); the &lt;a href=&quot;http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/&quot;&gt;media object&lt;/a&gt;. Another I wrote is the more simple &lt;a href=&quot;http://csswizardry.com/2011/09/the-nav-abstraction/&quot;&gt;nav abstraction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today I'm going to share one that's simpler still; the &lt;em&gt;island object&lt;/em&gt;...&lt;/p&gt;

&lt;p&gt;This super simple object is basically a single class used to box off content, leaving it closed on all sides like, well, an island.&lt;/p&gt;

&lt;p&gt;Often you'd find yourself with markup and CSS a little like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div class=content&amp;gt;

  &amp;lt;div class=promo&amp;gt;
      ...
  &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;div class=sub-content&amp;gt;

  &amp;lt;div class=twitter&amp;gt;
    ...
  &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;

.content{
  width:460px;
  float:left;
  padding:20px;
  margin-bottom:20px;
  background-color:#fff;
}
.sub-content{
  width:160px;
  float:left;
  padding:20px;
  margin-bottom:20px;
  background-color:#333;
  color:#fff;
}
.promo{
  padding:20px;
  margin-bottom:20px;
  border:1px solid #ff8;
  background-color:#ffc;
  color:#333;
}
.twitter{
  padding:20px;
  margin-bottom:20px;
  color:#fff;
  background-color:#00a0d1;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we see that these are all standalone blocks of boxed off content, but they all share certain things in common. These are essentially all islands of content that are individually adapted to look different.&lt;/p&gt;

&lt;p&gt;Instead of repeating these declarations over and over we can make an abstraction to create padded, boxed off areas.&lt;/p&gt;

&lt;p&gt;Now, we could use &lt;code&gt;.box&lt;/code&gt; as a class but this implies square; we could have a redesign where we use rounded corners or even wacky, wavy background images which, although &lt;em&gt;are&lt;/em&gt; boxed off, aren't presentationally boxes. We don't like presentational classes if we can help it.&lt;/p&gt;

&lt;p&gt;Enter the &lt;code&gt;.island&lt;/code&gt; class. Now our markup and CSS would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div class=&quot;island content&quot;&amp;gt;

  &amp;lt;div class=&quot;island promo&quot;&amp;gt;
      ...
  &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;div class=&quot;island sub-content&quot;&amp;gt;

  &amp;lt;div class=&quot;island twitter&quot;&amp;gt;
    ...
  &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;

.island{
  padding:20px;
  margin-bottom:20px;
}
  .island &amp;gt; :last-child{
    margin-bottom:0; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Remove the margin from the last child of a boxed off area so that we don't end up with compounded margin/padding spacings. */&amp;lt;/span&amp;gt;
  }

.content{
  width:460px;
  float:left;
  background-color:#fff;
}
.sub-content{
  width:160px;
  float:left;
  background-color:#333;
  color:#fff;
}
.promo{
  border:1px solid #ff8;
  background-color:#ffc;
  color:#333;
}
.twitter{
  color:#fff;
  background-color:#00a0d1;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does make the HTML a tad larger, but the &lt;code&gt;.island&lt;/code&gt; class is a powerful one that can quickly and rapidly create new areas of content without having to redeclare styles over and over.&lt;/p&gt;

&lt;p&gt;Extending the island object with more specific styles means that you can have components that look vastly different but that are built upon the same basic construct. This also means that if you decide you design needs a little more white-space you can up the &lt;code&gt;.island&lt;/code&gt; padding to, say, 24px in one go and all content blocks will inherit this new style.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The 'nav' abstraction</title>
   <link href="http://inuitcss.com/2011/09/the-nav-abstraction"/>
   <updated>2011-09-22T17:04:19+01:00</updated>
   <id>http://inuitcss.com/2011/09/the-nav-abstraction</id>
   <content type="html">&lt;p&gt;This post comes in a similar vein to &lt;a href=&quot;http://twitter.com/stubbornella&quot;&gt;Nicole Sullivan&lt;/a&gt;'s genius &lt;a href=&quot;http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/&quot;&gt;The media object saves hundreds of lines of code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An abstraction is basically removing a pattern from a specific idea and making a more generic idea out of it. That is to say, rather than writing the same similar patterns over and over, create a single more generic representation of those patterns and reuse that instead.&lt;/p&gt;

&lt;p&gt;Nicole does this with her media block by taking a series of similarly constructed but different components and sharing their common aspects in a more generic way. This is a really sensible and useful abstraction whereby she can make a pretty much infinite amount of pretty different blocks of content using only the same handful of lines of CSS each time. Genius!&lt;/p&gt;

&lt;p&gt;Her media block abstraction is a pretty common one, and one I've used myself. Today I'm going to share another abstraction that may well be even more common and hopefully just as handy; &lt;em&gt;the nav abstraction&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I'm sure you've had loads of projects where you've had a horizontal nav, and also maybe a breadcrumb trail and possibly a list of logos that go in a banner-style list...?&lt;/p&gt;

&lt;p&gt;If this is the case then I also imagine you might have written something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#nav{
  list-style:none;
  margin-left:0;
}
#nav li{
  display:inline;
}
#nav a{
  ...
  [styles]
  ...
}

.breadcrumb{
  list-style:none;
  margin-left:0;
}
.breadcrumb li{
  display:inline;
}
.breadcrumb a{
  ...
  [styles]
  ...
}

.sponsors{
  list-style:none;
  margin-left:0;
}
.sponsors li{
  display:inline;
}
.sponsors a{
  ...
  [styles]
  ...
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we can see that, although we're building three different things, we're reusing quite a few repeated patterns to create similar &lt;em&gt;looking&lt;/em&gt; things. We need an abstraction.&lt;/p&gt;

&lt;h2&gt;The nav abstraction&lt;/h2&gt;

&lt;p&gt;Now, I'm not sure whether &lt;em&gt;nav&lt;/em&gt; is actually the best word to use; these three examples are all types of navigational constructs, but that's more coincidence than anything else. As such I encourage you to please offer up your alternative recommendations in the comments, please!&lt;/p&gt;

&lt;p&gt;What we need to do now is take out the shared patterns and create a fourth class of &lt;code&gt;.nav&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.nav{
  list-style:none;
  margin-left:0;
}
.nav li{
  display:inline;
}
.nav a{
  display:inline-block;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we define our abstraction. We take the repeated bits and make the most granular construct we can. This will throw any list into a very basic/crude horizontal series of links which we can then extend to adopt more specific styles, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.nav{
  list-style:none;
  margin-left:0;
}
.nav li{
  display:inline;
}
.nav a{
  display:inline-block;
}

.site-nav{
  width:100%;
  background:#eee;
}
.site-nav a{
  padding:5px 10px;
}

.breadcrumb li:before{
    content:&quot;» &quot;
}
.breadcrumb li:first-child:before{
    content:normal;
}

.sponsors{
  text-align:center;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a base abstraction and then extending it we can create our breadcrumb with this HTML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;ol class=&quot;nav breadcrumb&quot;&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/about/&quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/about/us/&quot;&amp;gt;About us&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Writing abstractions gives smaller CSS, removes unnecessary repetitions and makes simple elements of your design much more reusable. Nice!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ordered and numbered lists; the differences</title>
   <link href="http://inuitcss.com/2011/09/ordered-and-numbered-lists-the-differences"/>
   <updated>2011-09-17T16:40:36+01:00</updated>
   <id>http://inuitcss.com/2011/09/ordered-and-numbered-lists-the-differences</id>
   <content type="html">&lt;p&gt;This is a really small blog post about ordered lists and numbered lists and their subtle differences.&lt;/p&gt;

&lt;p&gt;Have you ever wanted to say something like 'There are three things to look out for:' and then follow with a numbered list with the three things in?&lt;/p&gt;

&lt;p&gt;I'm pretty sure we all have, and that we'd all normally use an &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; to get the numbers, right? That's how you get numbers next to list items after all...&lt;/p&gt;

&lt;p&gt;Well the problem here is that the numbering defines an amount, not an order. The order is &lt;em&gt;usually&lt;/em&gt; irrelevant in this scenario.&lt;/p&gt;

&lt;p&gt;To make more sense I've drawn up &lt;a href=&quot;http://jsfiddle.net/csswizardry/sdrth/&quot;&gt;a small fiddle of examples&lt;/a&gt; and the reasoning in each.&lt;/p&gt;

&lt;p&gt;Here we can see that, although we want numbers, we don't always want order.&lt;/p&gt;

&lt;p&gt;The trick I've started employing is is to have a &lt;code&gt;.numbered&lt;/code&gt; class which I can apply to a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; to make it mimic the appearance of an ordered list, without semantically carrying the ordered weight. This is how I do it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;ul,
ol{
  margin-bottom:1.5em;
}
li ul,
li ol{
  margin-bottom:0;
}
ul{
  list-style:square outside;
}
ol,
&amp;lt;mark&amp;gt;.numbered&amp;lt;/mark&amp;gt;{
  list-style:decimal outside;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There. As simple as that. These are pretty much my default list styles now, and all I'm really doing is making an unordered list with a class of &lt;em&gt;numbered&lt;/em&gt; look the same as an &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing efficient CSS selectors</title>
   <link href="http://inuitcss.com/2011/09/writing-efficient-css-selectors"/>
   <updated>2011-09-17T10:58:24+01:00</updated>
   <id>http://inuitcss.com/2011/09/writing-efficient-css-selectors</id>
   <content type="html">&lt;p&gt;Efficient CSS is not a new topic, nor one that I really need to cover, but it's something I'm really interested in and have been keeping an eye on more and more since working at Sky.&lt;/p&gt;

&lt;p&gt;A lot of people forget, or simply don't realise, that CSS can be both performant and non-performant. This can be easily forgiven however when you realise just how little you can, err, realise, non-performant CSS.&lt;/p&gt;

&lt;p&gt;These rules only &lt;em&gt;really&lt;/em&gt; apply to high performance websites where speed is a feature, and 1000s of DOM elements can appear on any given page. But best practice is best practice, and it doesn't matter whether you're building the next Facebook, or a site for the local decorator, it's always good to know…&lt;/p&gt;

&lt;h2&gt;CSS selectors&lt;/h2&gt;

&lt;p&gt;CSS selectors will not be new to most of us, the more basic selectors are type (e.g. &lt;code&gt;div&lt;/code&gt;), ID (e.g. &lt;code&gt;#header&lt;/code&gt;) and class (e.g. &lt;code&gt;.tweet&lt;/code&gt;) respectively.&lt;/p&gt;

&lt;p&gt;More uncommon ones include basic pseudo-classes (e.g. &lt;code&gt;:hover&lt;/code&gt;) and more complex CSS3 and 'regex' selectors, such as &lt;code&gt;:first-child&lt;/code&gt; or &lt;code&gt;[class^=&quot;grid-&quot;]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Selectors have an inherent efficiency, and to quote &lt;a href=&quot;http://stevesouders.com/&quot;&gt;Steve Souders&lt;/a&gt;, the order of more to less efficient CSS selectors goes thus:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ID, e.g. &lt;code&gt;#header&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class, e.g. &lt;code&gt;.promo&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type, e.g. &lt;code&gt;div&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adjacent sibling, e.g. &lt;code&gt;h2 + p&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Child, e.g. &lt;code&gt;li &amp;gt; ul&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Descendant, e.g. &lt;code&gt;ul a&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Universal, i.e. &lt;code&gt;*&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attribute, e.g. &lt;code&gt;[type=&quot;text&quot;]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pseudo-classes/-elements, e.g. &lt;code&gt;a:hover&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Quoted from Even Faster Websites by &lt;a href=&quot;http://stevesouders.com/&quot;&gt;Steve Souders&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is important to note that, although an ID is technically faster and more performant, it is barely so. Using Steve Souders' CSS Test Creator we can see that &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=%23id&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;an ID selector&lt;/a&gt; and &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;a class selector&lt;/a&gt; show very little difference in reflow speed.&lt;/p&gt;

&lt;p&gt;In Firefox 6 on a Windows machine I get an average reflow figure of 10.9 for a simple class selector. An ID selector gave a mean of 12.5, so this actually reflowed slower than a class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The difference in speed between an ID and a class is almost totally irrelevant.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A test selecting on a type (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;), rather than a class or ID, gave &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;a much slower reflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A test on a heavily overqualified descendant selector gave &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=div+div+div+div+div+div+a&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;a figure of around 440&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;From this we can see that the difference between IDs/classes and types/descendants is fairly huge... The difference between themselves is slight.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; These numbers can vary massively between machine and browser. I &lt;em&gt;strongly&lt;/em&gt; encourage you to run/play with your own.&lt;/p&gt;

&lt;h3&gt;Combining selectors&lt;/h3&gt;

&lt;p&gt;You can have standalone selectors such as &lt;code&gt;#nav&lt;/code&gt;, which will select any element with an ID of 'nav', or you can have combined selectors such as &lt;code&gt;#nav a&lt;/code&gt;, which will match any anchors within any element with an ID of 'nav'.&lt;/p&gt;

&lt;p&gt;Now, we read these left-to-right. We see that we're looking out for &lt;code&gt;#nav&lt;/code&gt; and then any &lt;code&gt;a&lt;/code&gt; elements inside there. Browsers read these differently; browsers read &lt;em&gt;right-to-left&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For a quick graphical reason as to why browsers do this then it is the same reason most of you will save time solving this puzzle by starting at the smiley face (the &lt;em&gt;target&lt;/em&gt;) first and working your way back:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2011/09/maze.gif&quot; alt=&quot;Maze as a model of how browsers read CSS selectors right to left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It's route 1, by the way.&lt;/p&gt;

&lt;p&gt;For an in-depth reason as to why they do this see &lt;a href=&quot;http://stackoverflow.com/questions/5797014/css-selectors-parsed-right-to-left-why&quot;&gt;this discussion on Stack Overflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's more efficient for a browser to start at the right-most element (the one it &lt;em&gt;knows&lt;/em&gt; it wants to style) and work its way back &lt;em&gt;up&lt;/em&gt; the DOM tree than it is to start high up the DOM tree and take a journey &lt;em&gt;down&lt;/em&gt; that might not even end up at the right-most selector--also known as the &lt;em&gt;key&lt;/em&gt; selector.&lt;/p&gt;

&lt;p&gt;This has a very significant impact on the performance of CSS selectors...&lt;/p&gt;

&lt;h2&gt;The &lt;em&gt;key&lt;/em&gt; selector&lt;/h2&gt;

&lt;p&gt;The key selector, as discussed, is the right-most part of a larger CSS selector. This is what the browser looks for first.&lt;/p&gt;

&lt;p&gt;Remember back up there we discussed which types of selector are the most performant? Well whichever one of those is the key selector will affect the selector's performance; when writing efficient CSS it is this key selector that holds the, well, key, to performant matching.&lt;/p&gt;

&lt;p&gt;A key selector like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#content &amp;lt;mark&amp;gt;.intro&amp;lt;/mark&amp;gt;{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Is probably quite performant as classes are an inherently performant selector. The browser will look for all instances of &lt;code&gt;.intro&lt;/code&gt; (of which there aren't likely to be many) and then go looking up the DOM tree to see if the matched key selector lives in an element with an ID of 'content'.&lt;/p&gt;

&lt;p&gt;However, the following selector is not very performant at all:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#content &amp;lt;mark&amp;gt;*&amp;lt;/mark&amp;gt;{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this does is looks at &lt;em&gt;every single&lt;/em&gt; element on the page (that's &lt;em&gt;every&lt;/em&gt; single one) and then looks to see if any of those live in the &lt;code&gt;#content&lt;/code&gt; parent. This is a very un-performant selector as the key selector is a very expensive one.&lt;/p&gt;

&lt;p&gt;Using this knowledge we can make better decisions as to our classing and selecting of elements.&lt;/p&gt;

&lt;p&gt;Let's say you have a massive page, it's enormous and you're a big, big site. On that page are hundreds or even thousands of &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;s. There is also a small section of social media links in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; with an ID &lt;code&gt;#social&lt;/code&gt;; let's say there is a Twitter, a Facebook, a Dribbble and a Google+ link. We have four social media links on this page and hundreds of other anchors besides.&lt;/p&gt;

&lt;p&gt;This selector therefore is unreasonably expensive and not very performant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#social a{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What will happen here is the browser will assess all the thousands of links on that page before settling on the four inside of the &lt;code&gt;#social&lt;/code&gt; section. Our key selector matches far too many other elements that we aren't interested in.&lt;/p&gt;

&lt;p&gt;To remedy this we can add a more specific and explicit selector of &lt;code&gt;.social-link&lt;/code&gt; to each of the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;s in the social area. But this goes against what we know; we know not to put unnecessary classes on elements when we can use (c)leaner markup.&lt;/p&gt;

&lt;p&gt;This is why I find performance so interesting; it's a weird balance between web standards best practices and sheer speed.&lt;/p&gt;

&lt;p&gt;Whereas we would normally have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;ul id=&quot;social&quot;&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; class=&quot;twitter&quot;&amp;gt;Twitter&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; class=&quot;facebook&quot;&amp;gt;Facebook&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; class=&quot;dribble&quot;&amp;gt;Dribbble&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; class=&quot;gplus&quot;&amp;gt;Google+&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with this CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#social a{}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We'd now have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;ul id=&quot;social&quot;&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; class=&quot;social-link twitter&quot;&amp;gt;Twitter&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; class=&quot;social-link facebook&quot;&amp;gt;Facebook&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; class=&quot;social-link dribble&quot;&amp;gt;Dribbble&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; class=&quot;social-link gplus&quot;&amp;gt;Google+&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with this CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#social .social-link{}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This new key selector will match far fewer elements and means that the browser can find them and style them faster and can move on to the next thing.&lt;/p&gt;

&lt;p&gt;And, we can actually get this selector down further to &lt;code&gt;.social-link{}&lt;/code&gt; by not overqualifying it; read on to the next section for that...&lt;/p&gt;

&lt;p&gt;So, to recap, your key selector is the one which determines just how much work the browser will have to do, so &lt;strong&gt;this is the one to keep an eye on&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Overqualifying selectors&lt;/h2&gt;

&lt;p&gt;Okay so now we know what a key selector is, and that that is where most of the work comes from, we can look to optimise further. The best thing about having nice explicit key selectors is that you can often avoid overqualifying selectors. An overqualified selector might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;html body .wrapper #content a{}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is just too much going on here, and at least three of these selectors are totally unnecessary. That could, at the very most, be this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#content a{}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what?&lt;/p&gt;

&lt;p&gt;Well the first one means that the browser has to look for all &lt;code&gt;a&lt;/code&gt; elements, then check that they're in an element with an ID of 'content', then so on and so on right the way up to the &lt;code&gt;html&lt;/code&gt;. This is causing the browser way too many checks that we really don't need. Knowing this, we can get more realistic examples like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;ul#nav li a{}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Down to just:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#nav a{}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We know that if the &lt;code&gt;a&lt;/code&gt; is inside an &lt;code&gt;li&lt;/code&gt; it &lt;em&gt;has&lt;/em&gt; to be inside the &lt;code&gt;#nav&lt;/code&gt; so we can instantly drop the &lt;code&gt;li&lt;/code&gt; from selector. Then, as the nav has an ID we know that only one exists in the page, so the element it is applied to is wholly irrelevant; we can also drop the &lt;code&gt;ul&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Overqualified selectors make the browser work harder than it needs to and uses up its time; make your selectors leaner and more performant by cutting the unnecessary bits out.&lt;/p&gt;

&lt;h2&gt;Is all this really necessary?&lt;/h2&gt;

&lt;p&gt;The short answer is; &lt;em&gt;probably not&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The longer answer is; &lt;em&gt;it depends on the site you're building&lt;/em&gt;. If you're working on your next portfolio then go for clean code over CSS selector performance, because you really aren't likely to notice it.&lt;/p&gt;

&lt;p&gt;If you're building the next Amazon, where microseconds in page speeds &lt;em&gt;do&lt;/em&gt; make a difference then maybe, but even then maybe not.&lt;/p&gt;

&lt;p&gt;Browsers will only ever get better at CSS parsing speeds, even mobile ones. You are very unlikely to ever notice slow CSS selectors on a websites &lt;strong&gt;but&lt;/strong&gt;…&lt;/p&gt;

&lt;h3&gt;But&lt;/h3&gt;

&lt;p&gt;It is still happening, browsers still are having to do all the work we've talked about, no matter how quick they get. Even if you don't need or even want to implement any of this it is something that is definitely worth knowing. Bear in mind that selectors can be expensive and that you should avoid the more glaring ones where possible. That means if you find yourself writing something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;div:nth-of-type(3) ul:last-child li:nth-of-type(odd) *{ font-weight:bold }
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you're probably doing it wrong.&lt;/p&gt;

&lt;p&gt;Now, I'm still kind of new to the world of selector efficiency myself so if I've missed anything, or you have anything to add, please pop it in the comments!&lt;/p&gt;

&lt;h3&gt;More on CSS selector efficiency&lt;/h3&gt;

&lt;p&gt;I cannot recommend the website and books of &lt;a href=&quot;http://stevesouders.com/&quot;&gt;Steve Souders&lt;/a&gt; enough. That's pretty much all the &lt;em&gt;further reading&lt;/em&gt; recommendation you'll need. The guy knows his stuff!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Do designers need to code?</title>
   <link href="http://inuitcss.com/2011/09/do-designers-need-to-code"/>
   <updated>2011-09-13T19:23:28+01:00</updated>
   <id>http://inuitcss.com/2011/09/do-designers-need-to-code</id>
   <content type="html">&lt;p&gt;I fear I may be poking the hornet's nest with this one, but here goes. My &lt;em&gt;personal&lt;/em&gt; opinion on &lt;em&gt;that&lt;/em&gt; question...&lt;/p&gt;

&lt;p&gt;Do designers need to code? This has been the question of the moment of late. Though, speaking of late, I may have missed the main period of discussions around the subject. Regardless, here's my take... Disclaimer.&lt;/p&gt;

&lt;h2&gt;Is a web designer really a web designer if they can't code?&lt;/h2&gt;

&lt;p&gt;A lot of the arguments revolve around the (false) fact that 'designers can't understand what they're designing if they can't build it'. This argument suggests that a web designer who can't code is a fake who's just blagging their way if they don't know/understand how to actually build the websites they design...&lt;/p&gt;

&lt;p&gt;This is wrong. By this token I should understand MySQL and programming and Project Managers should understand design theory and programmers should be able to manage clients. There's a reason we have different job titles; people do different jobs.&lt;/p&gt;

&lt;p&gt;A designer who can build websites is a designer-developer, a designer who can't write HTML/CSS is a designer.&lt;/p&gt;

&lt;h2&gt;Designers should work with developers&lt;/h2&gt;

&lt;p&gt;One reason, I think, that people believe that designers should be able to code is that they need to honour their designs, they need to be sure their designs are buildable by being the ones who have the responsibility of building them.&lt;/p&gt;

&lt;p&gt;The problem is not that designs need to be buildable, it's that developers should be permitted to send designs back and make compromises. Designers and developers need to collaborate, not be combined. Designers need to keep pushing the envelope, making tricky and outside-the-box visuals that push the work of the developer forward. The developer needs to be able to work back the other way, show the designer the boundaries that cannot be broken. Designers shouldn't lead developers, developers shouldn't lead designers, there should be a happy middle ground where teams work together, specialising in their respective areas but understanding and appreciating each others'.&lt;/p&gt;

&lt;p&gt;A designer who codes badly is less use to a developer than a designer who can't code at all. Developers need designers, not bug making machines.&lt;/p&gt;

&lt;h3&gt;But the client was shown a PSD that needs to be honoured...&lt;/h3&gt;

&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; this may well be one reason why people believe designers should code; the situation where the client has seen a PSD and thus expectations are set. A developer &lt;em&gt;hasn't&lt;/em&gt; seen the visuals and is all of a sudden expected to build something he's had no input in. For the most part this may &lt;em&gt;not&lt;/em&gt; be the case at all, but it definitely could be...&lt;/p&gt;

&lt;p&gt;The remedy here might be to make sure designers only create things that they can build, achieving this by making sure designers can code.&lt;/p&gt;

&lt;p&gt;This is fixing the wrong problem, the problem here is a lack of communication and a lack of collaboration, not a lack of skills. Designers and developers should work together from the outset, working in the browser to ensure that a) the team is working as, well, a team and b) that a client is never shown a PSD (showing a client a PSD in 2011 is just foolish).&lt;/p&gt;

&lt;p&gt;The recurring theme is collaboration... Designers and developers need to coexist, not be one and the same.&lt;/p&gt;

&lt;h2&gt;HTML and CSS isn't easy...&lt;/h2&gt;

&lt;p&gt;...but it is easy to do badly. I know loads of designers who can make the most stunning visuals but their code is not a strong point. Sure, they can &lt;em&gt;write&lt;/em&gt; HTML and CSS, but it's not where they specialise or excel, in much the same way a lot of developers have no design sense.&lt;/p&gt;

&lt;p&gt;A designer who writes bad code is less use than a designer who can't code at all. Once a designer writes poor code then either a) a decent dev has to come along and spend time bug fixing, or b) poor code becomes a tangled mess off spaghetti CSS and browser hacks.&lt;/p&gt;

&lt;p&gt;Do not undervalue the importance of HTML and CSS, they are easy to do badly, but hard to do excellently. You need excellence in both design and development, so leave each role to its respective person.&lt;/p&gt;

&lt;h2&gt;These rules introduce restrictions&lt;/h2&gt;

&lt;p&gt;If a designer needs to code what he's designed then he'll design to what he can do, not to what &lt;em&gt;can&lt;/em&gt; be done. This is a fundamental mistake to introduce.&lt;/p&gt;

&lt;p&gt;A designer who isn't restricted by a secondary skill set will produce things outside the box, push the envelope and keep innovating. A designer who is limited by their dev knowledge is hemmed in, scared of pushing the boundaries for fear of creating themselves work they cannot complete.&lt;/p&gt;

&lt;p&gt;By forcing one thing you are restricting another, this is not a good thing to bring into your team. What you need to do is keep the contact and collaboration (there it is again) between design and build to ensure that everyone is achieving their full potential.&lt;/p&gt;

&lt;h2&gt;Real life examples&lt;/h2&gt;

&lt;p&gt;I know two people, personally, who both excel in their given fields. One is a fantastic designer who constantly produces unconventional but stunning websites, the other is an incredible front-end and JS developer (among other things). The designer can write code, but it's not his focus, he doesn't write production code because the developer does that.&lt;/p&gt;

&lt;p&gt;They have a dynamic working relationship whereby they collaborate (and again) and consult with each other throughout the whole project. The designs look incredible and they're built very well. This is more valuable than a constrained designer forced into producing buggy, poor code to build designs they're not fully happy with.&lt;/p&gt;

&lt;h2&gt;What do they need to understand?&lt;/h2&gt;

&lt;p&gt;If a designer doesn't understand code then this is fine; they don't need to understand code, they need to understand their medium. Having an understanding of the web is not the same as being able to build it.&lt;/p&gt;

&lt;p&gt;A good designer working with a good developer is a team that is good at making websites.&lt;/p&gt;

&lt;p&gt;Don't dilute someone's skill set by trying to expand it, play to the strengths of your team. Designers who can code do exist, but they don't have to. If you are a designer who can code (and thus a designer-developer) then that's great, if you're a designer who can't code, but work well with developers that can, then great!&lt;/p&gt;

&lt;h2&gt;But there is no right or wrong answer&lt;/h2&gt;

&lt;p&gt;Designers can code, sure, but they didn't ought to be &lt;em&gt;required&lt;/em&gt; to. No one should be saying that a web designer isn't so because he can't code, that's actually pretty rude...&lt;/p&gt;

&lt;p&gt;If you have the budget to hire two people then get yourself a designer and a developer. Your designer doesn't need to be able to code, they just need to work well in a team.&lt;/p&gt;

&lt;p&gt;However, if your budget dictates you can only hire one person then hire someone who is a designer &lt;strong&gt;and&lt;/strong&gt; developer. If you need to hire a designer-developer then make are they're sufficiently good at both. If you can only hire one person then your designer &lt;em&gt;does&lt;/em&gt; need to be able to code.&lt;/p&gt;

&lt;p&gt;Designers do not have to be able to code, no one can make such a sweeping statement. It depends what you need, what you are comfortable with, and what works best for your team.&lt;/p&gt;

&lt;h2&gt;Massive disclaimer&lt;/h2&gt;

&lt;p&gt;When I say designers and developers I'm separating people into two camps; designers (people who &lt;strong&gt;just&lt;/strong&gt; design (people that the industry seem to have a problem with)) and designer-developers (people who design &lt;strong&gt;and&lt;/strong&gt; code (the people the industry expect)).&lt;/p&gt;

&lt;p&gt;I'm not saying designers write bad code, because a designer who can and does write code is a designer-developer. Designers are, by definition, people who don't write code.&lt;/p&gt;

&lt;p&gt;So if you are a designer and you think I'm saying you can't write code when you &lt;strong&gt;can&lt;/strong&gt; then I'm classing you as a designer-developer. If you're a designer who can't code then that's great. Please, no one take any offence, because none is intended.&lt;/p&gt;

&lt;h2&gt;In short&lt;/h2&gt;

&lt;p&gt;Designers shouldn't have to be able to code to be called designers; designers should be able to collaborate and understand the rest of the team and vice versa.&lt;/p&gt;

&lt;p&gt;If you need a designer-developer then yes, &lt;em&gt;your&lt;/em&gt; designer does need to be able to code. If you can afford a designer &lt;em&gt;and&lt;/em&gt; a developer then they don't.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;https://twitter.com/DavidKaneda/status/109293744431443968&quot;&gt;David Kaneda so rightly put it&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Just a thought: Devs don't need to learn design, designers don't need to learn programming — people need to learn how to collaborate.&quot;&lt;/p&gt;&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>When using IDs can be a pain in the class...</title>
   <link href="http://inuitcss.com/2011/09/when-using-ids-can-be-a-pain-in-the-class"/>
   <updated>2011-09-11T18:16:00+01:00</updated>
   <id>http://inuitcss.com/2011/09/when-using-ids-can-be-a-pain-in-the-class</id>
   <content type="html">&lt;p&gt;There have been a few articles flying about lately which tell you never to use IDs in CSS selectors. I always get a little concerned when articles like this command rather than advise, they often neglect to take into account context and necessity. I'm going to try and offer up one &lt;em&gt;decent&lt;/em&gt; reason here as to why IDs &lt;em&gt;might&lt;/em&gt; trip you up unnecessarily (and how you can avoid the pitfalls).&lt;/p&gt;

&lt;p&gt;Since authoring this article I have decided that a blanket ban &lt;em&gt;is&lt;/em&gt; sensible. Save yourself many potential headaches and &lt;strong&gt;never use IDs in your CSS files&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ID selectors are fine, valid and perfect for styling unique parts of pages. They're HTML/CSS basics, you can use one ID per page and style the relevant element with &lt;code&gt;#the-id-you-chose&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;IDs, as well as being non-reusable, carry quite a high specificity, take the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;p id=&quot;intro&quot; class=&quot;excerpt&quot;&amp;gt;Lorem&amp;lt;/p&amp;gt;

#intro{ color:blue; }
.excerpt{ color:green }
p{ color:red; }
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though we define &lt;code&gt;#intro&lt;/code&gt; first--thus expecting it to be overwritten by subsequent matching selectors--it still takes precedence over any other rules. This is the IDs heightened specificity, and this is where you can come unstuck…&lt;/p&gt;

&lt;h2&gt;Reusability&lt;/h2&gt;

&lt;p&gt;One argument against using IDs is that they can't be reused, but to my mind this is a weak argument. The whole point of using an ID is that it's unique; if you want to reuse something you'd use a class. Developers know this, developers aren't stupid so to tell them not to use an ID because it's not reusable is, in my opinion, quite patronising.&lt;/p&gt;

&lt;p&gt;Also, some things just &lt;em&gt;can't&lt;/em&gt; be reused. Some designs would be wholly impossible to have, say, two content areas in. You couldn't reuse that even if you wanted to.&lt;/p&gt;

&lt;h2&gt;Wild card&lt;/h2&gt;

&lt;p&gt;That is &lt;em&gt;wild card&lt;/em&gt; meaning a person or thing whose influence is unpredictable or whose qualities are uncertain and not to be confused with the CSS &lt;em&gt;wildcard&lt;/em&gt; selector (&lt;code&gt;*{}&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;One of the main and, in my opinion, most valid arguments against using IDs is that they can introduce specificity headaches where you want them least, and it can be a total nightmare fighting your way back out.&lt;/p&gt;

&lt;p&gt;Using an ID in a selector instantly adds a specificity wild card (note, not wildcard), and you might not want this effect. It is, in a way, similar to &lt;code&gt;!important&lt;/code&gt;; it is a trump card that will override nigh on all other types of selector. You probably don't always want this.&lt;/p&gt;

&lt;p&gt;The best way to illustrate this is with a specific example.&lt;/p&gt;

&lt;p&gt;Let's imagine you're building a site and one of the requirements is to have a reusable Twitter widget that needs to be placable wherever the client chooses. Let's for example say they want to kick things off with having the widget in the header and also in-page, at the bottom of an article. The Twitter widget's styling must remain consistent.&lt;/p&gt;

&lt;p&gt;So, let's look at some &lt;a href=&quot;http://jsfiddle.net/csswizardry/gTZGq/1/&quot;&gt;example code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here we can see that we have a small specificity problem, the &lt;code&gt;#header a&lt;/code&gt; rule has a lot higher specificity than &lt;code&gt;.tweet a&lt;/code&gt; and therefore the links in the widget adopt the header's (unreadable) colour. Remember that the Twitter widget's styling must always remain the same so this is not ideal whatsoever.&lt;/p&gt;

&lt;p&gt;We can work around this by &lt;a href=&quot;http://jsfiddle.net/csswizardry/gTZGq/2/&quot;&gt;adding a new selector to the &lt;code&gt;.tweet a&lt;/code&gt; rule&lt;/a&gt; Or, even worse, we could add an &lt;code&gt;!important&lt;/code&gt; to the relevant declaration. Shudder...&lt;/p&gt;

&lt;p&gt;Now, you don't need me to tell you that this is far from a nice solution, as soon as that widget gets put in the &lt;code&gt;#footer&lt;/code&gt; we may well have to add yet another selector, which will prove a maintainability nightmare. This is not a very future-proof fix.&lt;/p&gt;

&lt;p&gt;This is where using IDs can be a pain for you, where a specificity trump is introduced.&lt;/p&gt;

&lt;p&gt;A better fix: add a class instead of (or as well as) the ID on that header &lt;code&gt;div&lt;/code&gt;, thus: &lt;a href=&quot;http://jsfiddle.net/csswizardry/gTZGq/3/&quot;&gt;http://jsfiddle.net/csswizardry/gTZGq/3/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That now brings the specificity gap way down to, well, zero. Removing the ID means that you now don't have to fight yourself out of a self-induced specificity war.&lt;/p&gt;

&lt;p&gt;I did mention that you can add a class as well as the ID or remove the ID completely. It depends…&lt;/p&gt;

&lt;h3&gt;Remove IDs completely?&lt;/h3&gt;

&lt;p&gt;We've covered where IDs can trip us up and be but they serve a purpose other than style-hooks; they can be used as &lt;a href=&quot;http://csswizardry.com/2011/06/namespacing-fragment-identifiers/&quot;&gt;fragment identifiers&lt;/a&gt; for marking landmarks in the page.&lt;/p&gt;

&lt;p&gt;I'm sure you've seen 'Skip to navigation' or 'Jump to content' links in pages, and these wouldn't work without our IDs so we need to keep those in as well as adding our new class.&lt;/p&gt;

&lt;p&gt;So, as is the case with most development conundrums, it's &lt;em&gt;all about context&lt;/em&gt;. You know your context better than I, or anyone else does, so don't let anyone else tell you what to do. If you want to keep an ID for completeness or for fragment identifiers then do, it's totally your call.&lt;/p&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;So yeah, IDs aren't evil, they're perfectly valid and a blanket ban on them is stupid. Use your own knowledge and context of the project to use the most suitable and sensible solution.&lt;/p&gt;

&lt;p&gt;Don't stop using IDs, just be aware of where they can cause you headaches and know where to sensibly circumvent them. Anyone telling you not to use them at all is not wrong, but they're definitely not right...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Two titillating table tips</title>
   <link href="http://inuitcss.com/2011/08/two-titillating-table-tips"/>
   <updated>2011-08-24T18:59:46+01:00</updated>
   <id>http://inuitcss.com/2011/08/two-titillating-table-tips</id>
   <content type="html">&lt;p&gt;Yesterday I was taught two awesome little &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tips from two friends, &lt;a href=&quot;http://twitter.com/StephenMelrose&quot;&gt;Steve Melrose&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/BarryCrayon&quot;&gt;Jon 'Barry Crayon' Cotton&lt;/a&gt;. I can't believe I never knew about these two, they're so simple but really cool*&lt;/p&gt;

&lt;p&gt;*The tips are simple, not Steve and Jon.&lt;/p&gt;

&lt;p&gt;The first, which Steve alerted me to, is &lt;code&gt;colspan=&quot;0&quot;&lt;/code&gt; and &lt;code&gt;rowspan=&quot;0&quot;&lt;/code&gt; which basically just makes the cell (&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt;) to which it is applied span all the columns/rows between itself and the end/bottom of the table respectively.&lt;/p&gt;

&lt;p&gt;I tweeted about how cool this was when Jon replied with info about &lt;code&gt;colspan=&quot;100%&quot;&lt;/code&gt;/&lt;code&gt;rowspan=&quot;100%&quot;&lt;/code&gt; which is similar to the above but instead of meaning 'the rest of' it just means 'all of'. This is great if you want a cell to always span the whole width/height of a table but you don't always know how large that table will be.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/csswizardry/GLuj3/embedded/result/&quot;&gt;See my fiddle!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As far as I can tell Firefox is the only browser that supports &lt;code&gt;[col|row]span=&quot;0&quot;&lt;/code&gt; but all browsers seem to support &lt;code&gt;[col|row]span=&quot;100%&quot;&lt;/code&gt;. I've not been able to do any more thorough browser testing but if anyone can feed back that'd be great!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building better grid systems</title>
   <link href="http://inuitcss.com/2011/08/building-better-grid-systems"/>
   <updated>2011-08-23T19:41:31+01:00</updated>
   <id>http://inuitcss.com/2011/08/building-better-grid-systems</id>
   <content type="html">&lt;p&gt;With every grid system that gets released--and there are a lot now--I notice the same issue with nigh on &lt;em&gt;every&lt;/em&gt; one of them; handling the extra margin/gutter on the last &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; This post is about the HTML and CSS that powers grid systems, rather than the columns, construct, system and layout itself.&lt;/p&gt;

&lt;h2&gt;The problem&lt;/h2&gt;

&lt;p&gt;If you have a grid system where each grid module is defined with a class of, say, &lt;code&gt;.grid&lt;/code&gt;, you might have some CSS like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.row{
  width:940px;
  overflow:hidden; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;This is just for brevity. Please use a better clearfix: http://nicolasgallagher.com/micro-clearfix-hack/&amp;lt;/span&amp;gt;
  clear:both;
}
.grid{
  float:left;
  margin-right:20px;
}
...
.col-4{
  width:220px;
}
...&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most important thing to note is that every &lt;code&gt;.grid&lt;/code&gt; has a &lt;code&gt;margin-right&lt;/code&gt; of 20px, so--in a 16 column 940px grid system--4 × &lt;code&gt;.col-4&lt;/code&gt; actually equals 960px (4 × (220px + 20px)). This is 20px (or one margin) &lt;em&gt;bigger&lt;/em&gt; than your wrapper.&lt;/p&gt;

&lt;p&gt;The formula for a complete system is:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;f&lt;/em&gt; = &lt;em&gt;n&lt;/em&gt;(&lt;em&gt;c&lt;/em&gt;) + &lt;em&gt;n&lt;/em&gt;-1(&lt;em&gt;g&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;f&lt;/em&gt; = full row&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;n&lt;/em&gt; = number&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;c&lt;/em&gt; = columns&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;g&lt;/em&gt; = gutters&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Basically, a full row comprises of &lt;em&gt;n&lt;/em&gt; columns and &lt;em&gt;n&lt;/em&gt;-1 gutters; we want one less gutter than we have columns. We need to lose a gutter somehow.&lt;/p&gt;

&lt;h2&gt;The current solution(s)&lt;/h2&gt;

&lt;p&gt;The simplest and most common solution is to use a class of &lt;code&gt;.last&lt;/code&gt; or &lt;code&gt;.end&lt;/code&gt; on the last or end grid column to remove its margin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.end{
  margin:0;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would give us:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div class=&quot;row&quot;&amp;gt;

  &amp;lt;div class=&quot;grid col-4&quot;&amp;gt;
    &amp;lt;p&amp;gt;One box plus one gutter&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&quot;grid col-4&quot;&amp;gt;
    &amp;lt;p&amp;gt;One box plus one gutter&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&quot;grid col-4&quot;&amp;gt;
    &amp;lt;p&amp;gt;One box plus one gutter&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&quot;grid col-4 &amp;lt;mark&amp;gt;end&amp;lt;/mark&amp;gt;&quot;&amp;gt;
    &amp;lt;p&amp;gt;One box only&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This solves the problem, but it means the developer has to remember to add that class every time they construct a row of grids.&lt;/p&gt;

&lt;p&gt;Another problem is that if a programmer needs to dynamically display, say, a series of images in a grid system, they need to do some scripting to say 'if this is the &lt;em&gt;x&lt;/em&gt; column then add a class of &lt;code&gt;.end&lt;/code&gt;'. Not a massive overhead, but an overhead nonetheless.&lt;/p&gt;

&lt;h3&gt;The other current solution&lt;/h3&gt;

&lt;p&gt;Another solution I've seen recently is used on &lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;Twitter's Bootstrap framework&lt;/a&gt; and a few other places. This solution is a little more elegant, but still not very robust.&lt;/p&gt;

&lt;p&gt;It works by removing the &lt;code&gt;margin-right:20px;&lt;/code&gt; from &lt;code&gt;.grid&lt;/code&gt; and applying it as a &lt;code&gt;margin-left&lt;/code&gt; instead. Then--using the dynamic &lt;code&gt;:first-child&lt;/code&gt; pseudo-selector (&lt;code&gt;:first-child&lt;/code&gt; is used as it has better browser support than &lt;code&gt;:last-child&lt;/code&gt;)--you can target the first &lt;code&gt;div&lt;/code&gt; in a row and remove its margin, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.grid:first-child{
  margin:0;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This keeps your markup clean as you don't have to include the special class and also means your devs don't have to take the extra class into consideration, However, this is not without its own problems...&lt;/p&gt;

&lt;p&gt;The smallest problem with using this method is that the &lt;code&gt;:first-child&lt;/code&gt; selector is quite an inefficient one, but selector performance is another post for another time.&lt;/p&gt;

&lt;p&gt;The most significant drawback is that &lt;code&gt;:first-child&lt;/code&gt; only ever matches one grid in the row, meaning you can't have multiple-row grid constructions. Take the following (crude) representations...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tildes (~) and broken bars (¦) denote the &lt;code&gt;.row&lt;/code&gt; &lt;code&gt;div&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hyphens (-) and pipes (|) denote &lt;code&gt;.grid&lt;/code&gt; &lt;code&gt;div&lt;/code&gt;s&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;x&lt;/em&gt; denotes &lt;code&gt;:first-child&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;!&lt;/em&gt; denotes borked&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;code&gt;:first-child&lt;/code&gt; works out fine here as we only have a one-row-deep layout. The first &lt;code&gt;div&lt;/code&gt; is the &lt;em&gt;only&lt;/em&gt; flush-left &lt;code&gt;div&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;+~~~~~~~~~~~~~~~~~~~~~~~~~+
¦ +---+ +---+ +---+ +---+ ¦
¦ | x | |   | |   | |   | ¦
¦ +---+ +---+ +---+ +---+ ¦
+~~~~~~~~~~~~~~~~~~~~~~~~~+&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this following example however, &lt;code&gt;:first-child&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; work as intended as there are two flush-left &lt;code&gt;div&lt;/code&gt;s but only one of them is the first child. This is where this method breaks, and &lt;strong&gt;more-than-one-row-deep layouts are not uncommon&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;+~~~~~~~~~~~~~~~~~~~~~~~~~+
¦ +---+ +---+ +---+ +---+ ¦
¦ | x | |   | |   | |   | ¦
¦ +---+ +---+ +---+ +---+ ¦
¦ +---+ +---+ +---+ +---+ ¦
¦ | ! | | ! | | ! | | ! | ¦
¦ +---+ +---+ +---+ +---+ ¦
+~~~~~~~~~~~~~~~~~~~~~~~~~+&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;code&gt;:first-child&lt;/code&gt; kinda works, but not well enough. The solution...?&lt;/p&gt;

&lt;h2&gt;The solution&lt;/h2&gt;

&lt;p&gt;In short, the solution is to not remove that extra margin, but to hide the effects of it.&lt;/p&gt;

&lt;p&gt;Essentially the real problem is that &lt;strong&gt;the combined width of a full row is one gutter wider than our container&lt;/strong&gt;, right? Well what we need to do is &lt;strong&gt;make our container one gutter wider&lt;/strong&gt; but &lt;strong&gt;disguise the extra width&lt;/strong&gt; by using &lt;strong&gt;a negative margin equal to one gutter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This can be a bit of a headf**k so bear with me. What we need to do is apply the gutter as a &lt;code&gt;margin-left&lt;/code&gt; on the &lt;code&gt;.grid&lt;/code&gt;, as Twitter do, but we're not going to remove any of them. No pseudo-classes, no special classes, nothing. It's gonna stay there.&lt;/p&gt;

&lt;p&gt;We can hide the effects/breakage caused by the extra gutter by giving the container &lt;code&gt;.row&lt;/code&gt; a width of &lt;em&gt;all&lt;/em&gt; the columns and gutters combined and then a negative &lt;code&gt;margin-left&lt;/code&gt; &lt;em&gt;equal to&lt;/em&gt; one gutter to pull everything back across again, soaking up the effects of the &lt;code&gt;margin-left&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our 940px &lt;code&gt;.row&lt;/code&gt; now becomes 960px wide to allow for the fact we are no longer removing the end gutter, then we pull it all back over by 20px to remove the visual effects of that extra width, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.row{
  width:960px;
  margin-left:-20px;
  overflow:hidden;
  clear:both;
}
.grid{
  float:left;
  margin-left:20px;
}
...
.col-4{
  width:220px;
}
...&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way we can have multiple-row constructions and never have to remember the special &lt;code&gt;.end&lt;/code&gt;/&lt;code&gt;.last&lt;/code&gt; classes.&lt;/p&gt;

&lt;p&gt;To see this technique in action head on over to &lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt; and poke about the page's grid system using Firebug or similar. It's most apparent in the list of features...&lt;/p&gt;

&lt;h2&gt;Roll your own...&lt;/h2&gt;

&lt;p&gt;To transfer this technique, you only need to know three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The number of columns in your grid system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The width of one column&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The width of one gutter&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With these, your formula is simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.row{
  width: &amp;lt;mark&amp;gt;(number of columns * width of one column) + (number of columns * width of one gutter)&amp;lt;/mark&amp;gt; px;
  margin-left: -&amp;lt;mark&amp;gt;width of one gutter&amp;lt;/mark&amp;gt; px;
  overflow:hidden;
  clear:both;
}
.grid{
  float:left;
  margin-left: &amp;lt;mark&amp;gt;width of one gutter&amp;lt;/mark&amp;gt; px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let's create one using &lt;strong&gt;12 columns&lt;/strong&gt; that are &lt;strong&gt;50px wide&lt;/strong&gt; with a &lt;strong&gt;gutter of 25px&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.row{
  width:&amp;lt;mark&amp;gt;900px&amp;lt;/mark&amp;gt;;
  margin-left:-&amp;lt;mark&amp;gt;25px&amp;lt;/mark&amp;gt;;
  overflow:hidden;
  clear:both;
}
.grid{
  float:left;
  margin-left:&amp;lt;mark&amp;gt;25px&amp;lt;/mark&amp;gt;;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plugging in our numbers gives us a grid system that doesn't require special classes, is totally flexible (you can move columns without needing to move a class around), and gives you more varied layouts (multiple rows).&lt;/p&gt;

&lt;p&gt;I employ this technique on both &lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt; and &lt;a href=&quot;/fluid-grids/&quot;&gt;Fluid Grids&lt;/a&gt; and it's proved perfect so far. Robust, portable and lean.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Good developers are illusionists</title>
   <link href="http://inuitcss.com/2011/08/good-developers-are-illusionists"/>
   <updated>2011-08-18T12:50:27+01:00</updated>
   <id>http://inuitcss.com/2011/08/good-developers-are-illusionists</id>
   <content type="html">&lt;p&gt;A major part of being a good developer is efficiency. Not just with efficient code, but efficiency in making your life easier, being cleverly lazy, and making code do the hard work for you.&lt;/p&gt;

&lt;p&gt;A good way to be efficient is through illusion. A great example of this is faux columns; overcoming a complex problem with minimal code and a clever illusion. Faux columns is still, today, one of the best little bits of web development illusion which quickly solves a problem that would otherwise take a lot of time and markup. Illusion is efficiency.&lt;/p&gt;

&lt;p&gt;Another practical example of this is something I helped someone out with recently and have actually built myself for use at work. I'm sure we've all seen search forms laid out like this before:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2011/08/incorrect.gif&quot; alt=&quot;Incorrect structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What we have here is a search button laid over the top of our text input. Or do we...?&lt;/p&gt;

&lt;p&gt;If we were to use just &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;input type=&quot;image&quot;&amp;gt;&lt;/code&gt; to achieve this effect here we'd need to use some positioning to move the button over the search field, possibly some &lt;code&gt;z-index&lt;/code&gt;, some big paddings to stop text going underneath the button and, more than likely, a lot of hard-coded numbers, cross-browser issues and headaches.&lt;/p&gt;

&lt;p&gt;Enter the magic of illusion. Here's how I tackled that problem:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2011/08/correct.gif&quot; alt=&quot;Correct structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of trying to make two sibling elements appear as though one contains the others, why not spoof the effect with an element that &lt;em&gt;does&lt;/em&gt; contain it; the &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;If that doesn't make sense, I've made &lt;a href=&quot;http://jsfiddle.net/csswizardry/HdqNN/show/&quot;&gt;a demo of this on jsFiddle&lt;/a&gt; as well as &lt;a href=&quot;http://jsfiddle.net/csswizardry/HdqNN/&quot;&gt;hosting the code&lt;/a&gt;. Be sure to pick through it with Firebug or similar to actually get what's going on.&lt;/p&gt;

&lt;p&gt;This method works perfectly in IE7+ (not checked IE6, but nor have I walked my dinosaur today) and all other browsers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- HTML --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;form id=&quot;search-form&quot; action=&quot;#&quot;&amp;gt;
    &amp;lt;fieldset&amp;gt;
        &amp;lt;legend class=&quot;accessibility&quot;&amp;gt;Search our archives&amp;lt;/legend&amp;gt;
        &amp;lt;label for=&quot;search&quot; class=&quot;accessibility&quot;&amp;gt;Search terms&amp;lt;/label&amp;gt;
        &amp;lt;input id=&quot;search&quot; placeholder=&quot;Keywords&amp;amp;hellip;&quot; type=&quot;text&quot;&amp;gt;
        &amp;lt;input id=&quot;btn&quot; type=&quot;image&quot; src=&quot;http://dl.dropbox.com/u/2629908/misc/search.png&quot; alt=&quot;Search&quot;&amp;gt;
    &amp;lt;/fieldset&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
.accessibility{
    position:absolute;
    left:-9999px;
}

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Form */&amp;lt;/span&amp;gt;
fieldset{
    padding:0;
    width:275px;
    border:1px solid #4885d8;
    background:rgba(0,0,0,0.25);

    -moz-border-radius:4px;
    -webkit-border-radius:4px;
    border-radius:4px;
    -moz-box-shadow:0 0 10px rgba(0,0,0,0.75) inset;
    -webkit-box-shadow:0 0 10px rgba(0,0,0,0.75) inset;
    box-shadow:0 0 10px rgba(0,0,0,0.75) inset;
}
input{
    font-size:1em;
}
#search,
#btn{
    float:left; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Make the fieldset hug the inputs */&amp;lt;/span&amp;gt;
    cursor:pointer;
}
#search{
    width:200px;
    padding:15px;
    background:none;
    border:none;
    color:#fff;
}
#search:active,
#search:focus{
    outline:none;
    cursor:text;
}
#btn{
    float:right;
    position:relative;
    top:9px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Some unfortunate hard-coded numbers, but these will need setting/altering accordingly. */&amp;lt;/span&amp;gt;
    right:9px;
    width:32px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Same width and height as original image file. */&amp;lt;/span&amp;gt;
    height:32px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We're building a form, we have &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;s and other great little semantic elements all over the place. Let's put these to work and achieve this effect with some illusion... Why wrestle the button and input to sit awkwardly when you have a wrapper already there with the &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Be clever, use illusion to create the desired look using other, more robust elements. Think outside the box and see where other elements/bits of markup can be used to make a more sturdy build &lt;em&gt;and&lt;/em&gt; make your life easier.&lt;/p&gt;

&lt;p&gt;Any more good examples of this kind of thing that anyone's built? Let me know!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Updated CV</title>
   <link href="http://inuitcss.com/2011/08/updated-cv"/>
   <updated>2011-08-08T11:00:38+01:00</updated>
   <id>http://inuitcss.com/2011/08/updated-cv</id>
   <content type="html">&lt;p&gt;Last week I got round to updating &lt;a href=&quot;/cv/&quot;&gt;my CV&lt;/a&gt;, adding on my new job at Sky. I decided to take the opportunity to do something a little different with it this time round.&lt;/p&gt;

&lt;p&gt;Being a web developer, with a strong focus on CSS, I chose to make the CV relevant by writing it as (obviously made-up/invalid) CSS.&lt;/p&gt;

&lt;p&gt;Initially I actually just wrote everything out in one giant &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s just for colouring in, a little like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;pre&amp;gt;
/*------------------------------------*\
    PERSONAL
\*------------------------------------*/
#me{
    name:&quot;Harry Roberts&quot;, Harry;
    age:21years;
}
...
...
&amp;lt;/pre&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far in I thought that that seemed a little too easy/lazy, and it also came with the massive issue of not being semantic, meaningful or just plain proper markup. A CV is a series of headings and lists, not a single block of preformatted text.&lt;/p&gt;

&lt;p&gt;I got to work rewriting, refactoring and tidying and marked it all up properly, and moved any braces, comments and quotes etc out of the HTML and into the CSS making &lt;a href=&quot;http://csswizardry.com/2010/09/keeping-code-clean-with-content/&quot;&gt;massive use of the &lt;code&gt;content:;&lt;/code&gt; property&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The resulting document is a semantically sound, properly marked up CV that is transformed into a CSSesque appearance using, well, CSS.&lt;/p&gt;

&lt;p&gt;CSS is so humbly powerful...&lt;/p&gt;

&lt;p&gt;So, what does anyone think? Good idea? Too novelty? Seen any other cool developer CVs?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; it may be worth noting that even though I've updated my CV, I'm not looking for a new job.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>More logo markup tips</title>
   <link href="http://inuitcss.com/2011/08/more-logo-markup-tips"/>
   <updated>2011-08-02T20:31:49+01:00</updated>
   <id>http://inuitcss.com/2011/08/more-logo-markup-tips</id>
   <content type="html">&lt;p&gt;In my previous article we determined that &lt;a href=&quot;http://csswizardry.com/2010/10/your-logo-is-an-image-not-a-h1/&quot;&gt;your logo is not a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;&lt;/a&gt; and is in fact an image (&lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt;) in its own right. Now let's cover some nice little tips and snippets for making the most of your markup and creating a nicer UX around it.&lt;/p&gt;

&lt;p&gt;The techniques I'm going to cover can be found on my recently launched hub site &lt;a href=&quot;http://hry.rbrts.me&quot;&gt;hry.rbrts.me&lt;/a&gt;, but for the sake of clarity I have &lt;a href=&quot;http://jsfiddle.net/csswizardry/h7zrY/&quot;&gt;isolated them in a jsFiddle here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, if we know a logo needs to be an &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; that's easy enough, but what if we want hover styles on this image? Simple.&lt;/p&gt;

&lt;p&gt;We'll be wrapping the logo in an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; so as to link back to the homepage, a common and good practice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;a href=&quot;/&quot; id=&quot;logo&quot;&amp;gt;
  &amp;lt;img src=&quot;/img/logo.png&quot; alt=&quot;Company logo&quot;&amp;gt;
&amp;lt;/a&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we can do here is utilise this &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and apply a sprited background image to it to provide our on/off hover states, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#logo{
  display:block;
  width:100px; /* Width of logo */
  height:100px; /* Height of logo */
  background:url(/img/css/sprite.png);
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we have a background on the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; surrounding our &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; that we now need to git rid of.&lt;/p&gt;

&lt;p&gt;We could do this by using a simple &lt;code&gt;display:none;&lt;/code&gt; or more accessibly using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#logo img{
  position:absolute;
  left:-9999px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can no longer see the &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; but we &lt;em&gt;can&lt;/em&gt; see the background on the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; behind it.&lt;/p&gt;

&lt;p&gt;Now all we need is to move the sprite on &lt;code&gt;:hover&lt;/code&gt;, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#logo:hover{
  background-position:0 -100px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So here we have a semantically sound logo, using (as we should be) an &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; with the added benefit of being able to use sprites to give the logo hover effects.&lt;/p&gt;

&lt;h2&gt;There's more...&lt;/h2&gt;

&lt;p&gt;There's another little thing I've started doing which I really like. We have an image in the page semantically, but not functionally. Right clicking the logo won't yield a &lt;em&gt;view image&lt;/em&gt; context menu, instead it'll just focus on the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What I like to do, which is a nice little touch, is to unhide the &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; (i.e. get rid of the absolute positioning above) and instead just hide it with &lt;code&gt;opacity:0;&lt;/code&gt; (or &lt;code&gt;filter:alpha(opacity = 0);&lt;/code&gt; for IE). This means that the user can still right click the logo and be interacting with an image, but they still get your nice sprites on hover.&lt;/p&gt;

&lt;p&gt;So we have an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; with a background sprite which contains an invisible image that a user can still interact with; &lt;a href=&quot;http://hry.rbrts.me&quot;&gt;see it in situ&lt;/a&gt; or look at &lt;a href=&quot;http://jsfiddle.net/csswizardry/h7zrY/&quot;&gt;an isolated case&lt;/a&gt;. Try hovering and right clicking...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Borders on responsive images</title>
   <link href="http://inuitcss.com/2011/07/borders-on-responsive-images"/>
   <updated>2011-07-31T14:28:08+01:00</updated>
   <id>http://inuitcss.com/2011/07/borders-on-responsive-images</id>
   <content type="html">&lt;p&gt;This is a quick-tip type post, nothing major but a simple and effective tip for getting responsive borders on responsive images in your responsive designs.&lt;/p&gt;

&lt;p&gt;As we know all too well, we can't specify borders as percentages. This is a major annoyance if you're working (or attempting to work) large borders into a responsive design. It may not be all that difficult with images, it turns out.&lt;/p&gt;

&lt;p&gt;Instead of applying something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;img{
  max-width:100%;
  border:5px solid red;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simply use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;img{
  max-width:98%;
  padding:1%; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* A percentage that, when doubled and added to the above, makes 100%. */&amp;lt;/span&amp;gt;
  background:red; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Color of the faux border. */&amp;lt;/span&amp;gt;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;&lt;a href=&quot;http://jsfiddle.net/csswizardry/eqE9J/show/&quot;&gt;Demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I made &lt;a href=&quot;http://jsfiddle.net/csswizardry/eqE9J/&quot;&gt;a jsFiddle&lt;/a&gt; and &lt;a href=&quot;http://jsfiddle.net/csswizardry/eqE9J/show/&quot;&gt;here is its output&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now this does seem ridiculously obvious but a quick bit of Googling (other search engines are available) yielded nothing similar. Apologies is someone's beaten me to this and I'm retreading old ground.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>hry.rbrts.me</title>
   <link href="http://inuitcss.com/2011/07/hry-rbrts-me"/>
   <updated>2011-07-31T08:08:57+01:00</updated>
   <id>http://inuitcss.com/2011/07/hry-rbrts-me</id>
   <content type="html">&lt;p&gt;Anyone who follows me on &lt;a href=&quot;http://dribbble.com/csswizardry/projects/10934-hry-rbrts-me&quot;&gt;Dribbble&lt;/a&gt; and &lt;a href=&quot;http://forrst.com/posts/hry_rbrts_me-IYw&quot;&gt;Forrst&lt;/a&gt; might have seen shots and posts about &lt;a href=&quot;http://hry.rbrts.me&quot;&gt;hry.rbrts.me&lt;/a&gt;. hry.rbrts.me is a simple hub site that is intended to bring all my online stuff under one central location... I was inspired after seeing &lt;a href=&quot;http://www.antoniocarusone.com/&quot;&gt;Antonio Carusone's own little hub site&lt;/a&gt; and made my own.&lt;/p&gt;

&lt;p&gt;I'd love any feedback regarding design and content, and special thanks goes to &lt;a href=&quot;http://twitter.com/WengersToyBus&quot;&gt;Bryan&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/dan_bentley&quot;&gt;Dan&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/suzehaworth&quot;&gt;Suze&lt;/a&gt;. You can poke through &lt;a href=&quot;https://github.com/csswizardry/hry.rbrts.me&quot;&gt;the source on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>.net magazine awards nominee</title>
   <link href="http://inuitcss.com/2011/07/net-magazine-awards-nominee"/>
   <updated>2011-07-25T18:30:21+01:00</updated>
   <id>http://inuitcss.com/2011/07/net-magazine-awards-nominee</id>
   <content type="html">&lt;p&gt;Today I was absolutely thrilled and humbled to learn I'd been nominated for a &lt;a href=&quot;http://www.thenetawards.com/&quot;&gt;.net magazine award&lt;/a&gt; in the category &lt;a href=&quot;http://www.thenetawards.com/#num12&quot;&gt;&lt;em&gt;Brilliant Newcomer&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'm also alongside some absolutely stellar names such as &lt;a href=&quot;http://twitter.com/LeaVerou&quot;&gt;Lea Verou&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/necolas&quot;&gt;Nicolas Gallagher&lt;/a&gt;, which makes it all the more of an honour.&lt;/p&gt;

&lt;p&gt;A lot of you may have been following CSS Wizardry for quite some time now so the word 'newcomer' might seem a little odd, but it's probably because over the last year or so that CSS Wizardry really has gone from strength to strength. This is thanks in no small part to you, my readers and followers, and &lt;a href=&quot;http://twitter.com/smashingmag&quot;&gt;Smashing Mag&lt;/a&gt;, who've really helped CSS Wizardry's standing in the scene loads with their regular tweets and features.&lt;/p&gt;

&lt;p&gt;So, massive thanks for nominating me. I'm really humbled that, out of all our industry, I'm regarded so highly!&lt;/p&gt;

&lt;p&gt;Lastly--and somewhat predictably--if I, CSS Wizardry or any of my tutorials, articles, Tweets or resources have been of any use to you at all I'd be &lt;em&gt;really&lt;/em&gt; grateful for and appreciative of &lt;a href=&quot;http://www.thenetawards.com/#num12&quot;&gt;a vote&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers,
&lt;em&gt;H&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Responsive images right now</title>
   <link href="http://inuitcss.com/2011/07/responsive-images-right-now"/>
   <updated>2011-07-16T11:36:28+01:00</updated>
   <id>http://inuitcss.com/2011/07/responsive-images-right-now</id>
   <content type="html">&lt;p&gt;Responsive design is everywhere; everyone's at it because, well, it's a great idea. It isn't without its problems, however...&lt;/p&gt;

&lt;p&gt;One of the more persistent issues is dealing with images. Resizing an image down to fit a smaller screen does work, but it's a massive performance hit if your user is having to download a 1000px image to display on her 480px screen. Even if they're on a super-fast WiFi connection, it makes no sense downloading 1000s of pixels if you can only display a fraction of that.&lt;/p&gt;

&lt;p&gt;There have  been several solutions posted and proposed around the internet but I've come up with a pretty humble one that you could use right away.&lt;/p&gt;

&lt;p&gt;It's a little fiddly, you have to hard-code some stuff and also process two images, but it does work and it is simple.&lt;/p&gt;

&lt;p&gt;The premise is this; your &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; element is the smaller of the two images, the image you want 'mobile' users to download. You also have a containing &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to which you apply the large version of the image as a background through CSS.&lt;/p&gt;

&lt;p&gt;You then hide the &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; from 'desktop' users and show them the large, CSS background, and you hide the background image from 'mobile' users and just serve them the small inline image.&lt;/p&gt;

&lt;p&gt;The benefits here are that you're still using semantically sound markup; your HTML makes sense because there is an image element in there. The size of this image is irrelevant where semantics are concerned--a machine/browser etc doesn't need to 'see' the image, it just needs to access its data. Further, screen readers can still access this image and its &lt;code&gt;alt&lt;/code&gt; text, making this method nice and accessible.&lt;/p&gt;

&lt;p&gt;So basically you are always serving an &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; which is semantically sound, but you alter the cosmetics of that image depending on the size of device the user is using.&lt;/p&gt;

&lt;p&gt;Here is some example code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- HTML --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;div class=&quot;r-img&quot; style=&quot;background:url(link/to/large/version); width:[width-of-image]px; height:[height-of-image]px;&quot;&amp;gt;
    &amp;lt;img src=&quot;link/to/small/version&quot; alt=&quot;&quot; /&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
.r-img img{
    &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Hide image off-screen on larger devices, but leave it accessible to screen-readers */&amp;lt;/span&amp;gt;
    position:absolute;
    left:-9999px;
}

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*--- RESPONSIVE ---*/&amp;lt;/span&amp;gt;
@media(max-width:480px){
.r-img{
    &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Remove styling from the div */&amp;lt;/span&amp;gt;
    background:none!important;
    width:auto!important;
    height:auto!important;
}
.r-img img{
    &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Bring smaller image back into view */&amp;lt;/span&amp;gt;
    position:static;
    max-width:100%;
}
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;&lt;a href=&quot;http://dl.dropbox.com/u/2629908/sandbox/responsive-images/index.html&quot;&gt;Demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I've made a little demo, try sizing your window down to see the functionality or, even better, visit it on your phone.&lt;/p&gt;

&lt;p&gt;Also, open up Firebug's &lt;em&gt;Net&lt;/em&gt; tab and compare HTTP requests between the two versions. The background images, as you'd expect, just don't get downloaded on the responsive version. Unfortunately, users on larger screens will still download both images...&lt;/p&gt;

&lt;p&gt;Now, I did just think of this in the shower and wrote it straight down so please let me know of any potential stumbling blocks etc in the comments. Cheers!&lt;/p&gt;

&lt;h2&gt;Bonus&lt;/h2&gt;

&lt;p&gt;Instead of hiding the image off-screen we can actually set it to &lt;code&gt;width:100%&lt;/code&gt; and &lt;code&gt;height:100%;&lt;/code&gt; so it completely covers the background image and then set it to &lt;code&gt;opacity:0;&lt;/code&gt;. This means that if a user right clicks the background image (to save it etc) they still can because they're focussed on an invisible image in the page. See &lt;a href=&quot;http://dl.dropbox.com/u/2629908/sandbox/responsive-images/index2.html&quot;&gt;the second demo&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fluid grid calculator</title>
   <link href="http://inuitcss.com/2011/06/fluid-grid-calculator"/>
   <updated>2011-06-28T18:30:03+01:00</updated>
   <id>http://inuitcss.com/2011/06/fluid-grid-calculator</id>
   <content type="html">&lt;p&gt;What with &lt;a href=&quot;http://www.abookapart.com/products/responsive-web-design&quot;&gt;Ethan's book&lt;/a&gt; and &lt;a href=&quot;http://www.alistapart.com/articles/responsive-web-design/&quot;&gt;A List Apart&lt;/a&gt; article the whole community is responsive design mad. Which is a good thing... I've been looking at redesigning CSS Wizardry onto a fluid grid and also adding a custom fluid-grid-igloo builder for &lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;/fluid-grids/&quot;&gt;Fluid grid calculator&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In doing these I realised how time consuming it is actually working out your percentages. I wrote a little proof of concept PHP script the other day and, as a test-case, decided to run the grid system we use at work through it. The outcome was surprisingly good so I got the script finished!&lt;/p&gt;

&lt;p&gt;All I needed was to test, test and test it then pop a UI on it and bam! Here it is, my &lt;a href=&quot;/fluid-grids/&quot;&gt;fluid grid calculator&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;How it works&lt;/h2&gt;

&lt;p&gt;You give the calculator the number of columns you want your grid system to have, how wide you want one of those columns to be and, finally, how wide you want the gaps between each column (gutters) to be.&lt;/p&gt;

&lt;p&gt;Given just these three bits of information the script gives you back a full stylesheet--which you can download--which contains the measurements for all of your possible grid sizes, their gutters and their containers.&lt;/p&gt;

&lt;p&gt;Now, this is in Super-Uber-Pre-Alpha™ so please report any bugs to me as soon as you can, preferably via &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;A note on inuit.css&lt;/h3&gt;

&lt;p&gt;As I mentioned I am currently working on integrating this calculator into &lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt; so you can build your own custom fluid grids. However, there is &lt;em&gt;a lot&lt;/em&gt; of work involved in removing old code and building a builder that will construct a perfect igloo. I'm working on it, but it will take time. To be the first in the know follow &lt;a href=&quot;http://twitter.com/inuitcss&quot;&gt;the inuit.css Twitter account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the meantime you can simply paste your &lt;a href=&quot;/fluid-grids/&quot;&gt;generated grid system&lt;/a&gt; into your own inuit.css extension.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Namespacing fragment identifiers</title>
   <link href="http://inuitcss.com/2011/06/namespacing-fragment-identifiers"/>
   <updated>2011-06-20T18:28:14+01:00</updated>
   <id>http://inuitcss.com/2011/06/namespacing-fragment-identifiers</id>
   <content type="html">&lt;p&gt;I just stumbled upon something amazing. &lt;a href=&quot;http://www.w3.org/TR/html401/types.html#type-name&quot;&gt;HTML allows colons (:) and periods (.) in ID tokens.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At first I thought this was awesome because, well, how cool is that?! But then I realised that neither of these are any use in CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#foo:bar{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Looks for an element with an ID of foo and a pseudo-selector(class/element) of bar */&amp;lt;/span&amp;gt; }
#foo.bar{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Looks for an element with an ID of foo and a class of bar */&amp;lt;/span&amp;gt; }
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, whilst these are perfectly valid in HTML, &lt;del&gt;they're useless in CSS&lt;/del&gt; they &lt;em&gt;can&lt;/em&gt; be &lt;a href=&quot;http://csswizardry.com/2011/06/namespacing-fragment-identifiers/#addendum:escaping&quot;&gt;styled with CSS&lt;/a&gt;. Kinda sucks, huh? But! If we know they're okay in HTML and totally pointless in CSS, can we use that to our advantage?&lt;/p&gt;

&lt;p&gt;Answer: yes!&lt;/p&gt;

&lt;h2&gt;Fragment identifiers&lt;/h2&gt;

&lt;p&gt;This is just the fancy name for when you link to an element with an ID on it, e.g. &lt;code&gt;&amp;lt;a href=&quot;#content&quot;&amp;gt;Skip to content&amp;lt;/a&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I regularly use fragment identifiers when writing long articles with certain sections in them. The best and most relevant example I have is &lt;a href=&quot;http://coding.smashingmagazine.com/2011/03/14/technical-web-typography-guidelines-and-techniques/&quot;&gt;my epic on web type on Smashing Magazine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here I have a list of links to sections in the article, but you should notice I prefix each ID (and therefore its corresponding link's &lt;code&gt;href&lt;/code&gt;) with &lt;code&gt;#tt-&lt;/code&gt;. This is so that I know that my sections will (almost definitely) not be picked up by Smashing's CSS. If I had a section called &lt;code&gt;#face&lt;/code&gt; and, for whatever crazy reason, Vitaly had a huge photo of himself with an ID of &lt;code&gt;#face&lt;/code&gt; there would have been conflicts.&lt;/p&gt;

&lt;p&gt;This was a situation where I needed IDs for &lt;em&gt;no&lt;/em&gt; styling whatsoever, but rather to be used as fragment identifiers. And, to circumvent any of these potential hiccups, I namespaced all my fragment identifiers with &lt;code&gt;#tt-&lt;/code&gt;, standing for &lt;em&gt;technical type&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here enters my little discovery...&lt;/p&gt;

&lt;p&gt;If we want an ID that won't be styled with CSS because we only want to link to it then we can use a colon or a period in there to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ensure that CSS &lt;em&gt;cannot&lt;/em&gt; touch the element even if it wanted to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Namespace the fragment identifier to show that it is meant as a link hook and give it some more human-friendly semantics.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;&lt;a href=&quot;http://dl.dropbox.com/u/2629908/sandbox/namespacing/index.html&quot;&gt;Demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I've made &lt;a href=&quot;http://dl.dropbox.com/u/2629908/sandbox/namespacing/index.html&quot;&gt;a demo page of this&lt;/a&gt; to a) prove that it works and b) show you how it works in situ.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://validator.w3.org/check?verbose=1&amp;amp;uri=http%3A%2F%2Fdl.dropbox.com%2Fu%2F2629908%2Fsandbox%2Fnamespacing%2Findex.html&quot;&gt;Run it through the validator&lt;/a&gt;, see, it works!&lt;/p&gt;

&lt;p&gt;I've also tested it in IE7+, Chrome and Firefox Mac and Win.&lt;/p&gt;

&lt;h2&gt;Problems?&lt;/h2&gt;

&lt;p&gt;Not that I can think of right away, but bear in mind that these elements cannot be styled via that ID.&lt;/p&gt;

&lt;p&gt;For the most part the elements will be styled on an element-level basis (e.g. &lt;code&gt;table{}&lt;/code&gt;, &lt;code&gt;pre{}&lt;/code&gt; and so on) so styling them explicitly should not be too important.&lt;/p&gt;

&lt;p&gt;If you do find you need to style them individually you could:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use a class.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Revert to the tried and tested non-colon-or-period syntax.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;A standard&lt;/h2&gt;

&lt;p&gt;I've never ever seen this anywhere before but I am already thinking it will be incredibly useful to me and any others who write documentation, articles or anything else with sections.&lt;/p&gt;

&lt;p&gt;I propose a (loose) standard whereby you namespace your fragment identifiers with relevant information, so if you're linking to a table in a document give the table an ID of &lt;code&gt;#table:sales-figures&lt;/code&gt;, a figure showing a technical drawing an ID of &lt;code&gt;#figure:engine-section&lt;/code&gt;, a section of an article an ID of &lt;code&gt;#section:intro&lt;/code&gt; and so on.&lt;/p&gt;

&lt;p&gt;I have created &lt;a href=&quot;https://github.com/csswizardry/namespacing-fragment-identifiers/blob/master/spec.html&quot;&gt;a GitHub repo with an initial list of potential namespacing values&lt;/a&gt; there could be. I encourage and appreciate your contributions!&lt;/p&gt;

&lt;p&gt;Any thoughts and feedback on this would be great!&lt;/p&gt;

&lt;h2&gt;Addendum&lt;/h2&gt;

&lt;p&gt;Ben '&lt;a href=&quot;https://twitter.com/#!/cowboy&quot;&gt;Cowboy&lt;/a&gt;' Alman &lt;a href=&quot;http://csswizardry.com/2011/06/namespacing-fragment-identifiers/#comment-61782&quot;&gt;points out&lt;/a&gt; that &lt;a href=&quot;http://jsfiddle.net/csswizardry/ZYhhS/&quot;&gt;escaping the colon will allow you to style the ID via CSS, as will escaping the period&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#foo\:bar{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Works! */&amp;lt;/span&amp;gt; }
#foo\.bar{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Works! */&amp;lt;/span&amp;gt; }
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>What is inuit.css?</title>
   <link href="http://inuitcss.com/2011/06/what-is-inuit-css"/>
   <updated>2011-06-19T13:01:39+01:00</updated>
   <id>http://inuitcss.com/2011/06/what-is-inuit-css</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt; has been live for a couple of months now, but I've decided to do a more extensive writeup of what it is, what it does, who it might help and who could--or should--be using it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://inuitcss.com/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2011/04/inuit-logo.jpg&quot; alt=&quot;inuit.css logo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt; is a CSS framework. Another one. Except I like to think that inuit.css is a little different. It's not a grid system, it's not a boilerplate, it's not a starting point, it's a fully featured and extensive framework. It is designed to do 90% of the grunt work for you, it takes care of the boring bits that you have to do on every build and leaves you enough time to concentrate fully on the fun bits.&lt;/p&gt;

&lt;h2&gt;Extensibility&lt;/h2&gt;

&lt;p&gt;inuit.css is one of very few frameworks which has plugins, or as inuit.css calls them, &lt;a href=&quot;http://inuitcss.com/#igloos&quot;&gt;igloos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;igloos extend and add functionality to an already extensive framework; add features like breadcrumb navigations, IE6 support, dropdown menus and more...&lt;/p&gt;

&lt;h2&gt;Updates&lt;/h2&gt;

&lt;p&gt;inuit.css is, at the time of writing, a mere two months old. In that time however it has gone from version 1.0 to version 2.5. &lt;a href=&quot;https://github.com/csswizardry/inuit.css/blob/master/changelog.txt&quot;&gt;Twenty updates to the framework&lt;/a&gt; to improve, refine and add functionality.&lt;/p&gt;

&lt;p&gt;A lot of frameworks go stagnant or get forgotten once written; I'm trying my best to take &lt;a href=&quot;http://search.twitter.com/search?q=&amp;amp;ands=&amp;amp;phrase=&amp;amp;ors=&amp;amp;nots=&amp;amp;tag=&amp;amp;lang=all&amp;amp;from=&amp;amp;to=inuitcss&amp;amp;ref=&amp;amp;near=&amp;amp;within=15&amp;amp;units=mi&amp;amp;since=&amp;amp;until=&amp;amp;rpp=15&quot;&gt;community feedback&lt;/a&gt; to constantly expand and improve inuit.css based on what people want.&lt;/p&gt;

&lt;h2&gt;Pragmatic&lt;/h2&gt;

&lt;p&gt;inuit.css is a pragmatic framework which uses lots of progressive enhancement. Rather than trying to be everything to everyone it performs to its environment. IE7 works a treat, but Firefox 4 works even better. inuit.css takes a sensible approach to web development.&lt;/p&gt;

&lt;h2&gt;A developer's best friend...&lt;/h2&gt;

&lt;p&gt;inuit.css aims to save time, effort and &lt;em&gt;memory&lt;/em&gt; on the developer's part. Small aspects of the framework were added with the sole intention of making developers' lives easier. &lt;a href=&quot;https://github.com/csswizardry/inuit.css/blob/v2.5/css/inuit.css#L120&quot;&gt;The removal of the requirement for the &lt;code&gt;.end&lt;/code&gt; class&lt;/a&gt; on the last item in a line of grid columns, &lt;a href=&quot;http://twitter.com/inuitcss/status/80685512490369024&quot;&gt;the dropping of the &lt;code&gt;.grid&lt;/code&gt; class&lt;/a&gt; to throw &lt;code&gt;div&lt;/code&gt;s into grid mode--these were all added with the end user in mind.&lt;/p&gt;

&lt;h2&gt;Who should use it?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;People who have a great design but aren't too hot in notepad.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Programmers who can build awesome apps but can't necessarily get some decent CSS in place in a reasonable time-frame.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People who want the majority of their browser testing done for them already (inuit.css works in IE7+ and all other browsers and has &lt;a href=&quot;https://github.com/csswizardry/ie6.inuit.css&quot;&gt;an igloo for IE6 support&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Agencies who need to turn round projects quickly but don't want to compromise on quality--inuit.css has loads of best practices and nifty tricks baked in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People who are new to CSS and build who want a decent starting point from which to learn.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People who like the idea of a responsive site but haven't the resources to research and/or implement it themselves.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Anyone who builds websites.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you've looked at, or even better, &lt;em&gt;used&lt;/em&gt; inuit.css, your feedback is vital in ensuring the continued improvements and additions, so please keep &lt;a href=&quot;http://twitter.com/?status=Hey,%20@inuitcss%20&quot;&gt;tweeting at me&lt;/a&gt;, and leave any critiques or general comments below.&lt;/p&gt;

&lt;p&gt;Cheers,
&lt;em&gt;H&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Styling alt text on images</title>
   <link href="http://inuitcss.com/2011/06/styling-alt-text-on-images"/>
   <updated>2011-06-18T17:41:39+01:00</updated>
   <id>http://inuitcss.com/2011/06/styling-alt-text-on-images</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://twitter.com/csswizardry/status/81748007304962048&quot;&gt;I tweeted a tip&lt;/a&gt; the other day whereby you add text styles to images so that their &lt;code&gt;alt&lt;/code&gt; text is differentiated if images, for whatever reason, cannot be loaded.&lt;/p&gt;

&lt;p&gt;The tweet sparked more interest than I expected so I thought I would give the technique a more thorough writeup. The CSS is incredibly simple but it's just one of those things that can make a lot of difference to someone's UX.&lt;/p&gt;

&lt;p&gt;The thinking is that by applying text-styles to images you can affect their &lt;code&gt;alt&lt;/code&gt; text and how that appears if the image fails to load. This can help users realise there's something different about a piece of content and that it's perhaps not directly a part of the current text.&lt;/p&gt;

&lt;p&gt;A lot of people weren't aware this would or does work but if you think about it, any &lt;code&gt;alt&lt;/code&gt; text you've ever seen will have been the same face, colour and style as the rest of the page. &lt;code&gt;alt&lt;/code&gt; text (and therefore images) can be styled!&lt;/p&gt;

&lt;h2&gt;The code&lt;/h2&gt;

&lt;p&gt;I started doing this a long, long time ago but for some reason completely forgot about it until I started developing &lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I tend to always apply italics to the text and oftentimes a text colour. Italics is fairly failsafe as figures and asides etc are often set in italics.&lt;/p&gt;

&lt;p&gt;Text colours can be more troublesome as it could be misconstrued as being a link, so use this wisely and avoid using the same colour as your links appear in.&lt;/p&gt;

&lt;p&gt;Another fairly progressive (but potentially unstable) addition is to use the &lt;code&gt;:after&lt;/code&gt; pseudo-element to append the text '(image)' onto the &lt;code&gt;alt&lt;/code&gt; text. This only seems to work in Firefox (4).&lt;/p&gt;

&lt;p&gt;The code, in full, is simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;img{
    font-style:italic;
    color:#c00;
}

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*
In Firefox we can insert the word (image) into the alt text of an image that hasn’t loaded.
*/&amp;lt;/span&amp;gt;
img:after   { content:&quot; (image)&quot;; }
img::after  { content:&quot; (image)&quot;; } &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* New CSS3 standard notation */&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So there we have it, a simple, tiny addition to make your users' experience a little more polished and complete...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing igloos—inuit.css gets plugins</title>
   <link href="http://inuitcss.com/2011/06/introducing-igloos-inuit-css-gets-plugins"/>
   <updated>2011-06-11T11:48:26+01:00</updated>
   <id>http://inuitcss.com/2011/06/introducing-igloos-inuit-css-gets-plugins</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://inuitcss.com&quot;&gt;inuit.css&lt;/a&gt; has been my answer to the CSS framework. I launched it just under two months ago to great reception, you guys have had some excellent suggestions and some really supportive feedback which has kept inuit.css going, with me updating it as often as I can and adding new features.&lt;/p&gt;

&lt;p&gt;I'm very excited today to announce that inuit.css is getting plugins, and to keep the theme running &lt;strong&gt;these plugins are called &lt;em&gt;igloos&lt;/em&gt;&lt;/strong&gt;! jQuery has them, WordPress has them and now so does inuit.css.&lt;/p&gt;

&lt;h2&gt;An igloo = an inuit.css plugin&lt;/h2&gt;

&lt;p&gt;I wrote a really rough spec for them this morning just to keep development on the straight and narrow but I thought I'd show it to you guys too.&lt;/p&gt;

&lt;p&gt;It is important to note that inuit.css will have less features in the core framework after v2.0. The keywords and 12-col CSS will be removed from inuit.css and into their respective plugin files.&lt;/p&gt;

&lt;p&gt;Here is the tiny spec:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;igloos -- CSS plugins for inuit.css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;igloos are inuit.css specific plugins to extend and add functionality to the inuit.css framework.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Naming conventions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;igloos shall be named thus: &lt;igloo-name&gt;.inuit.css. An igloo which provides annotation support for HTML5 figure elements would be named thus: annotate.inuit.css&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How they work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An igloo is included in the page using a HTML &lt;code&gt;&amp;lt;link /&amp;gt;&lt;/code&gt; element. This &lt;code&gt;&amp;lt;link /&amp;gt;&lt;/code&gt; appears &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;&amp;lt;link /&amp;gt;&lt;/code&gt; which includes inuit.css, eg:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/css/inuit.css&quot; /&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/css/annotate.inuit.css&quot; /&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does mean additional HTTP requests, however it does mean that we see the extension metaphor at work and the core inuit.css file remains unchanged, allowing for easier upgrades of the framework in the future.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In case you haven't guessed, one of the first igloos to come to inuit.css is the &lt;a href=&quot;http://csswizardry.com/2011/06/annotated-figures-in-html5-and-css/&quot;&gt;annotated &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; snippet&lt;/a&gt; I wrote last week!&lt;/p&gt;

&lt;p&gt;I'm working on writing igloos and also preparing them and v2.0 for release. They should be ready within the next week or so but to keep up to date follow &lt;a href=&quot;http://twitter.com/inuitcss&quot;&gt;inuit.css on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;They're live!&lt;/h2&gt;

&lt;p&gt;Some igloos are live and can be downloaded from &lt;a href=&quot;http://inuitcss.com/#igloos&quot;&gt;http://inuitcss.com/#igloos&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>DIBI 2011</title>
   <link href="http://inuitcss.com/2011/06/dibi-2011"/>
   <updated>2011-06-05T17:24:34+01:00</updated>
   <id>http://inuitcss.com/2011/06/dibi-2011</id>
   <content type="html">&lt;p&gt;I'm heading up to &lt;a href=&quot;http://www.dibiconference.com/&quot;&gt;DIBI 2011&lt;/a&gt; with &lt;a href=&quot;http://twitter.com/dan_bentley&quot;&gt;Dan Bentley&lt;/a&gt; and a few other guys I know. &lt;em&gt;However&lt;/em&gt;, I'd love to meet some people I only know through that Twitter thingy so if you're going and you fancy grabbing a beer please email/&lt;a href=&quot;http://twitter.com/?status=Hey,%20@csswizardry,%20beer%20at%20DIBI!&quot;&gt;tweet at me&lt;/a&gt;. I've never been to a conference before and I'm itching to meet people!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; csswizardry [at] gmail [dot] com.&lt;/p&gt;

&lt;p&gt;Oh, and &lt;a href=&quot;http://www.flickr.com/photos/csswizardry/3480159019/in/photostream&quot;&gt;this is my ugly mug&lt;/a&gt;* if you want to be able to recognise me.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;May be fatter in real life.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Cheers,
&lt;em&gt;Harry&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Annotated <figure>s in HTML5 and CSS</title>
   <link href="http://inuitcss.com/2011/06/annotated-figures-in-html5-and-css"/>
   <updated>2011-06-03T18:57:01+01:00</updated>
   <id>http://inuitcss.com/2011/06/annotated-figures-in-html5-and-css</id>
   <content type="html">&lt;p&gt;I've never really been one for CSS experiments. They're cool and all, but I prefer solving real problems with good ol' CSS and markup. This is what this next thing was born from and I'm really pleased with the outcome! It's &lt;a href=&quot;http://dl.dropbox.com/u/2629908/sandbox/annotations/index.html&quot;&gt;image maps, meet annotations, meet HTML5's &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; element&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, we all know HTML5 has given us some pretty awesome new elements to toy with and some of the more humble ones are &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;figure&amp;gt;
  &amp;lt;img src=&quot;/img.jpg&quot; alt=&quot;&quot; /&amp;gt;
  &amp;lt;figcaption&amp;gt;Caption for above image&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this post I'll show you how to turn that into &lt;a href=&quot;http://dl.dropbox.com/u/2629908/sandbox/annotations/index.html&quot;&gt;an image-map style annotated image&lt;/a&gt; using really really semantic markup.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;&lt;a href=&quot;http://dl.dropbox.com/u/2629908/sandbox/annotations/index.html&quot;&gt;Demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;You're probably familiar with Flickr's notes which are shown upon hovering an image. Well functionally this is exactly like that (I've never actually looked at their markup but I imagine it's nigh on identical). Where this differs is that it uses some super-rich and semantic markup and it can be used as a CSS plugin! Simply paste the CSS into your site's stylesheet and start using HTML5 &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; annotations.&lt;/p&gt;

&lt;h2&gt;The code&lt;/h2&gt;

&lt;p&gt;This technique is a really good example of layers of code. Perfect HTML that works absolutely great on its own, totally semantic and well structured. It doesn't need the CSS at all to function, the CSS just enhances it.&lt;/p&gt;

&lt;h3&gt;The HTML&lt;/h3&gt;

&lt;p&gt;The HTML is lovely and simple. Before we go any further &lt;a href=&quot;http://dl.dropbox.com/u/2629908/sandbox/annotations/index.html&quot;&gt;go back to the demo page&lt;/a&gt; and disable styles. Seeing this without styles &lt;em&gt;should&lt;/em&gt; show you just how semantic and sensible the markup really is. It's a perfect HTML layer that doesn't even &lt;em&gt;need&lt;/em&gt; CSS to make sense or work.&lt;/p&gt;

&lt;p&gt;I've not included the whole page as all we really want to look at is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;figure class=&quot;annotated&quot;&amp;gt;

  &amp;lt;img src=&quot;img/photo.jpg&quot; alt=&quot;Photograph of me on my bike&quot; /&amp;gt;

  &amp;lt;figcaption&amp;gt;

    &amp;lt;b&amp;gt;Things to note:&amp;lt;/b&amp;gt;

    &amp;lt;ul&amp;gt;
      &amp;lt;!-- Positions of the list-items. These need defining inline. --&amp;gt;
      &amp;lt;li style=&quot;top:255px; left:150px;&quot;&amp;gt;Helmet.&amp;lt;/li&amp;gt;
      &amp;lt;li style=&quot;top:420px; left:140px;&quot;&amp;gt;Ruptured ligaments in my ankle.&amp;lt;/li&amp;gt;
      &amp;lt;li style=&quot;top:480px; left:130px;&quot;&amp;gt;Low pressures.&amp;lt;/li&amp;gt;
      &amp;lt;li style=&quot;top:390px; left:325px;&quot;&amp;gt;The trailer I just jumped from.&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;

    &amp;lt;i&amp;gt;&amp;lt;a href=&quot;http://www.flickr.com/photos/suzannahaworth/4707464578/&quot;&amp;gt;Photo&amp;lt;/a&amp;gt; by &amp;lt;a href=&quot;http://twitter.com/suzehaworth&quot;&amp;gt;@suzehaworth&amp;lt;/a&amp;gt;.&amp;lt;/i&amp;gt;

  &amp;lt;/figcaption&amp;gt;

&amp;lt;/figure&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All we have here is a &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; with an image, a title and a list. The image is the subject of our figure and the list makes points about it. To associate these points with the image we simply have a &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; which we use to textually make the connection.&lt;/p&gt;

&lt;h3&gt;The CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  ANNOTATIONS
\*------------------------------------*/&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*
Apply a class of annotated to any figure you would like, well, annotated!
*/&amp;lt;/span&amp;gt;
.annotated{
  position:relative;
  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*display:inline-block; If you do not need to support IE7 and below uncomment this line and remove the inline width and height styles on the &amp;lt;figure&amp;gt; in your markup. */&amp;lt;/span&amp;gt;
}
.annotated img{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Set this to stop white-space appearing under the image. */&amp;lt;/span&amp;gt;
  display:block;
}
.annotated b{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Hide the figcaption's title. */&amp;lt;/span&amp;gt;
  position:absolute;
  left:-99999px;
}
.annotated ul{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Set up the canvas for the annotations to sit on. */&amp;lt;/span&amp;gt;
  list-style:none;
  position:absolute; 
  top:0;
  right:0;
  bottom:0;
  left:0;
}
.annotated li{
  display:block;
  padding:0 5px;
  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Give them a width and a line-height suitable for your kind of images. I chose 50px. */&amp;lt;/span&amp;gt;
  width:40px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* 40px + 5px padding-right  + 5px padding-left = 50px */&amp;lt;/span&amp;gt;
  line-height:50px;
  position:absolute;
  text-indent:-99999px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Hide the text off-screen. */&amp;lt;/span&amp;gt;
  white-space:nowrap; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Stop the annotations breaking onto several lines. */&amp;lt;/span&amp;gt;
  cursor:default;
}
.annotated:hover li{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* When we hover the figure show us where the annotations are. */&amp;lt;/span&amp;gt;
  border:1px solid #fff;
}
.annotated li:hover { &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Show the text on hover. */&amp;lt;/span&amp;gt;
  background:#fff;
  background:rgba(255,255,255,0.75);
  z-index:2; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Bring current annotation above others. */&amp;lt;/span&amp;gt;
  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Remove the width and text-indent to show us our text! */&amp;lt;/span&amp;gt;
  width:auto;
  text-indent:0;

  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* A bit o' progressive enhancement */&amp;lt;/span&amp;gt;
  -moz-box-shadow:0 0 5px rgba(0,0,0,0.25);
  -webkit-box-shadow:0 0 5px rgba(0,0,0,0.25);
  box-shadow:0 0 5px rgba(0,0,0,0.25);
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The CSS is fairly well commented but basically what we do is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hide the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; title.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Absolutely position and stretch the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; over the image.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s a width and (line-)height and hide the text off-screen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add borders to the list items when we hover the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove the width from and give a border to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s on hover, and reveal the text.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;A couple of things to note&lt;/h3&gt;

&lt;p&gt;Firstly, the list items need positioning with inline styles in the markup. This is far more pragmatic than giving each &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; an ID and doing each one through an external CSS file.&lt;/p&gt;

&lt;p&gt;Secondly, and more in depth, &lt;em&gt;how do we get the the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; to wrap around and hug the image?&lt;/em&gt; We have four options.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Leave it as-is, like I have here. This means that if you hover to the right of the image you are technically still inside the (block-level) &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; and this will display the list item borders when your cursor isn't actually over the image. This isn't too bad, but a little unexpected...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Float the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; left, which will force it to hug up to its largest child. The problem here is that you would have to &lt;code&gt;clear:both;&lt;/code&gt; the subsequent element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; &lt;code&gt;display:inline-block;&lt;/code&gt;, but this won't work in IE7 and below.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The final and, in my opinion, most pragmatic solution would be to simply add an inline width and height to the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; which is identical to the dimensions of your image, thus: &lt;code&gt;&amp;lt;figure style=&quot;width:427px;height:640px;&quot;&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Decide which of those will suit your project best and put it to work. Simply pasting the CSS into your stylesheet and obeying the markup structure will allow you to annotate your figures in a much nicer fashion.&lt;/p&gt;

&lt;p&gt;I have just put &lt;a href=&quot;https://github.com/csswizardry/annotate&quot;&gt;this on GitHub&lt;/a&gt; in a CSS plugin type fashion. Please feel free to download and poke through the code.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Font sizing with rem could be avoided</title>
   <link href="http://inuitcss.com/2011/05/font-sizing-with-rem-could-be-avoided"/>
   <updated>2011-05-31T20:13:32+01:00</updated>
   <id>http://inuitcss.com/2011/05/font-sizing-with-rem-could-be-avoided</id>
   <content type="html">&lt;p&gt;Jonathan Snook &lt;a href=&quot;http://snook.ca/archives/html_and_css/font-size-with-rem&quot;&gt;wrote recently&lt;/a&gt; about the new font-sizing unit &lt;code&gt;rem&lt;/code&gt;. Whilst I do find it interesting and potentially useful I do think it possibly solves a problem that doesn't actually exist...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; This article isn't a response to Jonathan's, nor am I calling him out, he just happened to have laid some nice foundations with his article that allow me to use it as a base. It is worth noting further that Jonathan a) uses px to declare font-sizes anyway and b) does start with the base he intends to use. This article &lt;em&gt;isn't&lt;/em&gt; a response to his.&lt;/p&gt;

&lt;p&gt;Jonathan uses the example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;body { font-size:62.5%; }
h1 { font-size: 2.4em; } /* =24px */
p  { font-size: 1.4em; } /* =14px */
li { font-size: 1.4em; } /* =14px? */
li li, li p /* etc */ { font-size: 1em; }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here he sets his base font-size to 10px then creates a &lt;code&gt;h1&lt;/code&gt; size of 24px, &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;s and &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s of 14px and then children of &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;s and &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s at 1em, also 14px.&lt;/p&gt;

&lt;p&gt;Here is a problem that developers continuously cause themselves. It's clear here that, although he sets a body font-size of 10px, the actual base font-size is 14px. Therein lies the problem.&lt;/p&gt;

&lt;p&gt;Creating a base font-size that you don't actually need means you have to redefine nigh on every element to take on the size you &lt;em&gt;do&lt;/em&gt; want--you're creating a rule that you don't even want and it's causing you work...&lt;/p&gt;

&lt;p&gt;If you want your base font-size to be 14px then set your &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; at &lt;code&gt;0.875em&lt;/code&gt; and you're done. If you want a 24px &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; then your CSS is simply &lt;code&gt;h1{ font-size:1.714em; }&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;The problem with 62.5%&lt;/h2&gt;

&lt;p&gt;The 62.5% trick is a common one, and does have its uses in two circumstances:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You want simpler maths, for example if you are building an elastic layout (&lt;code&gt;width:30em;&lt;/code&gt; == &lt;code&gt;width:300px;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You &lt;em&gt;actually&lt;/em&gt; want a base font-size of 10px&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If you are doing neither of these then be kind to yourself and set the base you &lt;em&gt;actually&lt;/em&gt; want.&lt;/p&gt;

&lt;p&gt;The main reason people reset the font-size to 10px is point one; to make maths easier. If your quasi-base is 10px and you want an actual base of 12px it's simply 1.2em. The maths &lt;em&gt;is&lt;/em&gt; easier, we can work with units of ten more easily, but that comes at the cost of maintainability.&lt;/p&gt;

&lt;p&gt;If you set your quasi-base at 10px and you want your body copy to be 12px, you have to style every single element that falls under 'body copy' individually. Hence Jonathan's giving font-sizes to list items and paragraphs. This means you're writing more code than you need and also leads to nasty inheritance problems; problems that rems are supposed to fix. A &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; in an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; will be 1.2x12px, whereas it still only needs to be 12px.&lt;/p&gt;

&lt;p&gt;If you were to just set your base &lt;em&gt;at&lt;/em&gt; 12px in the first place (&lt;code&gt;body{ font-size:0.75em; }&lt;/code&gt;) then:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You don't need to define every element individually; you style the exceptions rather than rewriting the rule.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don't get crazy-annoying inheritance issues.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;Being lazy is causing you more work&lt;/h2&gt;

&lt;p&gt;The main reason, I feel, behind using the 62.5% method is laziness, and that's a good thing. Good developers are lazy. However that laziness is misguided; it's actually causing you more work. You have to define font-sizes on all elements rather than just once and letting them inherit &lt;em&gt;and&lt;/em&gt; you have to tackle those horrible inheritance issues when an explicitly sized element is placed inside another one.&lt;/p&gt;

&lt;p&gt;When setting the base font-size correctly and only once the maths isn't as nice, I'll admit. With the 62.5% trick a font is an even ten times its em unit (2.4em = 24px, 5em = 50px and so on). With setting your base to what you actually want the chances are you &lt;em&gt;will&lt;/em&gt; end up with a not-as-nice number. If you want your base to be 16px then 2.4em = 38.4px, 5em = 80px. It's a little more work in your calculator app, but it's a lot less work when it actually comes down to build.&lt;/p&gt;

&lt;p&gt;CSS Wizardry has a base of 16px, so I just leave it at &lt;code&gt;font-size:100%;&lt;/code&gt;. 16px is the rule, headings are the exception. As such I only need to redefine font-sizes on headings.&lt;/p&gt;

&lt;p&gt;My maths is a little harder, my coding is a breeze...&lt;/p&gt;

&lt;p&gt;So by all means start using &lt;code&gt;rem&lt;/code&gt;s, they seem pretty interesting, but it may just be solving a problem you don't even have...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>jQuery placeholder plugin/polyfill</title>
   <link href="http://inuitcss.com/2011/05/jquery-placeholder-plugin-polyfill"/>
   <updated>2011-05-24T19:35:27+01:00</updated>
   <id>http://inuitcss.com/2011/05/jquery-placeholder-plugin-polyfill</id>
   <content type="html">&lt;p&gt;My good friend, ex-colleague and all round awesome dude &lt;a href=&quot;http://twitter.com/dan_bentley&quot;&gt;Dan Bentley&lt;/a&gt; has made a great little &lt;a href=&quot;https://github.com/danbentley/placeholder&quot;&gt;jQuery placeholder plugin&lt;/a&gt; which polyfills older browsers that don't support the new HTML5 form attribute &lt;code&gt;placeholder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://github.com/danbentley/placeholder&quot;&gt;https://github.com/danbentley/placeholder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I'll readily admit that Dan has done 99% of the work here, but it has been something of a joint project in that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I actually made him build it cos he's amazing at JS and I needed it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I've added a tiny, tiny bit of CSS/UI behaviour.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There's my 1%.&lt;/p&gt;

&lt;p&gt;Anyway, follow &lt;a href=&quot;https://github.com/danbentley/placeholder&quot;&gt;the project on GitHub&lt;/a&gt;, follow &lt;a href=&quot;http://twitter.com/dan_bentley&quot;&gt;Dan on Twitter&lt;/a&gt; &lt;a href=&quot;https://github.com/danbentley/&quot;&gt;and GitHub&lt;/a&gt; and let us know if you use it!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On negative hovers</title>
   <link href="http://inuitcss.com/2011/05/on-negative-hovers"/>
   <updated>2011-05-18T20:26:07+01:00</updated>
   <id>http://inuitcss.com/2011/05/on-negative-hovers</id>
   <content type="html">&lt;p&gt;I've been &lt;del&gt;mentioning&lt;/del&gt; moaning about something called &lt;em&gt;negative hovers&lt;/em&gt; on Twitter for ages now, so it's about time I wrote a quick post on them.&lt;/p&gt;

&lt;p&gt;At their most basic a negative hover is a link whose appearance is subtracted from on hover rather than added to. This might mean they go from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Normal
  On `:hover`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dark colour&lt;/p&gt;

&lt;p&gt;Paler colour&lt;/p&gt;

&lt;p&gt;Underlined&lt;/p&gt;

&lt;p&gt;Not underlined&lt;/p&gt;

&lt;p&gt;A background&lt;/p&gt;

&lt;p&gt;No background&lt;/p&gt;

&lt;p&gt;Or any combination of the above.&lt;/p&gt;

&lt;p&gt;It is in my (and lots of other people's) opinion that these are a &lt;em&gt;bad thing&lt;/em&gt;. Here I'll try and explain why I don't like them. Be sure to look at &lt;a href=&quot;http://jsfiddle.net/csswizardry/WtNqs/&quot;&gt;the negative hovers example&lt;/a&gt; so the rest makes sense to you.&lt;/p&gt;

&lt;h2&gt;Spot the odd one out&lt;/h2&gt;

&lt;p&gt;Hovering any of the links in the list or the paragraph removes their underline or background which puts them on the back seat, surrounded by the overpowering underlines/backgrounds of the other links surrounding it. The hovered link is the odd one out, but in the wrong direction. The odd one out should be &lt;em&gt;more&lt;/em&gt; apparent than its neighbours, not less.&lt;/p&gt;

&lt;p&gt;Hover &lt;a href=&quot;http://jsfiddle.net/csswizardry/WtNqs/&quot;&gt;any link on this page&lt;/a&gt; and see how hard it is to quickly see which one is hovered. It's pretty difficult, because its appearance is so much more modest than the links that aren't even being hovered at all!&lt;/p&gt;

&lt;p&gt;Now compare that with &lt;a href=&quot;http://jsfiddle.net/csswizardry/aj6sN/&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Imagine a user has tabbed to those link. They don't have their mouse cursor over the 'current' link as a visual cue, they're lost looking for an non-underlined link in a sea of underlined ones. This makes the whole experience more difficult than it needs to be.&lt;/p&gt;

&lt;h2&gt;Underlines are obtrusive&lt;/h2&gt;

&lt;p&gt;Underlines are just plain ugly. Especially when you've got a few links in continuous text. If you start off with underlined links all you can notice &lt;em&gt;is&lt;/em&gt; lines. The text becomes secondary to the underlined links and that makes reading and scanning a chore. You don't want to interrupt someone's reading experience with unsightly underlines.&lt;/p&gt;

&lt;h2&gt;Intuition&lt;/h2&gt;

&lt;p&gt;The least quantifiable/solid argument is that &lt;em&gt;it just feels wrong&lt;/em&gt;. That doesn't sound like a great argument, but bear with me...&lt;/p&gt;

&lt;p&gt;If you hover or &lt;em&gt;act&lt;/em&gt; on something in a positive way (giving it attention, wanting to perform something), you would expect that to respond in a positive way, right? If you want to click a link that will, say, take you to another page, you don't want that link to 'shy away' from you, do you? It feels more intuitive that that link would 'stand forward' and act positively, becoming more-than-it-was as soon as you focus your attention upon it.&lt;/p&gt;

&lt;p&gt;As a UI designer/developer I think this 'feeling' speaks volumes. It doesn't seem right that a positive* action would result in a negative appearance...&lt;/p&gt;

&lt;p&gt;*Positive meaning 'doing something', even if that something is negative (such as a deletion). Does that even make sense?&lt;/p&gt;

&lt;h2&gt;The answer?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/csswizardry/aj6sN/&quot;&gt;Positive hovers&lt;/a&gt;, of course!&lt;/p&gt;

&lt;p&gt;If you started with a pale blue, make it darker on &lt;code&gt;:hover&lt;/code&gt;. If you started on a non-underlined link, underline it on hover, or give it a background colour. Simply make its appearance &lt;em&gt;more&lt;/em&gt; than what it was before you hovered it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Normal
  On `:hover`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No underline&lt;/p&gt;

&lt;p&gt;Darken/increase contrast&lt;/p&gt;

&lt;p&gt;Underlined&lt;/p&gt;

&lt;p&gt;Underlined&lt;/p&gt;

&lt;p&gt;Add a background colour&lt;/p&gt;

&lt;p&gt;Darken/increase contrast&lt;/p&gt;

&lt;p&gt;Background&lt;/p&gt;

&lt;p&gt;Underlined&lt;/p&gt;

&lt;p&gt;Darken/increase contrast&lt;/p&gt;

&lt;h3&gt;Issues&lt;/h3&gt;

&lt;p&gt;There is only one issue I can think of, specifically when starting off non-underlined; accessibility. Colour blind users may not necessarily be able to distinguish a link based on colour alone. Try and use a decent contrasting colour to avoid this...&lt;/p&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;So there you have my thoughts on negative hovers. They're counter-intuitive and can be obtrusive, but do you agree? Let me know! I'd be interested to hear any counter arguments.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing inuit.css</title>
   <link href="http://inuitcss.com/2011/04/introducing-inuit-css"/>
   <updated>2011-04-20T21:33:36+01:00</updated>
   <id>http://inuitcss.com/2011/04/introducing-inuit-css</id>
   <content type="html">&lt;p&gt;I've just put a new project live--&lt;a href=&quot;http://inuitcss.com/&quot;&gt;inuit.css&lt;/a&gt;. inuit.css is a sensible, production-ready and actually useful CSS framework. It doesn't do much styling, but does a lot of nifty, functional things that most people should find useful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://inuitcss.com/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2011/04/inuit-logo.jpg&quot; alt=&quot;inuit.css logo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The framework aims to tackle real problems and remove the boring, repetitive jobs that development sometimes brings. Follow &lt;a href=&quot;http://twitter.com/inuitcss&quot;&gt;@inuitcss&lt;/a&gt; for update info and release news, as well as being able to suggest new features and report bugs.&lt;/p&gt;

&lt;p&gt;Massive thanks to &lt;a href=&quot;http://www.bryanjamesdesign.co.uk/&quot;&gt;Bryan James&lt;/a&gt; for the amazing logo and illustration work. &lt;a href=&quot;http://twitter.com/WengersToyBus&quot;&gt;Follow him on Twitter&lt;/a&gt;--he's one of the best designers I've &lt;em&gt;ever&lt;/em&gt; met.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Two years of Tweets</title>
   <link href="http://inuitcss.com/2011/03/two-years-of-tweets"/>
   <updated>2011-03-16T11:58:37+00:00</updated>
   <id>http://inuitcss.com/2011/03/two-years-of-tweets</id>
   <content type="html">&lt;p&gt;So today marks exactly two years of Twitter. I registered the &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;@csswizardry&lt;/a&gt; account on March 16, 2009...&lt;/p&gt;

&lt;p&gt;This post is to say thanks to all of you for following, reading, sharing, commenting, improving and shaping the articles and projects I've worked on over the last 24 months.&lt;/p&gt;

&lt;p&gt;Twitter has been monumental in my online success and--as a result--my career as a whole. That account would have been useless without people reading it, so thank you all for giving it a purpose.&lt;/p&gt;

&lt;p&gt;Also, a thank you in particular to my friends at &lt;a href=&quot;http://smashingmagazine.com/&quot;&gt;Smashing Magazine&lt;/a&gt; who have been Tweeting and sharing my articles etcetera for a large chunk of those two years--it is these Tweets in particular that have led to mass exposure and no doubt brought a lot of you who're reading this to CSS Wizardry in the first place!&lt;/p&gt;

&lt;p&gt;So, here's to the next two years!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Harry&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ideas of March</title>
   <link href="http://inuitcss.com/2011/03/ideas-of-march"/>
   <updated>2011-03-15T13:11:26+00:00</updated>
   <id>http://inuitcss.com/2011/03/ideas-of-march</id>
   <content type="html">&lt;p&gt;Chris Shiflett has started something pretty cool--the &lt;a href=&quot;http://shiflett.org/blog/2011/mar/ideas-of-march&quot;&gt;Ideas of March movement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I tend to write quite a lot, but I Tweet a &lt;em&gt;lot&lt;/em&gt; more. I love my blog, but sometimes I do, I'll admit, get lazy.&lt;/p&gt;

&lt;p&gt;I've been on Twitter two years tomorrow (expect a post) but this is why I love blogging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Blogs expand on important ideas, on Twitter the message takes a back seat to the medium.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blogs give context, a Tweet out of context is a dangerous thing!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can meter response/popularity of a blog post better than a Tweet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blogs are (more) permanent, tweets get buried/lost pretty quickly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Feedback is admittedly slower with a blog, but more in-depth.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blogs are editable, updatable and collaborative. Tweets are deleted or superseded, blog posts are updated and discussed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A blog is &lt;em&gt;your&lt;/em&gt; space, you share Twitter with people like Charlie Sheen...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tweets are disposable, a good blog post takes time, effort and craft.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With a blog you can concentrate on how good your message is, on Twitter you just concentrate on getting it said in 140 characters.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Twitter is an excellent medium, and one to which I owe a lot, but for me Twitter &lt;em&gt;supports&lt;/em&gt; this blog. If you write, join &lt;a href=&quot;http://search.twitter.com/search?q=%23ideasofmarch&quot;&gt;#ideasofmarch&lt;/a&gt; and let's start a blog revival.&lt;/p&gt;

&lt;h2&gt;Join in&lt;/h2&gt;

&lt;p&gt;Join in, it's simple!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Write a post called Ideas of March.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List some of the reasons you like blogs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pledge to blog more the rest of the month.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Share your thoughts on Twitter with the &lt;a href=&quot;http://search.twitter.com/search?q=%23ideasofmarch&quot;&gt;#ideasofmarch&lt;/a&gt; hashtag.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Coding up a semantic, lean timeline</title>
   <link href="http://inuitcss.com/2011/03/coding-up-a-semantic-lean-timeline"/>
   <updated>2011-03-14T18:54:26+00:00</updated>
   <id>http://inuitcss.com/2011/03/coding-up-a-semantic-lean-timeline</id>
   <content type="html">&lt;p&gt;I absolutely love coding up the more semantic aspects of a build. Usually forms and tables, it's these massively semantic (read; lots of elements with very specific jobs) that I really love coming up against. They're not all that challenging, but they're very fun (to me at least--is that sad?!)&lt;/p&gt;

&lt;p&gt;After &lt;a href=&quot;http://twitter.com/walshybhoy&quot;&gt;Séan&lt;/a&gt; shared &lt;a href=&quot;http://aboutus.ft.com/corporate-information/history/&quot;&gt;the Financial Times' timeline&lt;/a&gt; I got to wondering how I'd code my own (albeit massively more simple) timeline.&lt;/p&gt;

&lt;p&gt;This is what I came up with: &lt;a href=&quot;http://dl.dropbox.com/u/2629908/timeline/index.html&quot;&gt;HTML/CSS timeline&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;The markup&lt;/h2&gt;

&lt;p&gt;The markup is amazingly simple. Semantically I used an &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;. This was quite an obvious choice as this is an ordered list of events. I used one &lt;code&gt;id=&quot;&quot;&lt;/code&gt; and some supporting &lt;code&gt;datetime&lt;/code&gt; attributes where known (some exact dates are unknown, therefore not included (hopefully you'll know your exact dates!)), and then that's it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;ol id=&quot;timeline&quot;&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;time datetime=&quot;1990-07-04&quot;&amp;gt;July 1990&amp;lt;/time&amp;gt;
    &amp;lt;p&amp;gt;Born&amp;lt;/p&amp;gt;
  &amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;time&amp;gt;September 1994&amp;lt;/time&amp;gt;
    &amp;lt;p&amp;gt;Started first school&amp;lt;/p&amp;gt;
  &amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;time&amp;gt;September 1999&amp;lt;/time&amp;gt;
    &amp;lt;p&amp;gt;Started middle school&amp;lt;/p&amp;gt;
  &amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;time&amp;gt;September 2003&amp;lt;/time&amp;gt;
    &amp;lt;p&amp;gt;Started high school&amp;lt;/p&amp;gt;
  &amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;time&amp;gt;September 2006&amp;lt;/time&amp;gt;
    &amp;lt;p&amp;gt;Started 6th Form&amp;lt;/p&amp;gt;
  &amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;time datetime=&quot;2007-11-19&quot;&amp;gt;November 2007&amp;lt;/time&amp;gt;
    &amp;lt;p&amp;gt;Registered csswizardry.com&amp;lt;/p&amp;gt;
  &amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;time datetime=&quot;2008-07-14&quot;&amp;gt;July 2008&amp;lt;/time&amp;gt;
    &amp;lt;p&amp;gt;Joined Sense Internet as Web Developer&amp;lt;/p&amp;gt;
  &amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;time datetime=&quot;2009-03-16&quot;&amp;gt;March 2009&amp;lt;/time&amp;gt;
    &amp;lt;p&amp;gt;Joined Twitter&amp;lt;/p&amp;gt;
  &amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;time datetime=&quot;2010-01-11&quot;&amp;gt;January 2010&amp;lt;/time&amp;gt;
    &amp;lt;p&amp;gt;Joined Venturelab as Web Developer&amp;lt;/p&amp;gt;
  &amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;time&amp;gt;January 2011&amp;lt;/time&amp;gt;
    &amp;lt;p&amp;gt;Became a member of the Smashing Magazine Experts Panel&amp;lt;/p&amp;gt;
  &amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;time datetime=&quot;2011-03-21&quot;&amp;gt;March 2011&amp;lt;/time&amp;gt;
    &amp;lt;p&amp;gt;Joined Sky as Senior UI Developer&amp;lt;/p&amp;gt;
  &amp;lt;/li&amp;gt;

&amp;lt;/ol&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was initially marking the dates up as &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;s but as &lt;a href=&quot;http://twitter.com/Renniks/&quot;&gt;Mark&lt;/a&gt; pointed out &lt;a href=&quot;http://twitter.com/Renniks/status/47336115753070592&quot;&gt;I could use the new HTML5 &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; element&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;The CSS&lt;/h2&gt;

&lt;p&gt;As far as basic styling goes, I won't insult your intelligence; I merely set some type styles and background colours on the list items.&lt;/p&gt;

&lt;p&gt;The really interesting bits are the odd/even styling, the 'spine', the dot and arrow 'images' and the branches off the centre of the timeline. I put images in quotes because they're not actually images at all, they're &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; pseudo-elements.&lt;/p&gt;

&lt;h3&gt;The spine&lt;/h3&gt;

&lt;p&gt;The spine running down the timeline is actually an image and is applied as a background using the fantastic &lt;a href=&quot;http://dummyimage.com/&quot;&gt;Dummy Image&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#timeline{
  &amp;lt;mark&amp;gt;background:url(http://dummyimage.com/1x1/f43059/f43059.gif) top center repeat-y;&amp;lt;/mark&amp;gt;
  width:820px;
  padding:50px 0;
  margin:0 auto 50px auto;
  overflow:hidden;
  list-style:none;
  position:relative;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The arrow and dot&lt;/h3&gt;

&lt;p&gt;The arrow and dot, as mentioned above, are actually pseudo-elements. Their CSS is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#timeline:before, &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* The dot */&amp;lt;/span&amp;gt;
#timeline:after{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* The arrow */&amp;lt;/span&amp;gt;
  content:&quot; &quot;;
  width:10px;
  height:10px;
  display:block;
  background:#f43059;
  position:absolute;
  top:0;
  left:50%;
  margin-left:-5px;

  -moz-border-radius:20px;
  -webkit-border-radius:20px;
  border-radius:20px;
}
#timeline:after{
  margin-left:-7px;
  background:none;
  border:7px solid #f43059;
  border-color:#f43059 transparent transparent transparent;
  width:0;
  height:0;
  top:auto;
  bottom:-7px;

  -moz-border-radius:0;
  -webkit-border-radius:0;
  border-radius:0;
}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we've created two empty pseudo-elements that are shaped like an arrow and a dot and then absolutely position them at the top and bottom of the ordered list. They sit over the top of the spine, giving the illusion of all being connected.&lt;/p&gt;

&lt;p&gt;It's worth saying that I'm not actually a fan of &lt;a href=&quot;http://jonrohan.me/guide/css/creating-triangles-in-css/&quot;&gt;the border-arrow behaviour&lt;/a&gt;, but this &lt;em&gt;is&lt;/em&gt; an experimental piece.&lt;/p&gt;

&lt;h3&gt;The branches&lt;/h3&gt;

&lt;p&gt;The branches that span between the list items and the spine are, again, pseudo elements. They are 70px wide and 1px high and have a gradient background which transitions from the colour of the spine to the colour of the list items. The CSS powering those is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#timeline li:before,
#timeline li:after{
  content:&quot; &quot;;
  width:70px;
  height:1px;
  background:#f43059;
  position:absolute;
  left:100%;
  top:50%;
  background:-moz-linear-gradient(0,#d8d566,#f43059);
  background:-webkit-gradient(linear,left top,right top,from(#d8d566),to(#f43059));
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So by now we've added start and end points, a spine and branches to our timeline with no extra markup whatsoever. Lean!&lt;/p&gt;

&lt;h3&gt;Odd/even styling&lt;/h3&gt;

&lt;p&gt;The odd/even styling of each list item is achieved, as you might expect, using &lt;code&gt;nth-of-type()&lt;/code&gt; selectors. What we do is move every even list item over the right of the &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; and move its branch to attach to the spine accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#timeline li:nth-of-type(even){
  float:right;
  text-align:left;
}
#timeline li:nth-of-type(even):after{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Move branches */&amp;lt;/span&amp;gt;
  background:-moz-linear-gradient(0,#f43059,#d8d566);
  background:-webkit-gradient(linear,left top,right top,from(#f43059),to(#d8d566));
  left:auto;
  right:100%;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;CSS feature detection?&lt;/h2&gt;

&lt;p&gt;This next bit I found quite cool, though a little unorthodox. I set the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s to have a negative &lt;code&gt;margin-top&lt;/code&gt; so that they had a slightly overlapped effect on the timeline, so either side is not below the previous one, rather &lt;em&gt;next to&lt;/em&gt; and &lt;em&gt;slightly&lt;/em&gt; along-side it.&lt;/p&gt;

&lt;p&gt;The problem I had here is that, in browsers that don't support &lt;code&gt;nth-of-type()&lt;/code&gt; selectors, the list items bunched up, each one slightly covering the previous one.&lt;/p&gt;

&lt;p&gt;What I did was use this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#timeline li:nth-of-type(odd),
#timeline li:nth-of-type(even){
  margin:-10px 0 0 0;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which basically says &lt;em&gt;if the browser supports &lt;code&gt;nth-of-type()&lt;/code&gt; selectors then give the list items a negative &lt;code&gt;margin-top&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Any browsers that don't support &lt;code&gt;nth-of-type()&lt;/code&gt; selectors get the previously defined margin value for the list items, set here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#timeline li{
  position:relative;
  clear:both;
  float:left;
  width:318px;
  padding:10px;
  background:#fef8c4;
  border:1px solid #d8d566;
  text-align:right;
  &amp;lt;mark&amp;gt;margin:0 0 10px 0;&amp;lt;/mark&amp;gt;

  -moz-border-radius:2px;
  -webkit-border-radius:2px;
  border-radius:2px;
  -moz-box-shadow:0 1px #fff inset;
  -webkit-box-shadow:0 1px #fff inset;
  box-shadow:0 1px #fff inset;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I guess you could call that a small kind of feature detection...?&lt;/p&gt;

&lt;p&gt;However, whatever you call it, it means that IE8 users still get a pretty good experience, a linear, one column timeline with no &lt;code&gt;nth-of-type()&lt;/code&gt; styling:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2011/03/ie8.jpg&quot; alt=&quot;Timeline screenshot in IE8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IE7 however doesn't support pseudo-elements or &lt;code&gt;nth-of-type()&lt;/code&gt; selectors, so they just get a single column list with no branches or dots/arrows but they do get a lonely spine...&lt;/p&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;So &lt;a href=&quot;http://dl.dropbox.com/u/2629908/timeline/index.html&quot;&gt;there we have it&lt;/a&gt;, a super lean, semantic and progressively styled timeline in HTML and CSS and one image. No doubt you could make a completely imageless solution, but I'm personally not one for this 'never use images' phase that the industry seems to be going through…&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Link: Technical Web Typography: Guidelines and Techniques</title>
   <link href="http://inuitcss.com/2011/03/link-technical-web-typography-guidelines-and-techniques"/>
   <updated>2011-03-14T15:52:30+00:00</updated>
   <id>http://inuitcss.com/2011/03/link-technical-web-typography-guidelines-and-techniques</id>
   <content type="html">&lt;p&gt;An article I wrote for Smashing Magazine has &lt;a href=&quot;http://www.smashingmagazine.com/2011/03/14/technical-web-typography-guidelines-and-techniques/&quot;&gt;just gone live&lt;/a&gt;. It's all about technical, micro-typography and how it can be used to great effect on the web. It won't teach you how to be a better designer, but it should show you how to best set type on the web.&lt;/p&gt;

&lt;p&gt;It's a pretty epic offering but I assure you, it's worth it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2011/03/14/technical-web-typography-guidelines-and-techniques/&quot;&gt;http://www.smashingmagazine.com/[...]/technical-web-typography-guidelines-and-techniques/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;p&gt;It is worth noting that Wordpress' editor has stripped some of the semantic and (ironically) typographical niceties from the post. I have a semantically rich original copy knocking about that I drafted the article up in (in HTML)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Problems with the sans-serif hack</title>
   <link href="http://inuitcss.com/2011/03/problems-with-the-sans-serif-hack"/>
   <updated>2011-03-01T09:43:26+00:00</updated>
   <id>http://inuitcss.com/2011/03/problems-with-the-sans-serif-hack</id>
   <content type="html">&lt;p&gt;Chris Coyier's &lt;a href=&quot;http://css-tricks.com/sans-serif/&quot;&gt;sans-serif hack article&lt;/a&gt; has been doing its rounds lately, however it isn't without its drawbacks... and it &lt;em&gt;is&lt;/em&gt; a hack.&lt;/p&gt;

&lt;p&gt;For those who aren't familiar with it, the trick is to specify &lt;code&gt;font-family:sans-serif;&lt;/code&gt; as opposed to a detailed font stack in order to serve Helvetica to a Mac and Arial to a PC. Helvetica doesn't look too great as body copy on a PC, and using Arial on a Mac where you could be using Helvetica seems daft, so enter the sans-serif hack; each OS gets its default.&lt;/p&gt;

&lt;p&gt;However there are problems.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;What if the user has changed their system's default sans?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are more platforms than Mac and PC...&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The chances of a user altering their default sans is admittedly pretty slim, but it could certainly be a possibility. And who's to say that the OS vendors themselves won't change the default sans? What if the next Windows release starts using Calibri as its default? Then you're serving Helvetica on a Mac, Calibri on Windows 8 and Arial on Windows 7 and under. This is speculation, but worth bearing in mind.&lt;/p&gt;

&lt;p&gt;The second issue lies with the fact that it assumes everyone has either a PC or a Mac... according to &lt;a href=&quot;http://ubuntuforums.org/showthread.php?t=1675235&quot;&gt;this forum entry&lt;/a&gt; the default sans on Ubuntu is &lt;em&gt;DejaVu Sans&lt;/em&gt;. I have no definite confirmation of this so if anyone has a definite answer please let me know. A number of people have told me the latest sans on Unbuntu is, well &lt;em&gt;Ubuntu&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The hack itself is kinda useful, and I've used it myself. I actually write about it in an upcoming article I've written for Smashing Magazine where I &lt;em&gt;do&lt;/em&gt; actually elaborate on the drawbacks.&lt;/p&gt;

&lt;p&gt;Furthermore, I have actually used this hack myself before. It's not the worst hack in the world, but it's vital to understand that it &lt;em&gt;is a hack&lt;/em&gt;, and what its implications are.&lt;/p&gt;

&lt;p&gt;It's a shame that Chris didn't outline these himself in his article, but several readers have left comments to this effect.&lt;/p&gt;

&lt;p&gt;Don't just use code out-of-the-box, look at its flaws and understand them fully before putting anything into practice.&lt;/p&gt;

&lt;h2&gt;Addendum&lt;/h2&gt;

&lt;p&gt;Okay so one or two people have said that this isn't a hack. In &lt;em&gt;this context&lt;/em&gt; it is, and here's why...&lt;/p&gt;

&lt;p&gt;It exploits a behaviour that we cannot be certain of. That's what hacks do… You're using code that will only work on hope and chance to serve a specific font. You're exploiting an inexplicit feature (standard fonts) to achieve an explicit effect. The motivation behind serving up a specific font based on chance and hope is nothing &lt;strong&gt;but&lt;/strong&gt; a hack, and hacks are bad…&lt;/p&gt;

&lt;p&gt;In the context of saying 'Hey, I really don't mind what font this site uses, the users' preference will do just fine' then this isn't a hack, &lt;em&gt;you know what the outcome will be&lt;/em&gt;, you &lt;em&gt;want&lt;/em&gt; the default. If you're hoping that that default will be Helvetica or Arial, then you can't be certain. You're leveraging a &lt;em&gt;possibility&lt;/em&gt;. You're using a hack.&lt;/p&gt;

&lt;h3&gt;Update&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/nicepaul&quot;&gt;Paul Annett&lt;/a&gt; just shared &lt;a href=&quot;http://blog.mhurrell.co.uk/post/2946358183/updating-the-helvetica-font-stack&quot;&gt;an interesting article with me along similar lines&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mobile business card</title>
   <link href="http://inuitcss.com/2011/02/mobile-business-card"/>
   <updated>2011-02-22T23:07:29+00:00</updated>
   <id>http://inuitcss.com/2011/02/mobile-business-card</id>
   <content type="html">&lt;p&gt;Business card style sites are nothing new. &lt;a href=&quot;http://timvandamme.com/&quot;&gt;Tim Van Damme&lt;/a&gt; popularised them a while ago and they're a handy tool for relaying the most basic and important information about yourself in a very short space of time. I made &lt;a href=&quot;/profile/&quot;&gt;my own business card type site&lt;/a&gt; recently (and &lt;a href=&quot;http://twitter.com/#!/csswizardry/status/36048647212761088&quot;&gt;tweeted about its self-indulgence&lt;/a&gt;) and put some nifty CSS to work--a digital business card whose content changes when you rotate your mobile.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/profile/&quot;&gt;Here it is&lt;/a&gt;. Visit this on a desktop browser and in a smartphone (and then try rotating the device).&lt;/p&gt;

&lt;p&gt;I was inspired after I saw &lt;a href=&quot;http://www.engageinteractive.co.uk/&quot;&gt;Engage Interactive's&lt;/a&gt; iPhone site in &lt;a href=&quot;http://twitter.com/nicepaul&quot;&gt;Paul Annett&lt;/a&gt;'s .net magazine article whilst on the train. I only had my iPhone with me which meant that, although in the ideal viewing medium, I wasn't able to pick apart any source. As my mind so frequently does, I started coding up a 'my version' in my head.&lt;/p&gt;

&lt;p&gt;After building mine I went and found that Engage's iPhone site uses JavaScript and works solely on an iPhone (I imagine some for of browser sniffing is used to detect it). This gives them increased functionality as they have horizontal-left and horizontal-right; I only have horizontal but I wanted a device independent site that would work using &lt;em&gt;only&lt;/em&gt; CSS.&lt;/p&gt;

&lt;p&gt;Read on for the how-to...&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;The code&lt;/h2&gt;

&lt;p&gt;What we have here is a page with personal and contact information. We have three possible states: desktop, mobile-portrait and mobile-landscape.&lt;/p&gt;

&lt;p&gt;The stacked paper effect is achieved by replicating the appearance of the page &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in both a &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; pseudo-element, giving these a negative &lt;code&gt;z-index&lt;/code&gt; and then rotating them. This effect is achieved with no extra markup or images.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- Markup --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;div id=&quot;page&quot;&amp;gt;

  &amp;lt;div id=&quot;about&quot;&amp;gt;

    [content]

  &amp;lt;/div&amp;gt;

  &amp;lt;div id=&quot;contact&quot;&amp;gt;

    [content]

  &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
#page{
  position:relative;
  margin:0 auto;
  padding:20px 20px 0 20px;
  border:10px solid #f0f0f0;
  background:#fff;
  width:400px;

  -moz-box-shadow:0 0 10px rgba(0,0,0,0.25);
  -webkit-box-shadow:0 0 10px rgba(0,0,0,0.25);
  -o-box-shadow:0 0 10px rgba(0,0,0,0.25);
  box-shadow:0 0 10px rgba(0,0,0,0.25);
}
#page:before,
#page:after{
  content:&quot; &quot;;
  display:block;
  border:10px solid #f0f0f0;
  background:#fff;
  z-index:-1;
  position:absolute;
  top:-10px;
  right:-10px;
  bottom:-10px;
  left:-10px;

  -moz-box-shadow:0 0 10px rgba(0,0,0,0.25);
  -webkit-box-shadow:0 0 10px rgba(0,0,0,0.25);
  -o-box-shadow:0 0 10px rgba(0,0,0,0.25);
  box-shadow:0 0 10px rgba(0,0,0,0.25);
  -moz-transform:rotate(1deg);
  -webkit-transform:rotate(1deg);
  -o-transform:rotate(1deg);
  transform:rotate(1deg);
}
#page:after{
  z-index:-2;
  -moz-transform:rotate(-1.5deg);
  -webkit-transform:rotate(-1.5deg);
  -o-transform:rotate(-1.5deg);
  transform:rotate(-1.5deg);
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each type of content is wrapped in its own &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. This may, at first, seem extraneous but these are the hooks used to toggle the content displayed on mobile devices in different orientations. If your browser is portrait then hide the contact &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, if it is landscape them hide the about &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hide each &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; by absolutely positioning it way off to the left of the screen. This offers more accessibility than a simple &lt;code&gt;display:none;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;@media (max-width: 480px) and (orientation: portrait){

#contact{
  position:absolute;
  left:-9999px;
}

}
@media (max-width: 480px) and (orientation: landscape){

#about{
  position:absolute;
  left:-9999px;
}

}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Further, when the page loads on a mobile device an overlay animates in and out with some Webkit animations, telling the user to ‘Try rotating your phone...’&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- Markup --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;div id=&quot;mask&quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;p id=&quot;instructions&quot;&amp;gt;Try rotating your phone…&amp;lt;/p&amp;gt;


&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  INSTRUCTIONS
\*------------------------------------*/&amp;lt;/span&amp;gt;
#mask,
#instructions{
  display:block;
  -webkit-animation-duration:3s;
  -webkit-animation-iteration-count:1;
  -webkit-animation-timing-function:linear;
}
#mask{
  position:absolute;
  left:-9999px;
  background:rgba(0,0,0,0.75);
  z-index:2;
  -webkit-animation-name:mask;
}
@-webkit-keyframes mask{
0%{
  opacity:0;
}
10%{
  opacity:1;
  top:0;
  right:0;
  bottom:0;
}
90%{
  opacity:1;
  top:0;
  right:0;
  bottom:0;
}
99%{
  opacity:0;
  top:0;
  right:0;
  bottom:0;
}
100%{
  opacity:0;
}
}
#instructions{
  font-family:Calibri, sans-serif; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Using a non-Typekit face to try and alleviate the delay in text-display */&amp;lt;/span&amp;gt;
  width:200px;
  position:absolute;
  top:-9999px;
  left:50%;
  background:rgba(0,0,0,0.75);
  z-index:3;
  padding:10px;
  background:#fef8c4;
  border:1px solid #d8d566;
  margin:-12px 0 0 -100px;
  font-weight:bold;
  text-align:center;

  -moz-box-shadow:0 0 10px rgba(0,0,0,0.75),0 1px #fff inset;
  -webkit-box-shadow:0 0 10px rgba(0,0,0,0.75),0 1px #fff inset;
  -o-box-shadow:0 0 10px rgba(0,0,0,0.75),0 1px #fff inset;
  box-shadow:0 0 10px rgba(0,0,0,0.75),0 1px #fff inset;
  -webkit-animation-name:message;
}
@-webkit-keyframes message{
0%{
  opacity:0;
}
10%{
  opacity:1;
  top:50%;
  left:50%;
}
90%{
  opacity:1;
  top:50%;
  left:50%;
}
99%{
  opacity:0;
  top:50%;
  left:50%;
}
100%{
  opacity:0;
}
}

}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another thing to note; the image in the page is used as an inline image, the favicon &lt;em&gt;and&lt;/em&gt; the iPhone homescreen icon. The same image has been reused three times, this isn’t anything amazing but it means only one request over a mobile connection.&lt;/p&gt;

&lt;h2&gt;Issues&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/suzehaworth&quot;&gt;Suze&lt;/a&gt; bought me &lt;a href=&quot;http://typekit.com/&quot;&gt;Typekit&lt;/a&gt; recently which I thought I'd try out, however there is a little bug on mobile whereby Typekit prevents any text from displaying for a moment. The length of this 'moment' depends on the speed of your connection.&lt;/p&gt;

&lt;p&gt;Furthermore, the overlay mentioned previously is displayed with CSS based on resolution. Ideally you'd use a more robust method of writing this to the view than saying 'if the screen is really this small then use CSS to display the markup that is there anyway regardless of the device'. Resolution dependence isn't explicit enough because a) no matter what device you are on, the 'rotate you phone' text is always present in the markup and b) a 27&quot; iMac will display the text to the user is they resize their browser down far enough; a user can actually see the phone related text on a desktop if they resize enough.&lt;/p&gt;

&lt;p&gt;However, this was just a proof-of-concept idea just to see if I &lt;em&gt;could&lt;/em&gt; do it--I'm pretty pleased with the results.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Creating a pure CSS dropdown menu</title>
   <link href="http://inuitcss.com/2011/02/creating-a-pure-css-dropdown-menu"/>
   <updated>2011-02-17T09:47:44+00:00</updated>
   <id>http://inuitcss.com/2011/02/creating-a-pure-css-dropdown-menu</id>
   <content type="html">&lt;p&gt;In redeveloping the Venturelab site we became increasingly aware that there was a lot of content that needed navigating extremely simply and fairly rapidly. We have so much to say and such a lot of content that the navigation of the site needed to be even more dynamic and encompassing than normal.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://csswizardry.com/demos/css-dropdown/&quot;&gt;Demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This article has been ported from the now-defunct Venturelab Devblog, where I had originally authored it.&lt;/p&gt;

&lt;p&gt;Each page features a sub-navigation area, which links to all the other pages within that section of the website. This is great, and works perfectly, but in order to get to, say, &lt;a href=&quot;http://www.venturelab.co.uk/faq&quot;&gt;the FAQs&lt;/a&gt; page from the home page, you'd first have to go to &lt;a href=&quot;http://www.venturelab.co.uk/&quot;&gt;the about page&lt;/a&gt;, then on to the FAQs from there. This is by no means unacceptable, but we like to go that extra step at Venturelab…&lt;/p&gt;

&lt;p&gt;I was looking at the main menu of the site when inspiration struck. Something as common and simple as a series of dropdown menus under each meta menu item would improve the navigability and usability of the site massively. Also, they are incredibly simple to create, and here's where I teach you how…&lt;/p&gt;

&lt;h2&gt;The concept&lt;/h2&gt;

&lt;p&gt;What a dropdown menu provides is a hierarchical overview of the subsections contained within the menu item that spawned it. Basically, it lists all the subsections within a section of a site when you hover your mouse cursor over it.&lt;/p&gt;

&lt;p&gt;They are extremely useful in showing what a section of a site contains, and allowing you to access it from anyway else in that site, whether that be the parent page of that subsection, or a page in a different section altogether.&lt;/p&gt;

&lt;h2&gt;The markup&lt;/h2&gt;

&lt;p&gt;A lot of dropdown menus rely on bulky, extraneous markup  and Javascript to work, ours will use only the cleanest HTML and some lean CSS, with some lovely progressive CSS3 for good measure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;ul id=&quot;nav&quot;&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href=&quot;#&quot;&amp;gt;Home&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;

    &amp;lt;li&amp;gt;
        &amp;lt;a href=&quot;#&quot;&amp;gt;About&amp;lt;/a&amp;gt;
        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;The product&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Meet the team&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href=&quot;#&quot;&amp;gt;Services&amp;lt;/a&amp;gt;

        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Sevice one&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Sevice two&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Sevice three&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Sevice four&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;

    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href=&quot;#&quot;&amp;gt;Product&amp;lt;/a&amp;gt;
        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Small product (one)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Small product (two)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Small product (three)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Small product (four)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Big product (five)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Big product (six)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Big product (seven)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Big product (eight)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Enourmous product (nine)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Enourmous product (ten)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Enourmous product (eleven)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href=&quot;#&quot;&amp;gt;Contact&amp;lt;/a&amp;gt;

        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Out-of-hours&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Directions&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

        &amp;lt;/ul&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see here the markup is simply a series of nested &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;s. No verbose IDs/classes, no &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s, just rich, semantic code.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#nav&lt;/code&gt; &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; contains a series of &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s, and any that require a dropdown then contain another &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;. Notice the dropdown &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;s have no classes on them--this is because we use the cascade to style these, keeping our markup even cleaner.&lt;/p&gt;

&lt;h2&gt;The CSS&lt;/h2&gt;

&lt;p&gt;This is where the magic happens--we use CSS to transform a series of nested &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;s into a smooth, easy to use, neat and self-contained dropdown menu.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* BE SURE TO INCLUDE THE CSS RESET FOUND IN THE DEMO PAGE'S CSS */&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    NAV
\*------------------------------------*/&amp;lt;/span&amp;gt;
#nav{
    list-style:none;
    font-weight:bold;
    margin-bottom:10px;
    &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Clear floats */&amp;lt;/span&amp;gt;
    float:left;
    width:100%;
    &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Bring the nav above everything else--uncomment if needed.
    position:relative;
    z-index:5;
    */&amp;lt;/span&amp;gt;
}
#nav li{
    float:left;
    margin-right:10px;
    position:relative;
}
#nav a{
    display:block;
    padding:5px;
    color:#fff;
    background:#333;
    text-decoration:none;
}
#nav a:hover{
    color:#fff;
    background:#6b0c36;
    text-decoration:underline;
}

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*--- DROPDOWN ---*/&amp;lt;/span&amp;gt;
#nav ul{
    background:#fff; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Adding a background makes the dropdown work properly in IE7+. Make this as close to your page's background as possible (i.e. white page == white background). */&amp;lt;/span&amp;gt;
    background:rgba(255,255,255,0); &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* But! Let's make the background fully transparent where we can, we don't actually want to see it if we can help it... */&amp;lt;/span&amp;gt;
    list-style:none;
    position:absolute;
    left:-9999px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Hide off-screen when not needed (this is more accessible than display:none;) */&amp;lt;/span&amp;gt;
}
#nav ul li{
    padding-top:1px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Introducing a padding between the li and the a give the illusion spaced items */&amp;lt;/span&amp;gt;
    float:none;
}
#nav ul a{
    white-space:nowrap; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Stop text wrapping and creating multi-line dropdown items */&amp;lt;/span&amp;gt;
}
#nav li:hover ul{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Display the dropdown on hover */&amp;lt;/span&amp;gt;
    left:0; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Bring back on-screen when needed */&amp;lt;/span&amp;gt;
}
#nav li:hover a{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* These create persistent hover states, meaning the top-most link stays 'hovered' even when your cursor has moved down the list. */&amp;lt;/span&amp;gt;
    background:#6b0c36;
    text-decoration:underline;
}
#nav li:hover ul a{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* The persistent hover state does however create a global style for links even before they're hovered. Here we undo these effects. */&amp;lt;/span&amp;gt;
    text-decoration:none;
}
#nav li:hover ul li a:hover{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Here we define the most explicit hover states--what happens when you hover each individual link. */&amp;lt;/span&amp;gt;
    background:#333;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just a regular horizontal navigation menu…&lt;/p&gt;

&lt;p&gt;Right, let's now break that down… The first section is fairly self explanatory--here we are just setting up a regular horizontal navigation menu, the same as any other. However, notice that selectors such as &lt;code&gt;#nav li&lt;/code&gt; and &lt;code&gt;#nav li a&lt;/code&gt; will select all list items and links in the dropdowns too. Here we're using the cascade sensibly.&lt;/p&gt;

&lt;p&gt;One thing of note however is applying &lt;code&gt;position:relative;&lt;/code&gt; to the list items, this allows us to use &lt;code&gt;position:absolute;&lt;/code&gt; on the nested &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;s later on.&lt;/p&gt;

&lt;h3&gt;The nested lists&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#nav ul{
    background:#fff; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Adding a background makes the dropdown work properly in IE7+. Make this as close to your page's background as possible (i.e. white page == white background). */&amp;lt;/span&amp;gt;
    background:rgba(255,255,255,0); &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* But! Let's make the background fully transparent where we can, we don't actually want to see it if we can help it... */&amp;lt;/span&amp;gt;
    list-style:none;
    position:absolute;
    left:-9999px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Hide off-screen when not needed (this is more accessible than display:none;) */&amp;lt;/span&amp;gt;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have the CSS that controls the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;s nested within the top level list items. Obviously we need to remove bullets with &lt;code&gt;list-style:none;&lt;/code&gt;, then &lt;code&gt;position:absolute;&lt;/code&gt; to position the dropdown above the list item that holds it.&lt;/p&gt;

&lt;p&gt;A better, more accessible solution than &lt;code&gt;display:none;&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;The next line however is a point of interest. Usually, most people would use &lt;code&gt;display:none;&lt;/code&gt; to hide the dropdown while it's not being used, but due to a lot of screenreaders ignoring anything with &lt;code&gt;display:none;&lt;/code&gt; applied, this is very inaccessible. What we do instead is take advantage of the fact the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; is absolutely positioned and just position it &lt;code&gt;-9999px&lt;/code&gt; off screen when not in use.&lt;/p&gt;

&lt;p&gt;Next up we declare &lt;code&gt;opacity:0;&lt;/code&gt; for the hidden &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and then a Webkit only declaration which will smoothly fade the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; in from fully transparent when hovered.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#nav ul li{
    padding-top:1px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Introducing a padding between the li and the a give the illusion spaced items */&amp;lt;/span&amp;gt;
    float:none;
}
#nav ul a{
    white-space:nowrap; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Stop text wrapping and creating multi-line dropdown items */&amp;lt;/span&amp;gt;
}
#nav li:hover ul{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Display the dropdown on hover */&amp;lt;/span&amp;gt;
    left:0; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Bring back on-screen when needed */&amp;lt;/span&amp;gt;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://www.venturelab.co.uk/devblog/wp-content/uploads/2010/06/gap.jpg&quot;&gt;&lt;img src=&quot;http://www.venturelab.co.uk/devblog/wp-content/uploads/2010/06/gap.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;em&gt;Above: The 1px gap achieved by the &lt;code&gt;padding-top:1px;&lt;/code&gt; applied to the list-item&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here we set up the default list item and link styles. Notice the padding-top:1px; on the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;. As all the colours etc are applied to the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, putting a 1px padding on the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; in effect pushes the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;--and therefore the colour--away from the edge of the list item, giving it the illusion that they are all separated. Interestingly, IE will not recognise the layout of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; when hovered, closing the dropdown again. To get round this, I added a &lt;a href=&quot;http://www.venturelab.co.uk/img/css/dot.gif&quot;&gt;1×1px transparent &lt;code&gt;gif&lt;/code&gt;&lt;/a&gt; image as a background. Also here we remove the floats applied earlier.&lt;/p&gt;

&lt;p&gt;Next, on &lt;code&gt;#nav ul a&lt;/code&gt;, we apply &lt;code&gt;white-space:nowrap;&lt;/code&gt; to prevent items wrapping onto two lines, ensuring a consistent display.&lt;/p&gt;

&lt;p&gt;And this is where the magic happens…&lt;/p&gt;

&lt;p&gt;The final bit of code is the bit that actually makes the dropdown appear when the list item that contains it is hovered. Now, as the &lt;code&gt;:hover&lt;/code&gt; pseudo-class only works on the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element in IE6, the dropdowns won't work in &lt;em&gt;that&lt;/em&gt; browser. That can be alleviated by using a variety of fixes. However, as dropdowns are progressive, then we're okay with them not working. If you do however want to get this working in IE6 then my favoured solutions is by &lt;a href=&quot;http://www.xs4all.nl/~peterned/csshover.html&quot;&gt;using &lt;em&gt;behaviours&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#nav li:hover a{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* These create persistent hover states, meaning the top-most link stays 'hovered' even when your cursor has moved down the list. */&amp;lt;/span&amp;gt;
    background:#6b0c36;
    text-decoration:underline;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gets tricky, but it &lt;em&gt;should&lt;/em&gt; make sense.&lt;/p&gt;

&lt;p&gt;This block of code here is where the hover styles come in, there's a bit of nifty code in there which controls what we'll call 'persisting hover states' on the top level item even when the user is hovering the dropdown items…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#nav li:hover a&lt;/code&gt; is what allows you to give the top level link a persisting hover state when hovering its 'children'. This works by styling every link inside a list-item when that list-item is hovered. This bit gets a bit tricky but bear with me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The dropdown &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; sits inside an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you are hovering over a link (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) in a dropdown (&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;) then you are also, at the same time, still hovering the top level list-item (&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) as you are hovering content inside it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because you are technically still hovering the top level list-item, the &lt;code&gt;#nav li:hover a&lt;/code&gt; remains true, leaving a persisting hover style on the top level list-item's &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; so…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;…by hovering a dropdown item you are still hovering the top level list-item which means the cascade still styles all links &lt;em&gt;in&lt;/em&gt; that list-item. Phew!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#nav li:hover ul a{ &lt;span class=&quot;code-comment&quot;&gt;/&lt;em&gt; The persistent hover state does however create a global style for links even before they're hovered. Here we undo these effects. &lt;/em&gt;/&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;text-decoration:none;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here we override certain aspects of the persisting hover state so that the dropdowns differ from the top level link. In this case we merely decide not to underline them.&lt;/p&gt;

&lt;p&gt;We also add a touch of Webkit goodness, telling the links to transform. &lt;code&gt;-webkit-transition:-webkit-transform 0.075s linear;&lt;/code&gt; tells Webkit to animate the &lt;code&gt;-webkit-transform&lt;/code&gt; we apply later on in the code over 0.075 seconds with no fade-in/out. Look out for the initiation of this in the next (and final) block of CSS.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#nav li:hover ul li a:hover{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Here we define the most explicit hover states--what happens when you hover each individual link. */&amp;lt;/span&amp;gt;
    background:#333;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/demos/css-dropdown/&quot;&gt;View demo…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, there you have it. A simple concept pulled off with some very lean markup and some clever CSS and progressive enhancement. It's totally accessible, the markup is semantic and sensible and it relies on no weighty Javascript libraries to work.&lt;/p&gt;

&lt;p&gt;Hopefully my write-up makes sense. but if anything is unclear leave a comment and one of us in &lt;a href=&quot;http://twitter.com/VenturelabDev&quot;&gt;the dev team&lt;/a&gt; will try and set you right. Or, you could just copy/paste the code and hack it apart for yourselves.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pure CSS(3) accordion</title>
   <link href="http://inuitcss.com/2011/02/pure-css3-accordion"/>
   <updated>2011-02-17T09:32:39+00:00</updated>
   <id>http://inuitcss.com/2011/02/pure-css3-accordion</id>
   <content type="html">&lt;p&gt;I tend to do a lot of tinkering with code, and came up with something that's not so new, but still, in my opinion, pretty cool. An accordion using nothing but semantic HTML, CSS and some nice progressive CSS3. There are also two versions, a horizontal one and a vertical one.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://csswizardry.com/demos/accordion/&quot;&gt;Demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This article has been ported from the now-defunct Venturelab Devblog, where I had originally authored it.&lt;/p&gt;

&lt;h2&gt;Horizontal accordion&lt;/h2&gt;

&lt;p&gt;Let's start with the markup for the horizontal accordion, it's really nothing special, just some good ol' semantic HTML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;ul class=&quot;accordion&quot;&amp;gt;

  &amp;lt;li class=&quot;slide-01&quot;&amp;gt;

    &amp;lt;div&amp;gt;

      &amp;lt;h2&amp;gt;Slide one&amp;lt;/h2&amp;gt;

      &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse id lobortis massa. Nunc viverra velit leo, sit amet elementum mi. Fusce posuere nunc a mi tempus malesuada. Curabitur facilisis rhoncus eros eget placerat. Aliquam semper mauris sit amet justo tempor nec lacinia magna molestie. Etiam placerat congue dolor vitae adipiscing. Aliquam ac erat lorem, ut iaculis justo. Etiam mattis dignissim gravida. Aliquam nec justo ante, non semper mi. Nulla consectetur interdum massa, vel porta enim vulputate sed. Maecenas elit quam, egestas eget placerat non, fringilla vel eros. Nam vehicula elementum nulla sed consequat. Phasellus eu erat enim. Praesent at magna non massa dapibus scelerisque in eu lorem.&amp;lt;/p&amp;gt;

    &amp;lt;/div&amp;gt;

  &amp;lt;/li&amp;gt;

  &amp;lt;li class=&quot;slide-02&quot;&amp;gt;

    &amp;lt;div&amp;gt;

      &amp;lt;h2&amp;gt;Slide two&amp;lt;/h2&amp;gt;

      &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse id lobortis massa. Nunc viverra velit leo, sit amet elementum mi. Fusce posuere nunc a mi tempus malesuada. Curabitur facilisis rhoncus eros eget placerat. Aliquam semper mauris sit amet justo tempor nec lacinia magna molestie. Etiam placerat congue dolor vitae adipiscing. Aliquam ac erat lorem, ut iaculis justo. Etiam mattis dignissim gravida. Aliquam nec justo ante, non semper mi. Nulla consectetur interdum massa, vel porta enim vulputate sed. Maecenas elit quam, egestas eget placerat non, fringilla vel eros. Nam vehicula elementum nulla sed consequat. Phasellus eu erat enim. Praesent at magna non massa dapibus scelerisque in eu lorem.&amp;lt;/p&amp;gt;

    &amp;lt;/div&amp;gt;

  &amp;lt;/li&amp;gt;

  &amp;lt;li class=&quot;slide-03&quot;&amp;gt;

    &amp;lt;div&amp;gt;

      &amp;lt;h2&amp;gt;Slide three&amp;lt;/h2&amp;gt;

      &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse id lobortis massa. Nunc viverra velit leo, sit amet elementum mi. Fusce posuere nunc a mi tempus malesuada. Curabitur facilisis rhoncus eros eget placerat. Aliquam semper mauris sit amet justo tempor nec lacinia magna molestie. Etiam placerat congue dolor vitae adipiscing. Aliquam ac erat lorem, ut iaculis justo. Etiam mattis dignissim gravida. Aliquam nec justo ante, non semper mi. Nulla consectetur interdum massa, vel porta enim vulputate sed. Maecenas elit quam, egestas eget placerat non, fringilla vel eros. Nam vehicula elementum nulla sed consequat. Phasellus eu erat enim. Praesent at magna non massa dapibus scelerisque in eu lorem.&amp;lt;/p&amp;gt;

    &amp;lt;/div&amp;gt;

  &amp;lt;/li&amp;gt;

  &amp;lt;li class=&quot;slide-04&quot;&amp;gt;

    &amp;lt;div&amp;gt;

      &amp;lt;h2&amp;gt;Slide four&amp;lt;/h2&amp;gt;

      &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse id lobortis massa. Nunc viverra velit leo, sit amet elementum mi. Fusce posuere nunc a mi tempus malesuada. Curabitur facilisis rhoncus eros eget placerat. Aliquam semper mauris sit amet justo tempor nec lacinia magna molestie. Etiam placerat congue dolor vitae adipiscing. Aliquam ac erat lorem, ut iaculis justo. Etiam mattis dignissim gravida. Aliquam nec justo ante, non semper mi. Nulla consectetur interdum massa, vel porta enim vulputate sed. Maecenas elit quam, egestas eget placerat non, fringilla vel eros. Nam vehicula elementum nulla sed consequat. Phasellus eu erat enim. Praesent at magna non massa dapibus scelerisque in eu lorem.&amp;lt;/p&amp;gt;

    &amp;lt;/div&amp;gt;

  &amp;lt;/li&amp;gt;

  &amp;lt;li class=&quot;slide-05&quot;&amp;gt;

    &amp;lt;div&amp;gt;

      &amp;lt;h2&amp;gt;Slide five&amp;lt;/h2&amp;gt;

      &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse id lobortis massa. Nunc viverra velit leo, sit amet elementum mi. Fusce posuere nunc a mi tempus malesuada. Curabitur facilisis rhoncus eros eget placerat. Aliquam semper mauris sit amet justo tempor nec lacinia magna molestie. Etiam placerat congue dolor vitae adipiscing. Aliquam ac erat lorem, ut iaculis justo. Etiam mattis dignissim gravida. Aliquam nec justo ante, non semper mi. Nulla consectetur interdum massa, vel porta enim vulputate sed. Maecenas elit quam, egestas eget placerat non, fringilla vel eros. Nam vehicula elementum nulla sed consequat. Phasellus eu erat enim. Praesent at magna non massa dapibus scelerisque in eu lorem.&amp;lt;/p&amp;gt;

    &amp;lt;/div&amp;gt;

  &amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have a simple unordered list containing a series of class-named list items and some content. Simple. The CSS is where it gets nifty:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  ACCORDION
\*------------------------------------*/&amp;lt;/span&amp;gt;
.accordion{
  width:940px;
  overflow:hidden;
  list-style:none;
  margin-bottom:10px;
  text-shadow:1px 1px 1px rgba(0,0,0,0.25);
  background:blue;

  -moz-border-radius:10px;
  -webkit-border-radius:10px;
  -o-border-radius:10px;
  border-radius:10px;
}
.accordion li{
  float:left;
  width:20%;
  overflow:hidden;
  height:250px;
  -moz-transition:width 0.2s ease-out;
  -webkit-transition:width 0.2s ease-out;
  -o-transition:width 0.2s ease-out;
  transition:width 0.2s ease-out;
  -moz-transition-delay:0.15s;
  -webkit-transition-delay:0.15s;
  -o-transition-delay:0.15s;
  transition-delay:0.15s;
}
.accordion li:first-of-type{
  -moz-border-radius:10px 0 0 10px;
  -webkit-border-radius:10px 0 0 10px;
  -o-border-radius:10px 0 0 10px;
  border-radius:10px 0 0 10px;
}
.accordion li:last-of-type{
  -moz-border-radius:0 10px 10px 0;
  -webkit-border-radius:0 10px 10px 0;
  -o-border-radius:0 10px 10px 0;
  border-radius:0 10px 10px 0;
}
.accordion div{
  padding:10px;
}
.accordion:hover li{
  width:10%;
}
.accordion li:hover{
  width:60%;
}
.slide-01  { background:red; color:white; }
.slide-02  { background:orange; color:white; }
.slide-03  { background:yellow; color:#333; text-shadow:none; }
.slide-04  { background:green; color:white; }
.slide-05  { background:blue; color:white; }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's all fairly self-explanatory; first we have the &lt;code&gt;.accordion&lt;/code&gt; class for the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; where we define a width and overflow hidden (&lt;a href=&quot;http://csswizardry.com/floats/&quot;&gt;to clear floats&lt;/a&gt;) and some other bits and pieces.&lt;/p&gt;

&lt;p&gt;Next we float the list items left so they all stack up, give them a width of 20% (&lt;strong&gt;100% ÷ 5 = 20%&lt;/strong&gt;) and give them &lt;code&gt;overflow:hidden;&lt;/code&gt; so that no content breaks out of them. We also apply a fixed height that will nicely house all the content once the list items expand.&lt;/p&gt;

&lt;p&gt;Now here's a progressive bit, we tell the list items to transition their widths over a period of 0.2 seconds, easing out the animation.&lt;/p&gt;

&lt;p&gt;Then after this we use the very handy &lt;code&gt;:first-&lt;/code&gt; and &lt;code&gt;:last-of-type&lt;/code&gt; selectors to round the top- and bottom-left and top- and bottom-right corners of the first and last list items respectively.&lt;/p&gt;

&lt;p&gt;After this, we have a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to which we apply 10px padding. You could argue that this &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is extraneous and that we can simply add the padding to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s, and you'd be right, however this would make the percentage numbers for the width less nice to work with if you have to factor in paddings on the list items too.&lt;/p&gt;

&lt;p&gt;Now we reach the bit that makes the accordion functional:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.accordion:hover li{
  width:10%;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we do here is say &lt;em&gt;as soon as I hover the &lt;ul&gt; make all the &lt;li&gt;s 10% in width&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This gives us &lt;strong&gt;5 × 10% = 50%&lt;/strong&gt;. 5 lots of 10% width list items in the list. We have a spare 50% of extra space in the list that we'd like to fill with whatever list item we are currently hovering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10% list item + 50% dead space to fill = 60%&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So what we do now is say &lt;em&gt;make the list item that I am actually hovering 60% width&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.accordion li:hover{
  width:60%;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The whole functionality says &lt;em&gt;when I hover the list make every list item 10% the width of the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; but make the one &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; that my cursor is over 60% of the width&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10% + 10% + 10% + 10% + 60% = 100%&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The final block simply gives the list items some colour (colours of the rainbow, did you notice?).&lt;/p&gt;

&lt;p&gt;When it's all tied together you get a series of list items that alter their widths when hovered (but always totalling 100%). Then we use some CSS3 to round the corners in supportive browsers, and some transitions for the even more supportive browsers. This leaves us with an sliding accordion of rich HTML content that uses no JS and works even in IE7.&lt;/p&gt;

&lt;h2&gt;Vertical accordion&lt;/h2&gt;

&lt;p&gt;Just for an optional extra I decided to make the accordion work in a vertical orientation. We use exactly the same markup save for adding an ID to the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;ul class=&quot;accordion&quot; id=&quot;vertical&quot;&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we stack the list items on top of one another by giving them a 100% width and this time applying the same 10% / 60% logic to the heights instead. The following code is all very self-explanatory so I'll just leave you with it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  VERTICAL
\*------------------------------------*/&amp;lt;/span&amp;gt;
#vertical{
  height:300px;
}
#vertical li{
  float:none;
  height:20%;
  width:100%;
  -moz-transition:height 0.2s ease-out;
  -webkit-transition:height 0.2s ease-out;
  -o-transition:height 0.2s ease-out;
  transition:height 0.2s ease-out;
}
#vertical li:first-of-type{
  -moz-border-radius:10px 10px 0 0;
  -webkit-border-radius:10px 10px 0 0;
  -o-border-radius:10px 10px 0 0;
  border-radius:10px 10px 0 0;
}
#vertical li:last-of-type{
  -moz-border-radius:0 0 10px 10px;
  -webkit-border-radius:0 0 10px 10px;
  -o-border-radius:0 0 10px 10px;
  border-radius:0 0 10px 10px;
}
#vertical:hover li{
  height:10%;
  width:100%;
}
#vertical li:hover{
  height:60%;
  width:100%;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we are inheriting the code from the horizontal version we do have to override the &lt;code&gt;:hover&lt;/code&gt; state's widths by explicitly setting them to 100%, but aside from that pretty much all we've done is applied the above theory to heights as opposed to widths. Magic!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS powered ribbons the clean way</title>
   <link href="http://inuitcss.com/2011/02/css-powered-ribbons-the-clean-way"/>
   <updated>2011-02-09T12:48:01+00:00</updated>
   <id>http://inuitcss.com/2011/02/css-powered-ribbons-the-clean-way</id>
   <content type="html">&lt;p&gt;I've started buying &lt;a href=&quot;http://www.netmag.co.uk/&quot;&gt;.net magazine&lt;/a&gt; again recently. I don't normally but I was hoping it might help in &lt;a href=&quot;http://csswizardry.com/2011/02/hire-me/&quot;&gt;my search for a super-awesome new agency&lt;/a&gt;. I was flicking through this month's edition when I happened upon a Create a wraparound ribbon tutorial. I thought I'd give it a read as I really love little design conundrums and how other people solve them. I was a little surprised to see it had been done in five elements. I challenged myself to do it in one...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2011/02/ribbon-example.gif&quot; alt=&quot;Ribbon example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, so I can't re-publish or copy sections of the article but you can either buy .net and read it, or look at the tiny images on &lt;a href=&quot;http://www.netmag.co.uk/zine/latest-issue/issue-212&quot;&gt;the latest issue page&lt;/a&gt;. It simply creates what is in the screenshot--a ribbon-like effect that sits outside and then 'behind' its content.&lt;/p&gt;

&lt;p&gt;I'm not bashing the author's work at all. It works and is--as far as I can see--pretty robust. However, it certainly doesn't need five elements and &lt;em&gt;definitely&lt;/em&gt; no empty ones. His code was roughly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;body&amp;gt;

  &amp;lt;wrapper&amp;gt;
    &amp;lt;wrapper&amp;gt;
      &amp;lt;wrapper&amp;gt;
        &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;
      &amp;lt;/wrapper&amp;gt;
      &amp;lt;empty&amp;gt;&amp;lt;/empty&amp;gt;
    &amp;lt;/wrapper&amp;gt;
  &amp;lt;/wrapper&amp;gt;

&amp;lt;/body&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mine is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;body&amp;gt;

  &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;

&amp;lt;/body&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it does &lt;em&gt;exactly the same thing&lt;/em&gt;. The CSS that powers the original makes use of &lt;a href=&quot;http://jonrohan.me/guide/css/creating-triangles-in-css/&quot;&gt;manipulating the CSS borders-arrow behaviour&lt;/a&gt;. I opted for a good old fashioned image. There's nothing wrong with the border-arrow method but I'm orthodox, and manipulating borders to create what is essentially an image just feels really wrong to me. Use whichever you prefer, but remember that &lt;em&gt;images still count&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;The full code for my CSS powered ribbon is simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- MARKUP --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    MAIN
\*------------------------------------*/&amp;lt;/span&amp;gt;
html{
    font-family:Cambria, Georgia, &quot;Times New Roman&quot;, Times, serif;
    background:#e4e3d5;
    color:#666;
    height:101%;
}
body{
    width:940px;
    padding:75px 10px;
    margin:0 auto;
    background:#fff;
}

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    TYPE
\*------------------------------------*/&amp;lt;/span&amp;gt;
h2{
    position:relative;
    color:#fff;
    background:#f43059;
    font-size:1.5em;
    float:left;
    clear:both;
    padding:10px 10px 10px 20px;
    margin-left:-20px;
    margin-bottom:20px;
    text-shadow:0 -1px #d0284b, 0 1px #f96080;

    -moz-box-shadow:2px 2px 0 rgba(0,0,0,0.1);
    -webkit-box-shadow:2px 2px 0 rgba(0,0,0,0.1);
    -o-box-shadow:2px 2px 0 rgba(0,0,0,0.1);
    box-shadow:2px 2px 0 rgba(0,0,0,0.1);
}
h2:before{
    content:&quot; &quot;;
    background:url(../img/css/ribbon.png);
    display:block;
    width:10px;
    height:10px;
    position:absolute;
    bottom:0;
    left:0;
    margin-bottom:-10px;
    z-index:-1;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There we have it in four less elements. His five (discounting the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;) to my one &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;. 80% less code.&lt;/p&gt;

&lt;p&gt;What this does is creates a white &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; with a pink background, pulls the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; out of the content area with a negative margin and then places the image absolutely left-bottom of the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; in a &lt;code&gt;:before&lt;/code&gt; pseudo-element. Job done.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;/demos/css-powered-ribbons/&quot;&gt;Demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I made &lt;a href=&quot;/demos/css-powered-ribbons/&quot;&gt;a demo&lt;/a&gt;, also, which shows how this can be extended using some alternating &lt;code&gt;nth-of-type&lt;/code&gt; styles. Feel free to pick it apart and see what does what. If any of the examples above seems out of context then view &lt;a href=&quot;http://csswizardry.com/demos/css-powered-ribbons/css/style.css&quot;&gt;the demo's stylesheet&lt;/a&gt; and source for the comprehensive code.&lt;/p&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;This works in IE 7 (without the &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; pseudo-elements), IE8, Firefox and Chrome, all with varying degrees of progressively enhanced niceties. Your code should never suffer for the sake of such tiny design elements. Keep it lean and use an aggressive approach to progressive enhancement in order to keep your markup at its best.&lt;/p&gt;

&lt;h3&gt;Final final word&lt;/h3&gt;

&lt;p&gt;This isn't a dig at the author of the article &lt;em&gt;or&lt;/em&gt; .net mag. This is simply an illustration of how progressive enhancement and some sensibility can solve the same problem in a far nicer, cleaner and more sensible fashion.&lt;/p&gt;

&lt;p&gt;Furthermore, do feel free to use either the border 'hack' or the image method. There's more than one way to skin a cat...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>in:focus—a case study</title>
   <link href="http://inuitcss.com/2011/02/in-focus-a-case-study"/>
   <updated>2011-02-06T23:14:20+00:00</updated>
   <id>http://inuitcss.com/2011/02/in-focus-a-case-study</id>
   <content type="html">&lt;p&gt;Last week I launched &lt;a href=&quot;/in-focus/&quot;&gt;in:focus&lt;/a&gt;, and it got an amazing reception. I thought I'd write up a quick case study on the idea, the process and the project's future...&lt;/p&gt;

&lt;p&gt;I love the web, seriously love it. I have a burning desire to always be creating things. Nothing groundbreaking like &lt;a href=&quot;http://dribbble.com/&quot;&gt;Dribbble&lt;/a&gt;, but just &lt;em&gt;things&lt;/em&gt;. I also love tinkering with code and UIs and all manner of stuff. I get an idea, I build it, I abandon it, I move onto the next one. I'd say less than 10% of the things I ever work on ever see the light of day.&lt;/p&gt;

&lt;p&gt;in:focus, thankfully, was different. I had the idea, I started building, I got Oliver on board, I launched.&lt;/p&gt;

&lt;p&gt;The idea was had when I was a little drunk. Me and &lt;a href=&quot;http://twitter.com/dan_bentley&quot;&gt;Dan&lt;/a&gt; were at &lt;a href=&quot;http://www.northbar.com/home.php&quot;&gt;a bar&lt;/a&gt; when I had a whimsical idea for an interview project. Nothing more; just a site that hosted interviews with cool and interesting people. That night I got in and started merrily (tipsily) designing straight into the browser. Three hours later and in:focus' design and build was done.&lt;/p&gt;

&lt;p&gt;I decided that I needed to approach someone to interview first, and that this person would make or break in:focus. I have some really really cool followers on Twitter so I decided to source someone from there. Oliver and I have been following each other for a while now so I dropped him a DM and he said yes right away.&lt;/p&gt;

&lt;p&gt;Oliver was an absolutely spot-on choice. Anyone who knows him, or has read the interview, will know that he's a very interesting and inspirational guy, and he really made the first publication an instant hit.&lt;/p&gt;

&lt;p&gt;I decided for sake of ease to port in:focus over to WordPress. This took about twenty minutes with a further hour or so ironing out any rough spots. I purposely hurried the entire process so as to a) not let the idea go stale, as so many tend to do and b) for the sheer self-imposed pressure. I love working under pressure.&lt;/p&gt;

&lt;p&gt;I sent Oliver the questions (edited in part by Dan), he answered them, Suzanna proofed it, I put it live and you lot seemed to love it.&lt;/p&gt;

&lt;p&gt;The moral I guess is have ideas and build. A few hours of work on my part, and time generously donated by others, and I have a project live that a lot of people seems to really enjoy. It was fun, I'm proud of the results and I'm looking forward to continuing it.&lt;/p&gt;

&lt;p&gt;in:focus' next steps are to simply interview more people. Over the next few months I aim to approach and interview more individuals and publish on a semi-regular basis. If anyone has any ideas as to people they like to see interviewed then just let me know!&lt;/p&gt;

&lt;p&gt;Final thanks again to &lt;a href=&quot;http://twitter.com/iA&quot;&gt;Oliver&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/suzehaworth&quot;&gt;Suze&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/dan_bentley&quot;&gt;Dan&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing in:focus</title>
   <link href="http://inuitcss.com/2011/02/announcing-in-focus"/>
   <updated>2011-02-03T16:18:27+00:00</updated>
   <id>http://inuitcss.com/2011/02/announcing-in-focus</id>
   <content type="html">&lt;p&gt;You may remember me Dribbbling &lt;a href=&quot;http://dribbble.com/shots/99264-Secret-project&quot;&gt;a couple&lt;/a&gt; &lt;a href=&quot;http://dribbble.com/shots/99266-Secret-project-02&quot;&gt;of shots&lt;/a&gt; last month about a 'secret project' I've been working on. Well, it's here! &lt;a href=&quot;/in-focus/&quot;&gt;in:focus&lt;/a&gt; is simply a micro-site that aims to interview some of the web's best.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/in-focus/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2011/02/in-focus.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The site took me about three hours from concept to first phase, then about an hour to port it over to WordPress, so about 4-5 hours in total. I'm pretty pleased with the design, and it has a tablet and mobile version, too.&lt;/p&gt;

&lt;p&gt;Even more exciting than that, however, is my first guest. None other than &lt;a href=&quot;http://twitter.com/iA&quot;&gt;Oliver Reichenstein&lt;/a&gt;--owner of international agency &lt;a href=&quot;http://informationarchitects.jp/&quot;&gt;Information Architects&lt;/a&gt; and brains behind &lt;a href=&quot;http://www.informationarchitects.jp/en/writer-for-ipad/&quot;&gt;Writer&lt;/a&gt;! Head over to read &lt;a href=&quot;/in-focus/oliver-reichenstein/&quot;&gt;my Q&amp;A; with him&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;in:focus has no fixed publishing schedule, and if you have any suggestions for interviewees then please let me know. Any feedback would also be great; as I said this project was purposefully 'rushed' as I wanted to see how quickly I could turn an idea into a reality. Many thanks to Oliver for helping this happen.&lt;/p&gt;

&lt;p&gt;Enjoy, I hope...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Forget responsive web design...</title>
   <link href="http://inuitcss.com/2011/01/forget-responsive-web-design"/>
   <updated>2011-01-31T12:42:58+00:00</updated>
   <id>http://inuitcss.com/2011/01/forget-responsive-web-design</id>
   <content type="html">&lt;p&gt;...you need &lt;em&gt;adaptive&lt;/em&gt; web design.&lt;/p&gt;

&lt;p&gt;I now completely disagree with nigh-on all of the below. I've decided to leave this post for posterity, but I no longer stand by it.&lt;/p&gt;

&lt;p&gt;The web has been abuzz recently over the advent of responsive web design. Pioneered mostly by &lt;a href=&quot;http://www.alistapart.com/articles/responsive-web-design/&quot;&gt;Ethan Marcotte&lt;/a&gt;, the concept is fantastic. It truly is great and has changed how a lot of projects and builds take shape. Things don't get much more efficient than a write-once view-many approach, and with the sharp rise in mobile and tablet devices it is proving very popular.&lt;/p&gt;

&lt;p&gt;It is however, like most things, not without its downsides. &lt;a href=&quot;http://www.cloudfour.com/css-media-query-for-mobile-is-fools-gold/&quot;&gt;This article&lt;/a&gt; by &lt;a href=&quot;http://twitter.com/grigs&quot;&gt;Jason Grigsby&lt;/a&gt; outlines some pretty valid points and &lt;a href=&quot;http://www.uxmag.com/design/is-multiscreen-enough-why-write-once-shouldnt-be-the-goal&quot;&gt;this one&lt;/a&gt; by &lt;a href=&quot;http://twitter.com/kevinsuttle&quot;&gt;Kevin Suttle&lt;/a&gt; offers a very interesting insight into some problems with the build-once mentality.&lt;/p&gt;

&lt;p&gt;My problem lies a little more closely to home, though. The theory and concept of responsive web design is great but I think there are two problems with its fundamentals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The work that the name implies and leads to.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I much prefer the name &lt;em&gt;adaptive web design&lt;/em&gt;. A website should not respond to changing surroundings, it should &lt;em&gt;adapt to them once they've changed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This difference is pretty subtle but very important. Responsive web design changes as the viewport does, adaptive changes once the viewport &lt;em&gt;has&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The problem with calling it responsive web design is that by its very nature it implies that it offers feedback (or a response) to a user's actions.&lt;/p&gt;

&lt;p&gt;Responsive web design tends to use fluid layouts to cater for any possible resolution. Adaptive caters for a predefined but &lt;strong&gt;sensible&lt;/strong&gt; array. If we consider possible resolutions we could come up with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Desktop--1024 and above (current industry standard)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Legacy desktop--800x600&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tablet--768 on the iPad&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mobile--&amp;lt;480 on the iPhone&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The benefit of knowing these presets (and any more that you might choose) is that you don't need to rely on fluidity (which is generally harder to build); you can also make better use of grids like the 960GS (which offers 700px that will cater for both iPad and 800x600); you don't need to worry about unsightly, overly-long measures (line-length) on larger resolutions in fluid designs; and finally, you generally just have better control over what you're displaying when you have metered constraints.&lt;/p&gt;

&lt;p&gt;Furthermore for me is the work involved in creating a layout that will accommodate someone who is browsing at a resolution of, say, 913px. Why spend time catering for such arbitrary resolutions? When I build I cater for desktop &lt;strong&gt;and&lt;/strong&gt; tablet &lt;strong&gt;and&lt;/strong&gt; mobile, but nowhere in between; you can't be everything to everyone all the time, so why try?&lt;/p&gt;

&lt;p&gt;Adaptive web design for me is a far better name and methodology than responsive design. Responsive implies, suggests and relies upon a site responding to changes as they happen. This to me is more work than is necessary. I much prefer working to adaptive web design--letting a website adapt to metered changes once they've happened--making my life a whole lot easier than building fluid layouts that will cater for anyone and everyone. If someone is browsing at a 'non-standard' resolution, I didn't ought to have to go out of my way to support it. I choose a sensible preset of resolutions and work to that.&lt;/p&gt;

&lt;p&gt;We didn't have responsive web design a couple of years ago and we got by fine then. Don't make extra work for yourselves just because you can...&lt;/p&gt;

&lt;p&gt;I guess what it mainly boils down to is the name. Responsive just isn't the right word for me unless you &lt;em&gt;are&lt;/em&gt; making a truly responsive site that &lt;em&gt;will&lt;/em&gt; cater any resolution possible; but then if you are doing that then I'd dare say that that's not such a great idea from both a time and effort point of view...&lt;/p&gt;

&lt;p&gt;That said, responsive web design &lt;em&gt;is&lt;/em&gt; a great tool whether you're using either method. I &lt;em&gt;do&lt;/em&gt; think that adaptive is more sensible than responsive, but I'd never frown upon the latter. Any step toward more efficient and accessible builds is a win in my eyes. We just need to make sure we don't lose sight of the goal--making money. Web design is a business, and wasting time is bad business...&lt;/p&gt;

&lt;h2&gt;Update:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/pgdev&quot;&gt;Paul Gordon&lt;/a&gt; shares much &lt;a href=&quot;http://pgdev.posterous.com/adaptive-or-responsive-design&quot;&gt;the same opinion&lt;/a&gt;, but beat me to the &lt;em&gt;publish&lt;/em&gt; button by a week or so...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Create a centred horizontal navigation</title>
   <link href="http://inuitcss.com/2011/01/create-a-centred-horizontal-navigation"/>
   <updated>2011-01-29T18:53:10+00:00</updated>
   <id>http://inuitcss.com/2011/01/create-a-centred-horizontal-navigation</id>
   <content type="html">&lt;p&gt;Centring block level elements is easy, just define a width and set &lt;code&gt;margin:0 auto;&lt;/code&gt;, but what if you don't know that fixed width? You could use &lt;code&gt;text-align:center;&lt;/code&gt;, but that won't work on 100%-width block-level elements either... that'll only work on text-level elements.&lt;/p&gt;

&lt;p&gt;Defining explicit widths and heights should always be avoided wherever possible, as doing so will make the document a lot less future-proof, flexible and extensible... Suppose you have four items in your navigation menu--you can work out the width of these and use &lt;code&gt;margin:0 auto;&lt;/code&gt; to centre them. Adding a fifth will increase the width, meaning you'd need to alter the CSS, too. This is far from ideal, and more so with a CMS to power the site (a client can add pages, but perhaps can't edit CSS).&lt;/p&gt;

&lt;p&gt;However, there is a way to have a centred horizontal navigation without knowing an explicit width, and without adding CSS. It's also remarkably easy.&lt;/p&gt;

&lt;p&gt;The markup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;ul id=&quot;nav&quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/about/&quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/work/&quot;&amp;gt;Work&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/clients/&quot;&amp;gt;Clients&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/contact/&quot;&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty standard, an unordered list of menu items. The CSS is where it's at. I have highlighted the bits that do the majority of the work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#nav{
  border:1px solid #ccc;
  border-width:1px 0;
  list-style:none;
  margin:0;
  padding:0;
  &amp;lt;mark&amp;gt;text-align:center;&amp;lt;/mark&amp;gt;
}
#nav li{
  &amp;lt;mark&amp;gt;display:inline;&amp;lt;/mark&amp;gt;
}
#nav a{
  &amp;lt;mark&amp;gt;display:inline-block;&amp;lt;/mark&amp;gt;
  padding:10px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I've done here is simply create a navigation list and given it a border top and bottom (purely to highlight its centred text). Instead of floating the &lt;em&gt;block-level&lt;/em&gt; &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s left I've given them &lt;code&gt;display:inline;&lt;/code&gt;, that is to say they no longer occupy 100% the available width and they now stack up nicely against each other.&lt;/p&gt;

&lt;p&gt;Next we use (the much underused) &lt;code&gt;display:inline-block;&lt;/code&gt; to make sure the links themselves don't break onto new lines but still obey any padding values accordingly. Here I have given them a larger hit area by adding &lt;code&gt;padding:10px;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You could have, if you wanted, applied inline-block to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s. however IE6-7 will only allow &lt;code&gt;inline-block&lt;/code&gt; to work on elements that are inherently inline elements. &lt;code&gt;display:inline-block;&lt;/code&gt; will not work on block-level elements.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;/demos/centred-nav/&quot;&gt;Demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/demos/centred-nav/&quot;&gt;Here's a quick demo&lt;/a&gt;. Try using Firebug or similar to add other list items on the fly, and watch as they seamlessly centre in the list. I have tested this in IE7-8 to find it works perfectly. I haven't checked IE6 but I imagine it'll be fine.&lt;/p&gt;

&lt;h2&gt;Update&lt;/h2&gt;

&lt;p&gt;You asked and I heard; I have made &lt;a href=&quot;/demos/centred-nav/dropdown.html&quot;&gt;a CSS powered dropdown version of this&lt;/a&gt; for you. The line &lt;code&gt;top:100%;&lt;/code&gt; will make the dropdown work in IE7, but kinda ruins the experience a little in all other browsers. Whether you leave it in or not is up to you. Again, view source for the how-to...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Link: Recreating the Luke's Beard social icons with CSS3</title>
   <link href="http://inuitcss.com/2011/01/link-recreating-the-lukes-beard-social-icons-with-css3"/>
   <updated>2011-01-23T16:55:38+00:00</updated>
   <id>http://inuitcss.com/2011/01/link-recreating-the-lukes-beard-social-icons-with-css3</id>
   <content type="html">&lt;p&gt;I was browsing &lt;a href=&quot;http://dribbble.com/csswizardry&quot;&gt;Dribbble&lt;/a&gt; this afternoon when I came across &lt;a href=&quot;http://dribbble.com/lukesbeard/&quot;&gt;Luke's Beard profile&lt;/a&gt; and then, in turn, &lt;a href=&quot;http://www.lukesbeard.com/&quot;&gt;his website&lt;/a&gt;. I noticed some pretty cool hover effects going on with his social icons which &lt;a href=&quot;http://csswizardry.com/demos/lukes-beard-social-icons/&quot;&gt;I decided to recreate without JavaScript and using some progressive CSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;/demos/lukes-beard-social-icons/&quot;&gt;Demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I won't write everything up because a view of the source and &lt;a href=&quot;http://csswizardry.com/demos/lukes-beard-social-icons/css/style.css&quot;&gt;CSS&lt;/a&gt; should explain everything.&lt;/p&gt;

&lt;p&gt;Luke did not commission this work, so please don't reuse the icons or copy this without permission from the respective people. I allow full use of my code (with attribution) but please don't copy Luke's format for social icons--the code is mine but its implementation on social icons is Luke's.&lt;/p&gt;

&lt;p&gt;In short, you can have my code but it was Luke's idea.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using the <body> element as a wrapper</title>
   <link href="http://inuitcss.com/2011/01/using-the-body-element-as-a-wrapper"/>
   <updated>2011-01-23T14:19:23+00:00</updated>
   <id>http://inuitcss.com/2011/01/using-the-body-element-as-a-wrapper</id>
   <content type="html">&lt;p&gt;This is a tiny little blog post that a lot of you will already be aware of, however in &lt;em&gt;my&lt;/em&gt; experience I've found that for every one person that does realise this, there are about two who don't.&lt;/p&gt;

&lt;p&gt;A lot of developers will have a &lt;em&gt;wrapper&lt;/em&gt; &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in their markup in which the page is contained. It might look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- Markup --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;body&amp;gt;

  &amp;lt;mark&amp;gt;&amp;lt;div id=&quot;wrapper&quot;&amp;gt;&amp;lt;/mark&amp;gt;

    [content]

  &amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
body{
  font-family:sans-serif;
  background:#fff;
  color:#333;
}
&amp;lt;mark&amp;gt;#wrapper{&amp;lt;/mark&amp;gt;
  width:940px;
  margin:0 auto;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It &lt;em&gt;most&lt;/em&gt; situations this could be simply rewritten:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- Markup --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;body&amp;gt;

  [content]

&amp;lt;/body&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
body{
  font-family:sans-serif;
  background:#fff;
  color:#333;
  width:940px;
  margin:0 auto;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; a container.&lt;/p&gt;

&lt;p&gt;Obviously there will be &lt;em&gt;some&lt;/em&gt; instances where this won't be suitable--and you'll spot what those are as you come across them--but for the most part, you can drop that unnecessary wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;strong&gt;use the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element as a wrapper&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Hat-tip to &lt;a href=&quot;http://twitter.com/simonwiffen&quot;&gt;Simon Wiffen&lt;/a&gt; for showing me this a while ago.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>HTML(5) and text-level semantics</title>
   <link href="http://inuitcss.com/2011/01/html5-and-text-level-semantics"/>
   <updated>2011-01-23T11:22:16+00:00</updated>
   <id>http://inuitcss.com/2011/01/html5-and-text-level-semantics</id>
   <content type="html">&lt;p&gt;As an absolute type nut and militant web standards advocate, one of the most exciting things that HTML5 brings for me is not the new structural elements like &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; et al (although they &lt;em&gt;are&lt;/em&gt; pretty awesome) but rather the text-level semantics it brings with the addition and redefinition of certain elements.&lt;/p&gt;

&lt;p&gt;The best way to explain them is probably to take a look at the following excerpt:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hi there, I'm Harry Roberts, I am a web developer at &lt;a href=&quot;http://sky.com/&quot;&gt;BSkyB&lt;/a&gt;. I specialise in web standards, accessibility, &lt;del&gt;Ruby,&lt;/del&gt; design and build, mobile development, typography and more. I have been in the industry for three four years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; I am not a programmer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2009/12/harry-roberts.jpg&quot; alt=&quot;A photo of me&quot; /&gt;&lt;strong&gt;Above:&lt;/strong&gt; A photo of me.&lt;/p&gt;

&lt;p&gt;I write at my personal blog &lt;a href=&quot;/&quot;&gt;CSS Wizardry&lt;/a&gt; and tweet at &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;@csswizardry&lt;/a&gt;. I love the uppercase &lt;em&gt;R&lt;/em&gt; in Helvetica. My motto on web development is 'Always code like you’re working in a team, even when you’re not.' I absolutely &lt;em&gt;love&lt;/em&gt; the web.&lt;/p&gt;

&lt;p&gt;I am also an advocate of clearing floats the clean way. Please note the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;overflow&lt;/code&gt; properties in the code below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.wrapper{
  &amp;lt;mark&amp;gt;width:940px;&amp;lt;/mark&amp;gt;
  margin:0 auto;
  padding:10px;
  &amp;lt;mark&amp;gt;overflow:hidden;&amp;lt;/mark&amp;gt;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;This is, admittedly, a very forced bit of writing, but I had to write in such a way as to properly, and in context, use a large set of semantic text-level elements. These are, in order of appearance:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;s&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;q&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;hr /&gt;

&lt;h2&gt;The &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;...I specialise in web standards, accessibility, &amp;lt;mark&amp;gt;&amp;lt;del datetime=&quot;2011-01-23T10:07:25+00:00&quot;&amp;gt;Ruby,&amp;lt;/del&amp;gt;&amp;lt;/mark&amp;gt; design and build, mobile development, typography&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; element indicates a removal from a document; this shows that the text inside it has no place in the document. You could actually physically remove the text, but you can--for the sake of transparency-- leave it in and show that it does not belong. It also has an attribute to show when it was deleted.&lt;/p&gt;

&lt;p&gt;In this case, I do not know Ruby and as such it has no place in the text. I used the &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; element to show this.&lt;/p&gt;

&lt;h2&gt;The &lt;code&gt;&amp;lt;s&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;I have been in the industry for &amp;lt;mark&amp;gt;&amp;lt;s&amp;gt;three&amp;lt;/s&amp;gt;&amp;lt;/mark&amp;gt; four years.&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This element is &lt;em&gt;very&lt;/em&gt; similar to the &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; element and their differences are &lt;em&gt;very&lt;/em&gt; subtle. Where the &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; shows incorrect information that should not be in the document, the &lt;code&gt;&amp;lt;s&amp;gt;&lt;/code&gt; element represents information that is no longer accurate or relevant (e.g. out of date). Here, it used to be true that I had been industry for three years, but that has been replaced by four. The information is not incorrect per se, merely no longer relevant.&lt;/p&gt;

&lt;h2&gt;The &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;mark&amp;gt;&amp;lt;ins datetime=&quot;2011-01-23T10:07:25+00:00&quot;&amp;gt;&amp;lt;strong&amp;gt;Please note:&amp;lt;/strong&amp;gt; I am not a programmer.&amp;lt;/ins&amp;gt;&amp;lt;/mark&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt; element represents text that has been inserted into the document after it has been published. Here I am inserting content as a result of the Ruby mistake earlier. Here I am inserting text to explain why the previous text was removed. Note the same attributes as used on the &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;This isn't its only use, however. I frequently use the &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt; element in articles to show addenda and updates.&lt;/p&gt;

&lt;h2&gt;The &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;ins datetime=&quot;2011-01-23T10:07:25+00:00&quot;&amp;gt;&amp;lt;mark&amp;gt;&amp;lt;strong&amp;gt;Please note:&amp;lt;/strong&amp;gt;&amp;lt;/mark&amp;gt; I am not a programmer.&amp;lt;/ins&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should all be familiar with the &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; element. It represents strong importance; where the content is more important than its surroundings. Here is is important because I am saying it is important that you know that I am not a programmer as was accidentally stated above.&lt;/p&gt;

&lt;h2&gt;The &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;mark&amp;gt;&amp;lt;small&amp;gt;&amp;lt;b&amp;gt;Above:&amp;lt;/b&amp;gt; A photo of me.&amp;lt;/small&amp;gt;&amp;lt;/mark&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; element has been redefined to represent small print and side comments. Here it is used to describe the picture above it. It's usage is, luckily, fairly obvious. Any time you have supporting information for a larger piece, mark it up as a &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;The &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;small&amp;gt;&amp;lt;mark&amp;gt;&amp;lt;b&amp;gt;Above:&amp;lt;/b&amp;gt;&amp;lt;/mark&amp;gt; A photo of me.&amp;lt;/small&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The once loathed &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; element has been redefined in HTML5 to represent any text whose appearance is offset from its surroundings, often by means of bolding. There are occasions when you'd want bold text but without any extra importance, such as &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; would add. I also use the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; element for marking up the origins of quotes, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;blockquote&amp;gt;
  &amp;lt;p&amp;gt;&amp;amp;ldquo;
    A lie gets halfway around the world before the truth has a chance to get its pants on.&amp;amp;rdquo;
    &amp;lt;mark&amp;gt;&amp;lt;b&amp;gt;Sir Winston Churchill&amp;lt;/b&amp;gt;&amp;lt;/mark&amp;gt;
  &amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;I write at my personal blog &amp;lt;a href=&quot;/&quot;&amp;gt;&amp;lt;mark&amp;gt;&amp;lt;cite&amp;gt;CSS Wizardry&amp;lt;/cite&amp;gt;&amp;lt;/mark&amp;gt;&amp;lt;/a&amp;gt; and&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt; element is used to represent a mention of or reference to a body of work, such as a book, an article, a painting and more. It is not, according to the HTML spec, used for marking up the names of sources of quotes (as above, I use the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; element).&lt;/p&gt;

&lt;p&gt;So whenever you reference a name of a film or song or website or sculpture or article, mark it up with the &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h2&gt;The &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;I love the uppercase &amp;lt;mark&amp;gt;&amp;lt;i&amp;gt;R&amp;lt;/i&amp;gt;&amp;lt;/mark&amp;gt; in Helvetica.&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The newly redefined  &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; element is another slightly confusing one. The usage is any piece of text that may be spoken with a slightly different inflection but bears &lt;strong&gt;no&lt;/strong&gt; extra importance. The best way to tell whether you need the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; element or not is to say it aloud.&lt;/p&gt;

&lt;p&gt;Here I'm marking up a single letter, because if I were to speak that sentence aloud the &lt;em&gt;R&lt;/em&gt; &lt;em&gt;would&lt;/em&gt; have a slightly different tone applied. The &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; element can also be applied to full words and phrases.&lt;/p&gt;

&lt;h2&gt;The &lt;code&gt;&amp;lt;q&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;My motto on web development is &amp;lt;mark&amp;gt;&amp;lt;q&amp;gt;&amp;amp;lsquo;Always code like you&amp;amp;rsquo;re working in a team, even when you&amp;amp;rsquo;re not.&amp;amp;rsquo;&amp;lt;/q&amp;gt;&amp;lt;/mark&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;q&amp;gt;&lt;/code&gt; element is simply used to mark up inline quotations; quotes that are in the context of surrounding copy.&lt;/p&gt;

&lt;h2&gt;The &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;I absolutely &amp;lt;mark&amp;gt;&amp;lt;em&amp;gt;love&amp;lt;/em&amp;gt;&amp;lt;/mark&amp;gt; the web.&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, the &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; element is one we should all be familiar with. It denotes stressed importance. If you read the example aloud you can see how the &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; element adds inflection on the word &lt;em&gt;love&lt;/em&gt; &lt;strong&gt;with importance&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;The &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;Please note the &amp;lt;mark&amp;gt;&amp;lt;code&amp;gt;width&amp;lt;/code&amp;gt;&amp;lt;/mark&amp;gt; and &amp;lt;mark&amp;gt;&amp;lt;code&amp;gt;overflow&amp;lt;/code&amp;gt;&amp;lt;/mark&amp;gt; properties in the code below:&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; element is very self-explanatory, it simply represents pieces of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; There is a much larger array of elements used to denote code, inputs and outputs too detailed to go into here. Please refer to the HTML spec for these.&lt;/p&gt;

&lt;h2&gt;The &lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;.wrapper{
  &amp;lt;mark&amp;gt;&amp;lt;mark&amp;gt;width:940px;&amp;lt;/mark&amp;gt;&amp;lt;/mark&amp;gt;
  margin:0 auto;
  padding:10px;
  &amp;lt;mark&amp;gt;&amp;lt;mark&amp;gt;overflow:hidden;&amp;lt;/mark&amp;gt;&amp;lt;/mark&amp;gt;
}&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt; element is a really nice new element introduced in HTML5. Its purpose is simply to highlight. You could highlight each occurrence of a search term in a search-results page &lt;a href=&quot;http://html5doctor.com/search/?q=mark&quot;&gt;as HTML5 Doctor do&lt;/a&gt; or--as I like to do--highlight specific references to code that is in a larger block. This allows me to give the code context, but also highlight the relevant snippet that I am talking about.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So there we have an array of highly semantic and really nifty text-level elements to use in your work; some old, some new, some modified but &lt;em&gt;all&lt;/em&gt; useful.&lt;/p&gt;

&lt;p&gt;There are more than I've outlined here, I may revisit the blog post and add them, but the ones I've covered are the ones &lt;em&gt;I&lt;/em&gt; find most commonly occurring. In the meantime, why not give &lt;a href=&quot;http://www.whatwg.org/html/&quot;&gt;the HTML spec a quick read&lt;/a&gt;?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Client respect</title>
   <link href="http://inuitcss.com/2011/01/client-respect"/>
   <updated>2011-01-18T16:38:23+00:00</updated>
   <id>http://inuitcss.com/2011/01/client-respect</id>
   <content type="html">&lt;p&gt;That's us respecting them, not them respecting us...&lt;/p&gt;

&lt;p&gt;I posted &lt;a href=&quot;http://twitter.com/csswizardry/status/27292734842736641&quot;&gt;a tweet this morning&lt;/a&gt; that got a bit of reaction from my followers, so I thought I'd write it up here.&lt;/p&gt;

&lt;p&gt;Sites like &lt;a href=&quot;http://clientsfromhell.net/&quot;&gt;Clients From Hell&lt;/a&gt; are all quite light-hearted, and some are very funny, but it's still a public forum in which our industry is calling out and mocking those that fund it.&lt;/p&gt;

&lt;p&gt;The thing that actually triggered my tweet this morning was &lt;a href=&quot;http://freelanceswitch.com/freelance-freedom/freelance-freedom-190-rushed-expectations/&quot;&gt;this comic strip from Freelance Switch&lt;/a&gt;. This, and &lt;a href=&quot;http://freelanceswitch.com/freelance-freedom/freelance-freedom-119/&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;http://freelanceswitch.com/freelance-freedom/freelance-freedom-58/&quot;&gt;others&lt;/a&gt; &lt;a href=&quot;http://freelanceswitch.com/freelance-freedom/freelance-freedom-117/&quot;&gt;like&lt;/a&gt; &lt;a href=&quot;http://freelanceswitch.com/freelance-freedom/freelance-freedom-167-professional-e-mail/&quot;&gt;it&lt;/a&gt; (note; random sample) in the Freelance Freedom series, is the design industry blatantly bitching about our clients, and it makes us look like twats.&lt;/p&gt;

&lt;p&gt;Think about it like this; if you wouldn't say it to your client's face, should you say it at all? Word travels, and I could think of nothing worse than a client finding out that I'd been ridiculing them behind their backs... I don't have the first idea about plumbing, but I'd be pretty annoyed to find out that my plumber was bitching about me to his peers.&lt;/p&gt;

&lt;p&gt;The web is still a relatively new industry. Just think at what rate you're &lt;em&gt;still&lt;/em&gt; learning; how can you expect a client to have even a shred of the same knowledge?&lt;/p&gt;

&lt;p&gt;We're all guilty of it to some extent, myself included, but if you think about it's a bit harsh. We've all had clients request silly, impossible or just outright disgusting things, but we're professionals. This is where we educate, explain, justify and reason to the best of our abilities, &lt;strong&gt;using our knowledge as a tool and not a weapon&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If the client is still adamant they want &lt;em&gt;x&lt;/em&gt; when you think they want &lt;em&gt;y&lt;/em&gt;--and you have done all you can to convince them otherwise--just comply. They're paying you after all, and would you rather have them remember and recommend you as 'the agency who went that extra mile for me and did everything I asked', or as 'the agency who wouldn't do what I wanted'?&lt;/p&gt;

&lt;p&gt;Not all clients understand design or the web, and that's good, because if they did we'd all be out of jobs.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now, these opinions are entirely my own and you might not agree, but I'd like to hear some thoughts...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Maximising hit-area for usability</title>
   <link href="http://inuitcss.com/2011/01/maximising-hit-area-for-usability"/>
   <updated>2011-01-12T19:42:14+00:00</updated>
   <id>http://inuitcss.com/2011/01/maximising-hit-area-for-usability</id>
   <content type="html">&lt;p&gt;This post is brought to you by Captain Obvious of &lt;em&gt;The Society of Explaining the Self-Explanatory&lt;/em&gt;: increasing the hit area of an object makes it easier to click... Please, don't let that put you off, there's more to this article than that; I &lt;em&gt;promise&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So yeah, this is old news. People have, for years, been making the target area for links as big as possible to make them easier for users to click. Hell there's even &lt;a href=&quot;http://particletree.com/features/visualizing-fittss-law/&quot;&gt;a law based on this knowledge&lt;/a&gt;, but today I'm only going to share a nifty little trick whereby you don't just make the hit area bigger, but make it &lt;em&gt;bigger than it appears&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First off, head over to &lt;a href=&quot;http://suzannahaworth.com/2010/12/crosby-beach/&quot;&gt;http://suzannahaworth.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I use this technique on the 'Tweet this' link at the end of each article. Now &lt;strong&gt;before&lt;/strong&gt; you scroll down and hover that link, notice that we have something that is probably built like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;element&amp;gt;
  If you liked this article, &amp;lt;link&amp;gt;please Tweet it&amp;lt;/link&amp;gt;.
&amp;lt;/element&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or so you'd think... What we actually have is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;link&amp;gt;
  If you liked this article, &amp;lt;element&amp;gt;please Tweet it&amp;lt;/element&amp;gt;.
&amp;lt;/link&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can you see where this is heading? Good!&lt;/p&gt;

&lt;p&gt;The actual code is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;p id=&quot;tweet-this&quot;&amp;gt;
  &amp;lt;a href=&quot;http://twitter.com/share?text=I&amp;amp;amp;rsquo;m+reading+&amp;amp;amp;lsquo;Crosby Beach&amp;amp;amp;rsquo;&amp;amp;amp;via=suzehaworth&amp;amp;amp;url=http://suzannahaworth.com/2010/12/crosby-beach/&quot;&amp;gt;
    If you liked this article, &amp;lt;strong&amp;gt;please Tweet it&amp;lt;/strong&amp;gt;.
  &amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what we do here is have the whole content of that paragraph as a link--everything is clickable. Then we remove all the styles from that link so that it looks like it's &lt;em&gt;not&lt;/em&gt; a link at all. Anything we set to appear at &lt;code&gt;a{ ... }&lt;/code&gt; we effectively remove so that it simply looks like ordinary text. The &lt;strong&gt;(abridged)&lt;/strong&gt; CSS for &lt;code&gt;a{ ... }&lt;/code&gt; and the undoing of this is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Define generic link styles here */&amp;lt;/span&amp;gt;
a{
  font-family:Calibri, Arial, Verdana, sans-serif;
  font-weight:bold;
  color:#347832;
  text-decoration:none;
}
a:hover,a:active,a:focus{
  text-decoration:underline;
}
a:active,a:focus{
  position:relative;
  top:1px;
}

#tweet-this a{
  display:block;
  padding:20px;
  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Here we undo certain styles applied above */&amp;lt;/span&amp;gt;
  font-family:Cambria, Georgia, &quot;Times New Roman&quot;, Times, serif;
  font-weight:normal;
  color:#555;
}
#tweet-this a:hover{
  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Undo the hover state of the link */&amp;lt;/span&amp;gt;
  text-decoration:none;
}
#tweet-this strong{
  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Make this strong look just like the a */&amp;lt;/span&amp;gt;
  font-family:Calibri, Arial, Verdana, sans-serif;
  font-weight:bold;
  color:#347832;
}
#tweet-this a:hover strong{
  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Make this strong look just like the a on hover */&amp;lt;/span&amp;gt;
  text-decoration:underline;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So here we're maintaining our specific call to action of 'please Tweet it' by styling that as though it's a link, but in actual fact our link is far bigger. The user sees the specific call-to-action, goes to click it, only to find that it is in fact far larger than it appears, thus easier to click.&lt;/p&gt;

&lt;p&gt;Now in this example it would do no harm to just have the whole lot look like a link. We don't really &lt;em&gt;need&lt;/em&gt; to spoof calls-to-actions and hit-areas here but it's quite a nice feature.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;A better example&lt;/h2&gt;

&lt;p&gt;A better example I unfortunately can't share just yet as it appears on a site I built that hasn't gone live. What I can do however is replicate it for you...&lt;/p&gt;

&lt;p&gt;The PSD I was handed contained a section where the text was For a detailed quote for your project, please contact us » and its obvious choice of markup was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;p&amp;gt;For a detailed quote for your project, please &amp;lt;a&amp;gt;contact us&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was until I remembered the technique I'd used on Suze's site. I could keep the 'contact us' call-to-action, but also make it a lot easier for the user to click by using a full-size hit-area.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;/demos/maximising-hit-area/&quot;&gt;Demo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I've made &lt;a href=&quot;/demos/maximising-hit-area/&quot;&gt;a (very crude) replica&lt;/a&gt; of that for you which you can pick through the source a little more freely.&lt;/p&gt;

&lt;p&gt;So there it is, creating larger hit-areas on very specific calls to action.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>HTML elements, tags and attributes</title>
   <link href="http://inuitcss.com/2011/01/html-elements-tags-and-attributes"/>
   <updated>2011-01-11T22:15:22+00:00</updated>
   <id>http://inuitcss.com/2011/01/html-elements-tags-and-attributes</id>
   <content type="html">&lt;p&gt;This article is only a small one, and to the vast majority it won't be of much use, but I'm still astounded that today, in 2011, professional web designers and developers are still making this fundamental mistake. The difference between HTML elements, tags and attributes.&lt;/p&gt;

&lt;h2&gt;Elements&lt;/h2&gt;

&lt;p&gt;An element is a single 'chunk' of code comprising of an opening and closing tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div&amp;gt;This is a div element&amp;lt;/div&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a &lt;code&gt;div&lt;/code&gt; element. Not a &lt;code&gt;div&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Some elements have only one, self-closing tag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;img /&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Tags&lt;/h2&gt;

&lt;p&gt;Tags are the bits that make up elements. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is a tag. An opening and closing tag makes an element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Attributes&lt;/h2&gt;

&lt;p&gt;An attribute is a piece of code attached to a tag which supplies additional information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div &amp;lt;mark&amp;gt;class=&quot;some-class&quot;&amp;lt;/mark&amp;gt;&amp;gt;This is a div element&amp;lt;/div&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an attribute.&lt;/p&gt;

&lt;p&gt;So, when people say 'I've used &lt;code&gt;alt&lt;/code&gt; tags', they haven't; they've used &lt;code&gt;alt&lt;/code&gt; &lt;em&gt;attributes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When people say 'Don't use tables, use &lt;code&gt;div&lt;/code&gt; tags.' they mean use &lt;code&gt;div&lt;/code&gt; &lt;em&gt;elements&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When people say 'mark important text up in a &lt;code&gt;strong&lt;/code&gt; tag' they mean mark important text up in a &lt;code&gt;strong&lt;/code&gt; &lt;em&gt;element&lt;/em&gt; (made up of two &lt;code&gt;strong&lt;/code&gt; tags).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;|&amp;lt;--             --element--            --&amp;gt;|
&amp;lt;tag attribute=&quot;value&quot;&amp;gt;Element content&amp;lt;/tag&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is probably really very basic for the majority of you, so apologies, but it really winds me up when I see developers making this mistake. Still.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I also made &lt;a href=&quot;/eta&quot;&gt;this visual aid&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A new year, a new CSS Wizardry II</title>
   <link href="http://inuitcss.com/2011/01/a-new-year-a-new-css-wizardry-ii"/>
   <updated>2011-01-10T14:08:31+00:00</updated>
   <id>http://inuitcss.com/2011/01/a-new-year-a-new-css-wizardry-ii</id>
   <content type="html">&lt;p&gt;I wrote &lt;a href=&quot;/2011/01/a-new-year-a-new-css-wizardry/&quot;&gt;a few days ago&lt;/a&gt; about one or two changes under way at CSS Wizardry. A couple of minor things have changed since then, too.&lt;/p&gt;

&lt;p&gt;Firstly I decided to do a tablet-optimised (read, less than 800px wide) version of the site. The reasons behind this are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I'm really keen to pour even more effort into CSS Wizardry in 2011, I've promised myself that I will make this year better than the last one. As such I thought the time taken to create the tablet version would be well worth it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS Wizardry has always had a mobile version, but the inclusion of the &lt;code&gt;&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, minimum-scale=1.0, maximum-scale=1.0&quot; /&amp;gt;&lt;/code&gt; meta tag caused it to 'break' a little on the iPad, to circumvent this I resorted to some browser-sniffing to omit that code from the iPad. This is obviously bad because a) well, how wrong is browser sniffing?! and b) I was building for &gt;800px, &lt;em&gt;not just iPad&lt;/em&gt;. Whilst it might look okay on the iPad but I had no idea how bad things were on other devices.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;So the sub-800px version is live and active (size your browser down to see it). A few people on Twitter suggested that user-pinch-zooming should be allowed, however I really don't want it enabled on the iPhone as I feel it provides a more solid feeling experience when the site reads and works like a native app.&lt;/p&gt;

&lt;p&gt;The font-size is more than adequate for easy reading without needing to pinch-zoom and the only way I could allow it on one and not the other is to go back to browser sniffing, which I &lt;em&gt;really&lt;/em&gt; don't want to do.&lt;/p&gt;

&lt;p&gt;However I hear people loud and clear and I'm still pondering what to do...&lt;/p&gt;

&lt;p&gt;Secondly, further to my joining Smashing Magazine's Experts Panel, I have also just joined &lt;a href=&quot;http://www.smashingmagazine.com/the-smashing-network/&quot;&gt;&lt;em&gt;the Smashing Network&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vitaly and the team have played a huge role in the recent success of CSS Wizardry, with regular tweets and mentions of my articles, so a massive thanks to those guys!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scrolling overflowed content in iOS</title>
   <link href="http://inuitcss.com/2011/01/scrolling-overflowed-content-in-ios"/>
   <updated>2011-01-07T23:35:32+00:00</updated>
   <id>http://inuitcss.com/2011/01/scrolling-overflowed-content-in-ios</id>
   <content type="html">&lt;p&gt;This is just a mini-post courtesy of my 'brother-in-law' &lt;a href=&quot;http://twitter.com/nickhx&quot;&gt;Nick Haworth&lt;/a&gt; who showed me this. It's all about scrolling overflowed content in fixed width/height containers in iOS.&lt;/p&gt;

&lt;p&gt;This article was actually brought about by seeing this, &lt;a href=&quot;http://cubiq.org/iscroll&quot;&gt;the iScroll project&lt;/a&gt;, which states:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;The overflow:scroll for mobile webkit. Project started because webkit for iPhone does not provide a native way to scroll content inside a fixed size (width/height) div...&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well guess what, it does!&lt;/p&gt;

&lt;p&gt;Head to my article &lt;a href=&quot;http://csswizardry.com/2010/12/let-it-snow/&quot;&gt;Let it snow!&lt;/a&gt; on an iOS device and head to the first block of code. Take two fingers (as opposed to the usual one) and scroll horizontally. See that? Pretty cool, huh?&lt;/p&gt;

&lt;p&gt;Apologies if you already knew that, but everyone I've spoken to had no idea about it.&lt;/p&gt;

&lt;p&gt;Cheers, &lt;a href=&quot;http://twitter.com/nickhx&quot;&gt;Nick&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Please note, this article is not calling into question iScroll or any of its code, it was simply that one quote that reminded me of this useful iOS feature.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The real HTML5 boilerplate</title>
   <link href="http://inuitcss.com/2011/01/the-real-html5-boilerplate"/>
   <updated>2011-01-06T23:18:16+00:00</updated>
   <id>http://inuitcss.com/2011/01/the-real-html5-boilerplate</id>
   <content type="html">&lt;p&gt;There has been a lot of talk lately about a certain HTML5 boilerplate... &lt;em&gt;the&lt;/em&gt; &lt;a href=&quot;http://html5boilerplate.com/&quot;&gt;HTML5 Boilerplate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jump to the code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A boilerplate is a starting point, it's a base. It's a codebase from which things are built with only the necessary and relevant additions being made (note &lt;strong&gt;&lt;em&gt;additions&lt;/em&gt;&lt;/strong&gt;, not changes).&lt;/p&gt;

&lt;p&gt;I won't beat about the bush, seeing the HTML5 Boilerplate makes me frustrated. It makes me wish I were a vet, or a tree surgeon, or something that isn't a web developer. Look at all that code. 681* lines. &lt;em&gt;Six hundred and eighty-one&lt;/em&gt;. Hell it even takes over 40 minutes to explain! That's not a starting point, that's a finished product and then some.&lt;/p&gt;

&lt;p&gt;*Based on addition of the several code-blocks on the homepage.&lt;/p&gt;

&lt;h2&gt;Assumptions&lt;/h2&gt;

&lt;p&gt;The main problem with the HTML Boilerplate is that it makes so many assumptions. All you can assume with a HTML5 boilerplate is that someone wants to use HTML5, that's it. Assuming someone wants &lt;em&gt;x&lt;/em&gt; Javascript libraries, Google Analytics, IE6 .png fixes, IE_x&lt;em&gt; conditional classes and all that other stuff is &lt;/em&gt;not&lt;em&gt; what a boilerplate is made to do. A boilerplate should be a suitable starting point to which developers can add all that stuff &lt;/em&gt;if they want to_.&lt;/p&gt;

&lt;p&gt;As well as all the script assumptions that are made, it also assumes markup. Although not by a long way at all, it starts building the site for you. The HTML5 Boilerplate doesn't know what markup I want...&lt;/p&gt;

&lt;p&gt;A boilerplate should be added to, not subtracted from. The HTML Boilerplate just contains far too much. I can see more being deleted than being kept, unless...&lt;/p&gt;

&lt;p&gt;A large fear of mine is that novice (for lack of a better word) developers will see this and think 'great, it's all done for me, just copy/paste this, I won't delete stuff just-in-case, I'll pop some stuff in here and voilà; go live!'&lt;/p&gt;

&lt;p&gt;Scary thought...&lt;/p&gt;

&lt;h3&gt;Gone to our heads?&lt;/h3&gt;

&lt;p&gt;I realise this whole article is flame-bait, but seriously, hasn't HTML5/CSS3 gone to our heads a little too much? When did stuff like this become okay? Who in their right mind would start a project (that's not even in a framework) with 681 lines of code?&lt;/p&gt;

&lt;h2&gt;The real HTML5 boilerplate&lt;/h2&gt;

&lt;p&gt;So how little code do you need to get a HTML5 build started? Hardly any, that's how much:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
    &amp;lt;title&amp;gt;HTML5 boilerplate--all you really need…&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot; /&amp;gt;
    &amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!--[if IE]&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;![endif]--&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body id=&quot;home&quot;&amp;gt;

    &amp;lt;h1&amp;gt;HTML5 boilerplate&amp;lt;/h1&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&amp;lt;/code&amp;gt;






&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  RESET
\*------------------------------------*/
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0b1 | 201101 
   NOTE:WORK IN PROGRESS
   USE WITH CAUTION AND TEST WITH ABANDON */&amp;lt;/span&amp;gt;

html,body,div,span,applet,object,iframe,
h1,h2,h3,h4,h5,h6,p,blockquote,pre,
a,abbr,acronym,address,big,cite,code,
del,dfn,em,img,ins,kbd,q,s,samp,
small,strike,strong,sub,sup,tt,var,
b,u,i,center,
dl,dt,dd,ol,ul,li,
fieldset,form,label,legend,
table,caption,tbody,tfoot,thead,tr,th,td,
article,aside,canvas,details,figcaption,figure,
footer,header,hgroup,menu,nav,section,summary,
time,mark,audio,video{
  margin:0;
  padding:0;
  border:0;
  outline:0;
  font-size:100%;
  font:inherit;
  vertical-align:baseline;
}
/* HTML5 display-role reset for older browsers */
article,aside,details,figcaption,figure,
footer,header,hgroup,menu,nav,section{
  display:block;
}
body{
  line-height:1;
}
ol,ul{
  list-style:none;
}
blockquote,q{
  quotes:none;
}
blockquote:before,blockquote:after,
q:before,q:after{
  content:'';
  content:none;
}
&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* remember to define visible focus styles! 
:focus{
  outline:?????;
} */&amp;lt;/span&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* remember to highlight inserts somehow! */&amp;lt;/span&amp;gt;
ins{
  text-decoration:none;
}
del{
  text-decoration:line-through;
}

table{
  border-collapse:collapse;
  border-spacing:0;
}





&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  MAIN
\*------------------------------------*/&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* GO! */&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy and paste those files and save them somewhere. &lt;em&gt;There&lt;/em&gt; is your HTML5 boilerplate.&lt;/p&gt;

&lt;p&gt;That is all you need to begin building any HTML5 project. Need to fix .pngs in IE6? Add that later. Need some analytics? Add that as you need it...&lt;/p&gt;

&lt;p&gt;So there is my opinion, and I'm aware a &lt;em&gt;lot&lt;/em&gt; of people agree with it. I am also aware that a lot of people will vehemently disagree. But seriously, if you think about it, that &lt;em&gt;is&lt;/em&gt; pretty ridiculous for a boilerplate, no?&lt;/p&gt;

&lt;h2&gt;Addendum&lt;/h2&gt;

&lt;p&gt;There seems to have been some mixed messages on my part. I'm not saying the code &lt;em&gt;in&lt;/em&gt; the HTML5 Boilerplate is bad, far from it. A lot of it is very useful and I would learn a lot from, what I am saying is that it's just too verbose for a &lt;em&gt;starting point&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What might be a better idea (and one that'd change my opinion &lt;em&gt;entirely&lt;/em&gt;) would be to have a jQuery UI style builder, whereby you can cherry pick the bits you do want before you start building, never having to see or deal with the bits you don't.&lt;/p&gt;

&lt;h2&gt;Update&lt;/h2&gt;

&lt;p&gt;So Paul and I spent a good 45 minutes or so chatting over GTalk this morning about this article, my opinions and other HTML5 Boilerplate things. It was a very interesting chat and one that I'm very glad Paul and I got to have.&lt;/p&gt;

&lt;p&gt;It raised some interesting points and ideas for further development of the boilerplate, however I shall avoid sharing them here because, well, it's not my place to share it.&lt;/p&gt;

&lt;p&gt;Paul, thanks :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A new year, a new CSS Wizardry</title>
   <link href="http://inuitcss.com/2011/01/a-new-year-a-new-css-wizardry"/>
   <updated>2011-01-05T22:45:37+00:00</updated>
   <id>http://inuitcss.com/2011/01/a-new-year-a-new-css-wizardry</id>
   <content type="html">&lt;p&gt;Well, kind of... With the advent of 2011 a few things have changed at CSS Wizardry.&lt;/p&gt;

&lt;p&gt;Read &lt;a href=&quot;/2011/01/a-new-year-a-new-css-wizardry-ii/&quot;&gt;part two of this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First up, I decided to give it a slight redesign (or rather &lt;a href=&quot;http://www.alistapart.com/articles/redesignrealign&quot;&gt;a realign&lt;/a&gt;). There are certain things I love about CSS Wizardry which haven't changed in about two years. The colours, the type, the minimalism and the content. There were also some things I hated.&lt;/p&gt;

&lt;p&gt;The logo sitting top left, fixed all the way up there. Looked okay at 1024px, but not any bigger. It just looked so detached. I changed that to be more like &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;my Twitter avatar&lt;/a&gt; etc. I also built it in markup as opposed to an image--check it out.&lt;/p&gt;

&lt;p&gt;The nav. Before it was just, well, there. It was a lot like the logo, it didn't seem to belong anywhere. I brought that and the logo in line with one another and gave the entire header a left aligned, fixed feel. I think that brings things a lot tighter and far neater.&lt;/p&gt;

&lt;p&gt;Lastly in design news was the sidebar. Jesus that thing was ugly. It was so horrible it ws illegal in 17 countries. That thing is gone, replaced with some text and some links and...&lt;/p&gt;

&lt;p&gt;Yep, another announcement is that the guys at &lt;a href=&quot;http://buysellads.com/&quot;&gt;BuySellAds.com&lt;/a&gt; got in touch and asked if I'd like to be part of their new &lt;a href=&quot;http://adpacks.com/&quot;&gt;AdPacks.com&lt;/a&gt; network. I said yes!&lt;/p&gt;

&lt;p&gt;Lastly, and the most exciting for me, Vitaly (owner of &lt;a href=&quot;http://smashingmagazine.com/&quot;&gt;Smashing Magazine&lt;/a&gt;) got in touch and asked if id like to join their Experts Panel. Needless to say I said yes.&lt;/p&gt;

&lt;p&gt;Anyway, that's the new CSS Wizardry. If you spot any bugs etc, please do drop me &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;a tweet&lt;/a&gt;. Happy 2011!&lt;/p&gt;

&lt;h2&gt;Update&lt;/h2&gt;

&lt;p&gt;I heard peoples' feedback about comment-author info laying over the header (logo and nav) and I listened.&lt;/p&gt;

&lt;p&gt;I enlisted the help of friend, colleague and genius &lt;a href=&quot;http://twitter.com/dan_bentley&quot;&gt;Dan Bentley&lt;/a&gt; who came up with some nice JS for me. Give him a follow if you're interested in PHP, or MySQL, or Ruby, or iOS dev, or Javascript dev... Well, just anything programming/scripting/dev related.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mo' robust paragraph indenting</title>
   <link href="http://inuitcss.com/2010/12/mo-robust-paragraph-indenting"/>
   <updated>2010-12-21T20:56:15+00:00</updated>
   <id>http://inuitcss.com/2010/12/mo-robust-paragraph-indenting</id>
   <content type="html">&lt;p&gt;I read somewhere once that to space &lt;em&gt;and&lt;/em&gt; indent paragraphs of text is not a good idea and that you should pick one &lt;em&gt;or&lt;/em&gt; the other. Either indent or space, but never both. I can't remember where I read this, all I know is that it was in some type book in &lt;a href=&quot;http://www.magmabooks.com/content/service/shops.asp&quot;&gt;Magma, Manchester&lt;/a&gt; and that I &lt;em&gt;personally&lt;/em&gt; agree with it. I don't know what the type big-wigs think, but for me, I find both indenting and spacing of paragraphs somewhat unsightly.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;/demos/mo-robust-paragraph-indenting/#spaced-indented&quot;&gt;Spaced and indented&lt;/a&gt;--allegedly wrong&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/demos/mo-robust-paragraph-indenting/#spaced-indented&quot;&gt;A spaced and indented paragraph&lt;/a&gt; would use the following CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;p{
  margin-bottom:20px;
}
p+p{
  text-indent:2em;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;&lt;a href=&quot;/demos/mo-robust-paragraph-indenting/#spaced&quot;&gt;Spaced only&lt;/a&gt;--looks and works fine&lt;/h2&gt;

&lt;p&gt;If you just want &lt;a href=&quot;/demos/mo-robust-paragraph-indenting/#spaced&quot;&gt;a spaced paragraph&lt;/a&gt; it's just as simple as &lt;code&gt;p{ margin-bottom:20px; }&lt;/code&gt;. Job done. If you want spaced paragraphs then that's all you need:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;p{
  margin-bottom:20px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;&lt;a href=&quot;/demos/mo-robust-paragraph-indenting/#indented&quot;&gt;Indented only&lt;/a&gt;--doesn't work&lt;/h2&gt;

&lt;p&gt;If you want &lt;a href=&quot;/demos/mo-robust-paragraph-indenting/#indented&quot;&gt;an indented paragraph&lt;/a&gt;, simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;p{
  margin:0;
}
p+p{
  text-indent:2em;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, as you can see, the problem here is that anything following a paragraph with &lt;code&gt;margin:0;&lt;/code&gt; will be butted up against that paragraph. There will be no space between &lt;em&gt;any&lt;/em&gt; element following a paragraph.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;/demos/mo-robust-paragraph-indenting/#indented-fixed&quot;&gt;Spaced and indented fixed&lt;/a&gt;--perfect&lt;/h2&gt;

&lt;p&gt;To fix this, give those paragraphs their &lt;code&gt;margin-bottom:20px;&lt;/code&gt; back, meaning you have the spaced and indented look once again, but then on the &lt;code&gt;p+p&lt;/code&gt; apply a negative &lt;code&gt;margin-top&lt;/code&gt; equal to that of the regular &lt;code&gt;margin-bottom&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;p{
  margin-bottom:20px;
}
p+p{
  text-indent:2em;
  margin-top:-20px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have the ideal, every paragraph after the first (in a block) is indented and unspaced. The last in a block &lt;em&gt;is&lt;/em&gt; spaced meaning a gap between a paragraph and its following element. Easy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Media queries, handier than you think</title>
   <link href="http://inuitcss.com/2010/12/media-queries-handier-than-you-think"/>
   <updated>2010-12-21T18:13:42+00:00</updated>
   <id>http://inuitcss.com/2010/12/media-queries-handier-than-you-think</id>
   <content type="html">&lt;p&gt;A lot of people are using media-queries of late to do full site changes to rework an entire page--or set of pages--based on a screen-size; from mobile through iPad, to 800x600, up to more 'modern' sizes. They can however have much more humble (but equally, if not more, nifty) applications. Here I'll share with you just two such applications I used recently on a real site.&lt;/p&gt;

&lt;p&gt;To begin, head to &lt;a href=&quot;http://suzannahaworth.com/&quot;&gt;suzannahaworth.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First off, have your browser (if possible) at a resolution of 1024x768px. You should see the main content (&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;) is centered in a &lt;a href=&quot;http://960.gs/&quot;&gt;960GS&lt;/a&gt; layout. I support 1024x768 as the smallest desktop screen-size. The code is simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;body{
    width:940px;
    padding:0 10px;
    margin:100px auto 0 auto;
    ...
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now size your browser up to 1280x1024px if you are able to. You should see that the main content (&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;) is 150px from the top of the screen and 100px from the left. I chose the arbitrary values to give the page a non-centered layout which was my ideal look. The code for this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;/*------------------------------------*\
    WIDE VERSION
\*------------------------------------*/
@media (min-width: 1100px){
body{
    margin:150px 0 0 100px;
}
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As simple as that.&lt;/p&gt;

&lt;p&gt;The other thing, and the one I like most, is the sidebar. With a resolution 1024x768px or above, visit the site and scroll the page. The sidebar is fixed, right? Now make that something more like 1024x500px and scroll, the sidebar scrolls too!&lt;/p&gt;

&lt;p&gt;I'm quite fond of this effect but unfortunately at certain screen sizes (such as my netbook) the sidebar runs off the page and can't be viewed because it won't scroll. This has always stopped me using fixed positioning much, until I had the idea to use CSS to say 'if the screen is big enough, give it position fixed, otherwise let it scroll!'&lt;/p&gt;

&lt;p&gt;The default code is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#sub-content div{
    position:fixed;
    width:220px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is overwritten (if applicable) by this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;/*------------------------------------*\
    SHORT VERSION
\*------------------------------------*/
@media (max-height: 540px){
#sub-content div{
    position:static;
}
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It really is that simple!&lt;/p&gt;

&lt;p&gt;So there you have it, media queries aren't just for major grunt and massive amounts of donkey work; small snippets can adapt the tiniest bits of your site to add changes where necessary, meaning you can preserve the features you want whilst not sacrificing the experience in situations where those features won't work!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Remote controlled hyperlinks (or multiple links in one hyperlink)</title>
   <link href="http://inuitcss.com/2010/12/remote-controlled-hyperlinks-or-multiple-links-in-one-hyperlink"/>
   <updated>2010-12-20T21:24:01+00:00</updated>
   <id>http://inuitcss.com/2010/12/remote-controlled-hyperlinks-or-multiple-links-in-one-hyperlink</id>
   <content type="html">&lt;p&gt;This is a little development technique I dreamt up the other day. I'm not even one-hundred percent sure what to call it, but due to what it does, which you'll find out in a second, I think &lt;em&gt;remote controlled hyperlinks&lt;/em&gt; will (sort of) do... I put it into practice on &lt;a href=&quot;http://suzannahaworth.com/&quot;&gt;Suze's new site&lt;/a&gt;, in the sidebar.&lt;/p&gt;

&lt;p&gt;Imagine you have a piece of running text like 'read more about me or get in touch'. Here we have two actions; read more and make contact. Let's also imagine that your about page and contact page are one and the same; the contact section is just your email address on that page. What I wanted was a cool way of giving the impression of two separate links to the same page but also making clear that the two links both did the same thing.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;/demos/remote-controlled-hyperlinks/&quot;&gt;Demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;What I came up with was &lt;a href=&quot;/demos/remote-controlled-hyperlinks/&quot;&gt;this&lt;/a&gt;, a way of hovering one link whilst giving the impression of hovering any number of quasi-links inside it.&lt;/p&gt;

&lt;p&gt;What this does is removes all link styles and evidence of being a link (hover states, cursor and outline) from the &lt;code&gt;a&lt;/code&gt; and applies those styles to &lt;code&gt;span&lt;/code&gt;s inside it. When you hover the &lt;code&gt;a&lt;/code&gt;, only any &lt;code&gt;span&lt;/code&gt;s inside it change, and when you click anywhere in the link, both &lt;code&gt;span&lt;/code&gt;s have active, outlined states.&lt;/p&gt;

&lt;h3&gt;The code&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;p&amp;gt;Read more &amp;lt;a href=&quot;#&quot; class=&quot;multi-links&quot;&amp;gt;&amp;lt;span&amp;gt;about me&amp;lt;/span&amp;gt; and &amp;lt;span&amp;gt;contact me&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Why not &amp;lt;a href=&quot;#&quot; class=&quot;multi-links&quot;&amp;gt;&amp;lt;span&amp;gt;search&amp;lt;/span&amp;gt; and &amp;lt;span&amp;gt;read&amp;lt;/span&amp;gt; my archives&amp;lt;/a&amp;gt;?&amp;lt;/p&amp;gt;

a,.multi-links span{
  font-weight:bold;
  color:#c00;
  text-decoration:none;
  cursor:pointer;
}
.multi-links,.multi-links:hover,.multi-links:active,.multi-links:focus{
  position:static;
  text-decoration:none;
  font-weight:normal;
  color:#333;
  outline:none;
  cursor:text; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Updated as per http://csswizardry.com/2010/12/remote-controlled-hyperlinks-or-multiple-links-in-one-hyperlink/#comment-22244 */&amp;lt;/span&amp;gt;
}
a:hover,a:active,a:focus,.multi-links:hover span{
  text-decoration:underline;
}
a:active,a:focus,.multi-links:active span,.multi-links:focus span{
  position:relative;
  top:1px;
  text-decoration:underline;
}
.multi-links:active span,.multi-links:focus span{
  outline:1px dotted #c00;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Caveats&lt;/h2&gt;

&lt;p&gt;Of course this can only work where the two links are one after the other because (as you know) you cannot stagger the nesting of tags. This of course limits its usefulness somewhat.&lt;/p&gt;

&lt;h3&gt;Concerns&lt;/h3&gt;

&lt;p&gt;This presentation and behaviour goes against most known link conventions, it could well be pretty confusing. If you were to use this at all, I think it'd be best left for use on a site where the users are likely to be more tech savvy than your usual.&lt;/p&gt;

&lt;p&gt;I think it'd look pretty cool on a portfolio type site, or a personal site such as Suze's where the copy lends itself well.&lt;/p&gt;

&lt;p&gt;Anyway, there it is, nothing groundbreaking but a pretty cool and interesting effect.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Simplified page borders in pure CSS</title>
   <link href="http://inuitcss.com/2010/12/simplified-page-borders-in-pure-css"/>
   <updated>2010-12-18T16:26:40+00:00</updated>
   <id>http://inuitcss.com/2010/12/simplified-page-borders-in-pure-css</id>
   <content type="html">&lt;p&gt;You may well be familiar with &lt;a href=&quot;http://hicksdesign.co.uk/&quot;&gt;John Hicks&lt;/a&gt;' page borders that he uses on his site. These are a series of fixed position &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; elements that are placed top, right, bottom and left of the viewport over the content, giving the illusion of a fixed border. I wanted to achieve a similar effect recently but, given &lt;a href=&quot;http://csswizardry.com/2010/12/the-implementation-appreciation-rule/&quot;&gt;my militant approach to progressive enhancement&lt;/a&gt;, I decided to drop the insemantic markup and fashion a pure CSS alternative. For a live demo please visit &lt;a href=&quot;http://suzannahaworth.com/&quot;&gt;suzannahaworth.com&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    BORDERS
\*------------------------------------*/&amp;lt;/span&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Create a series of empty pseudo-elements... */&amp;lt;/span&amp;gt;
html:before,html:after,body:before,body:after{
    content:&quot;&quot;;
    background:#dad8bb;
    position:fixed;
    display:block;
    z-index:5;
}

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* ...and position them! */&amp;lt;/span&amp;gt;
html:before{
    height:10px;
    left:0;
    right:0;
    top:0;
}
html:after{
    width:10px;
    top:0;
    right:0;
    bottom:0;
}
body:before{
    height:10px;
    right:0;
    bottom:0;
    left:0;
}
body:after{
    width:10px;
    top:0;
    bottom:0;
    left:0;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>The implementation ∝ appreciation rule</title>
   <link href="http://inuitcss.com/2010/12/the-implementation-appreciation-rule"/>
   <updated>2010-12-08T17:02:28+00:00</updated>
   <id>http://inuitcss.com/2010/12/the-implementation-appreciation-rule</id>
   <content type="html">&lt;p&gt;I've mentioned this idea to a few designers and developers of late who all seem to agree that it has a point and makes sense, so I thought I'd write up my thoughts on what I call &lt;em&gt;the implementation ∝ appreciation rule&lt;/em&gt;. That is to say, anything you spend time building (on top of, as well as and beyond the scope of the base build) should reap an amount of appreciation from the users that is proportional to the time it took to implement.&lt;/p&gt;

&lt;p&gt;I have a very aggressive and die-hard approach to progressive enhancement which I guess is to thank, in part, for the rule itself.&lt;/p&gt;

&lt;p&gt;Let's start with a very basic and tongue-in-cheek example. Let's imagine your client comes to you and says 'Hi, yeah, I love the site but can we make all the links, headings and image borders the same colour as my chihuahua's eyes?' ... 'Well sure, you can, but it'll take an hour at £xxx and I don't think that it's going to bring enough user attention, or even be noticed enough--if at all--to warrant the time it'll take me to do and the money it'll cost you to have it done.' In other words, the implementation is not proportional to the appreciation.&lt;/p&gt;

&lt;p&gt;Now this is a very stereotypical and clichéd client-from-hell example, but it does paint a picture of how the rule works; will the time it takes you to change something, or add a feature, reap enough benefits to make it worthwhile?&lt;/p&gt;

&lt;p&gt;You can't really feed this equation any numbers, of course, but that's where it's up to you to decide what is the cut off point. If you think that the amount of time it will take you to add a feature &lt;em&gt;is&lt;/em&gt; worthwhile and &lt;em&gt;will&lt;/em&gt; have a proportional appreciation then that's your choice, and whilst it may not be the same outcome as the agency down the road, it's you who is building that website.&lt;/p&gt;

&lt;p&gt;A more realistic example was during a build I was on with at work. I saw something in a PSD that I thought was missable enough not to fulfil the implementation ∝ appreciation rule; the time it would have taken me to code a robust, &amp;lt;IE7 solution would have been far greater than the amount of time any user would have spent thinking 'Wow, I'm glad he did that!'&lt;/p&gt;

&lt;p&gt;I had no metrics here, I wasn't able to say 'this will take me 45 minutes to get working in IE7 and below and will only be appreciated 0-0.8 seconds by any given user', but sometimes you just know what is sensible and what isn't.&lt;/p&gt;

&lt;p&gt;I guess that's part of the beauty of the implementation ∝ appreciation rule; you decide its metrics and make them work for you.&lt;/p&gt;

&lt;p&gt;I guess also, given the right account or project manager, a 'more quantifiable' or rational, measurable and reasonable stance such as the implementation ∝ appreciation rule could well be a more diplomatic and sensible way to steer clients toward taking the progressive enhancement route; something which nigh on all developers would love!&lt;/p&gt;

&lt;p&gt;I think an approach such as this is best introduced either on your own personal projects, or on builds where your clients is okay with progressive enhancement (which, hopefully, they all are!). After that I guess it would be time to introduce your most stubborn clients to it. After all; more often than not you're building sites for your clients' clients. Just because your client thinks dog-eye-blue links look cool does not mean to say &lt;em&gt;their&lt;/em&gt; clients and users will, and &lt;em&gt;they're&lt;/em&gt; the ones that matter…&lt;/p&gt;

&lt;p&gt;Furthermore, money talks. Being able to say 'this will cost you £xxx and is almost certainly not going to make you a single penny' (politely, of course) can often be enough to steer even the most headstrong client.&lt;/p&gt;

&lt;p&gt;And of course, even if something does not fulfil the rule and your client is &lt;em&gt;still&lt;/em&gt; insistent on a piece of work being done; they're paying you! Even if it makes no sense to you, or in the eyes of the equation, just see it as extra cash!&lt;/p&gt;

&lt;p&gt;So I don't suppose I've said anything new here, rather I've just offered a semi-quantifiable way to justify a more progressive approach to working for and with your clients. If a user won't appreciate or even notice it then why bother wasting time and money on it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The implementation must be proportional to the appreciation.&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS: CamelCase Seriously Sucks!</title>
   <link href="http://inuitcss.com/2010/12/css-camel-case-seriously-sucks"/>
   <updated>2010-12-06T20:54:23+00:00</updated>
   <id>http://inuitcss.com/2010/12/css-camel-case-seriously-sucks</id>
   <content type="html">&lt;p&gt;Now, I know this is going to instantly ruffle some feathers, but I'm not &lt;em&gt;normally&lt;/em&gt; one to tell you how to write your code. Sure, &lt;a href=&quot;http://www.venturelab.co.uk/devblog/2010/10/i-wont-tell-you-how-to-write-your-css/&quot;&gt;I dislike single-line CSS&lt;/a&gt;, but as long as your code is clean, sensible, understandable and consistent then there's not too much to complain about. The most important of these--in my eyes--is consistency. There is however one method that, straight off the bat, is instantly and inherently inconsistent... camel case.&lt;/p&gt;

&lt;h2&gt;CSS is a hyphen-delimited syntax&lt;/h2&gt;

&lt;p&gt;CSS is a hyphen-delimited syntax. By this I mean we write things like &lt;code&gt;font-size&lt;/code&gt;, &lt;code&gt;line-height&lt;/code&gt;, &lt;code&gt;border-bottom&lt;/code&gt; etc. So why then would you introduce another format?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#introPassage{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Using one format here */&amp;lt;/span&amp;gt;
  font-style:italic; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* And another here */&amp;lt;/span&amp;gt;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You just shouldn't mix syntaxes; &lt;em&gt;it's inconsistent&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;XHTML is a lower-case language&lt;/h3&gt;

&lt;p&gt;Furthermore is the inconsistency of placing a mix of upper- and lower-case classes/IDs in a lower-case syntax. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;img src=&quot;/img/people/harry-roberts.jpg&quot; alt=&quot;A picture of Harry Roberts&quot; class=&quot;userImageAvatar&quot; /&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we mix lower-case syntax and plain English content with something that is neither.&lt;/p&gt;

&lt;h3&gt;Inconsistency within your own rules&lt;/h3&gt;

&lt;p&gt;Camel case also adds the scope for inconsistency within your own defined rules. This might be very anal, but take the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#content{ ... }
#subContent{ ... }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There we have two elements used as generic content containers, but one is referred to as &lt;code&gt;content&lt;/code&gt;, and the other as &lt;code&gt;Content&lt;/code&gt;. Huh?!&lt;/p&gt;

&lt;h2&gt;It's harder to read&lt;/h2&gt;

&lt;p&gt;But what about underscores?&lt;/p&gt;

&lt;p&gt;Camel case is harder to read. Whitespace between words makes them far more legible. We can't have spaces in CSS, so we use hyphens instead. Compare the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#someIdIMadeEarlier{
  font-size:2em;
}

#some-id-i-made-earlier{
  font-size:2em;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think it's hard to argue that the second is not more readable...&lt;/p&gt;

&lt;h3&gt;Scannability&lt;/h3&gt;

&lt;p&gt;Also there's the issue of scannability, an important factor when writing code. Let's look at the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;.navHome a { ... }
.navAbout a{ ... }
.navPortfolio a{ ... }
.navContact a{ ... }

.nav-home a { ... }
.nav-about a{ ... }
.nav-portfolio a{ ... }
.nav-contact a{ ... }&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I personally find the second far easier to scan if I'm looking for a particular &lt;code&gt;nav-&lt;/code&gt; prefixed class.&lt;/p&gt;

&lt;h2&gt;Hyphens work better in text editors&lt;/h2&gt;

&lt;p&gt;This has been true of every text editor I have used.&lt;/p&gt;

&lt;p&gt;This is an odd one, but one that definitely, &lt;em&gt;definitely&lt;/em&gt; irks me. I can't &lt;code&gt;Ctrl+Shift+[Arrow key]&lt;/code&gt; single words in a camel case string. Take the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/12/camel-case-select.gif&quot; alt=&quot;Selecting camel case strings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here I use the Ctrl+Shift+Left arrow keys to select chunks of text--rather than one character--at at time. The problem here is that the camel case string is treated as one word. What if I just wanted to select &lt;code&gt;tweet&lt;/code&gt; and change it to &lt;code&gt;facebook&lt;/code&gt;? I  can't do that with &lt;code&gt;Ctrl+Shift+[Arrow key]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With the hyphen delimited version, we get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/12/hyphen-select.gif&quot; alt=&quot;Selecting hyphenated strings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is far nicer as we can select individual parts of a string with ease. Changing &lt;code&gt;tweet&lt;/code&gt; to &lt;code&gt;facebook&lt;/code&gt; here could not be simpler.&lt;/p&gt;

&lt;h3&gt;Underscores?&lt;/h3&gt;

&lt;p&gt;I mentioned underscores above; this also poses the same problems with inconsistency and with the inability to select individual segments of a string.&lt;/p&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;The thing to remember is &lt;em&gt;consistency is key&lt;/em&gt;. The syntax of a language has already been decided for you; you might as well stick with it!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tweet this!</title>
   <link href="http://inuitcss.com/2010/12/tweet-this"/>
   <updated>2010-12-02T20:32:22+00:00</updated>
   <id>http://inuitcss.com/2010/12/tweet-this</id>
   <content type="html">&lt;p&gt;This is just a very quick article of no real substance, but that I thought I'd share for all you Twittering bloggers out there. You may have noticed a few weeks ago I added a simple link at the end of every article in order for readers to quickly Tweet the current post with a link and my &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;Twitter username&lt;/a&gt;. A very small and trivial addition, which seems to have had massive benefits!&lt;/p&gt;

&lt;p&gt;The code for this very subtle addition is simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&quot;http://twitter.com/?status=&amp;lt;?php the_title(); ?&amp;gt;%20by%20@csswizardry%20&amp;lt;?php the_permalink() ?&amp;gt;&quot;&amp;gt;Please Tweet this article&amp;lt;/a&amp;gt;, it'd be surely appreciated.&amp;lt;/p&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Above:&lt;/strong&gt; Note the use of the Wordpress template tags.&lt;/p&gt;

&lt;p&gt;There we have it, just a simple textual link with a personal-sounding message. This is so trivial that I didn't actually bother putting any metrics into place to track its effectiveness. However, one thing I have noticed is that that subtle, textual link with a polite message (I didn't want a garish 'Tweet me now!' kind of button as that wouldn't have sat properly with the way I've done the rest of CSS Wizardry) has had quite a noticeable impact on articles' tweet rates. It seems to be very very effective!&lt;/p&gt;

&lt;p&gt;So yeah, basically if you're wondering how effective something such as that might be, I'd say very--although I don't have numbers to prove it....&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Let it snow!</title>
   <link href="http://inuitcss.com/2010/12/let-it-snow"/>
   <updated>2010-12-02T19:35:31+00:00</updated>
   <id>http://inuitcss.com/2010/12/let-it-snow</id>
   <content type="html">&lt;p&gt;Remember the snowy websites of the late 90s? The ones that cropped up around Christmas time and probably had a sleigh following the mouse cursor? Me too; horrible weren't they? However--given &lt;a href=&quot;http://www.bbc.co.uk/news/uk-scotland-11901718&quot;&gt;the recent weather the UK has had&lt;/a&gt;--I have decided to give them a 2010 revival. That is to say no nasty Javascript, and some not-too-unsightly markup! &lt;a href=&quot;/demos/snow/&quot;&gt;Without further ado: Let it snow!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Demo&lt;/h2&gt;

&lt;p&gt;We also have &lt;a href=&quot;/demos/snow/?time=day&quot;&gt;a daytime version&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;First off, &lt;a href=&quot;/demos/snow/&quot;&gt;look at the demo&lt;/a&gt; in IE8 or Firefox, &lt;em&gt;then&lt;/em&gt; in Chrome or Safari (i.e. non-Webkit, then Webkit).&lt;/p&gt;

&lt;p&gt;In Firefox you should see a series of snowflakes randomly sized and placed across the screen. In Webkit, you should see these snowflakes falling, all at different speeds. We also have a &lt;code&gt;repeat-x&lt;/code&gt; background image of some snow running across the bottom of the browser window.&lt;/p&gt;

&lt;h2&gt;The code&lt;/h2&gt;

&lt;p&gt;We use a lot of PHP to create the random effects applied to the snowflakes, and also automate a lot of the legwork needed to create 65 unique classes, it's commented as shown and should make total sense.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&amp;gt;
  &amp;lt;title&amp;gt;Let it snow&amp;lt;/title&amp;gt;
  &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot; /&amp;gt;
  &amp;lt;style type=&quot;text/css&quot;&amp;gt;

    &amp;lt;?php &amp;lt;span class=&quot;code-comment&quot;&amp;gt;//If the day parameter is set, use a different background&amp;lt;/span&amp;gt; ?&amp;gt;
    &amp;lt;?php if(isset($_GET['time']) &amp;amp;&amp;amp; $_GET['time'] == 'day') { ?&amp;gt;
    html{
      background:url(img/css/snow.png) bottom left repeat-x fixed #b4c8cc;
    }
    &amp;lt;?php } ?&amp;gt;


    &amp;lt;?php &amp;lt;span class=&quot;code-comment&quot;&amp;gt;//Number of snowflakes -- you decide!&amp;lt;/span&amp;gt; ?&amp;gt;
    &amp;lt;?php $snowflakeCount = 65;  ?&amp;gt;

    &amp;lt;?php &amp;lt;span class=&quot;code-comment&quot;&amp;gt;//Create a unique class for each of the snowflakes and assign each one a random size and animation duration&amp;lt;/span&amp;gt; ?&amp;gt;
    &amp;lt;?php  for($i = 1; $i &amp;lt;= $snowflakeCount; $i++) { ?&amp;gt;
      .snowflake-&amp;lt;?php echo $i ?&amp;gt;{
        &amp;lt;?php &amp;lt;span class=&quot;code-comment&quot;&amp;gt;//Create a random decimal number between 1 and 10:&amp;lt;/span&amp;gt; ?&amp;gt;
        -webkit-animation-duration:&amp;lt;?php echo (rand(10,100) / 10); ?&amp;gt;s;
        &amp;lt;?php &amp;lt;span class=&quot;code-comment&quot;&amp;gt;//Create a random decimal number between 0.1 and 2:&amp;lt;/span&amp;gt; ?&amp;gt;
        font-size:&amp;lt;?php echo (rand(1,20) / 10); ?&amp;gt;em;
      }
    &amp;lt;?php } ?&amp;gt;
  &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

  &amp;lt;div id=&quot;wrapper&quot;&amp;gt;
    &amp;lt;h1&amp;gt;Let it snow!&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;a href=&quot;/2010/12/let-it-snow/&quot;&amp;gt;Return to article.&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div id=&quot;snow&quot;&amp;gt;
    &amp;lt;?php &amp;lt;span class=&quot;code-comment&quot;&amp;gt;//Loop through your chosen amount of snowflakes and make that many empty spans (with associated class) and randomly place them on-screen&amp;lt;/span&amp;gt; ?&amp;gt;
    &amp;lt;?php for($i = 1; $i &amp;lt;= $snowflakeCount; $i++) { ?&amp;gt;
      &amp;lt;span class=&quot;snowflake snowflake-&amp;lt;?php echo $i; ?&amp;gt;&quot; style=&quot;top:&amp;lt;?php echo rand(1,98); ?&amp;gt;%; left:&amp;lt;?php echo rand(1,98); ?&amp;gt;%&quot;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;?php  } ?&amp;gt;
  &amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically we use PHP to create 65 empty &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s which are then randomly placed and sized on the page. We also give each one a random &lt;code&gt;-webkit-animation-duration&lt;/code&gt; so as to ensure they fall at different speeds. Two points worth noting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;?php &amp;lt;span class=&quot;code-comment&quot;&amp;gt;//Create a random decimal number between 1 and 10:&amp;lt;/span&amp;gt; ?&amp;gt;
-webkit-animation-duration:&amp;lt;?php echo (rand(10,100) / 10); ?&amp;gt;s;
&amp;lt;?php &amp;lt;span class=&quot;code-comment&quot;&amp;gt;//Create a random decimal number between 0.1 and 2:&amp;lt;/span&amp;gt; ?&amp;gt;
font-size:&amp;lt;?php echo (rand(1,20) / 10); ?&amp;gt;em;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;http://twitter.com/punch_n_pie&quot;&gt;Dan Bentley&lt;/a&gt; for his PHP input here-and-there--mine is a tad rusty.&lt;/p&gt;

&lt;p&gt;Here we use &lt;code&gt;rand(10,100)&lt;/code&gt; to create a random &lt;em&gt;whole&lt;/em&gt; number between ten and one hundred (let's say 75). We then divide this by ten to get a decimal (i.e. 7.5) to use as the duration in seconds.
We then use &lt;code&gt;rand(1,20)&lt;/code&gt; to create a random number between one and twenty (say, 5) which we then divide by ten to get a decimal (i.e. 0.5) for the &lt;code&gt;font-size&lt;/code&gt; in ems.&lt;/p&gt;

&lt;h3&gt;The CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  MAIN
\*------------------------------------*/&amp;lt;/span&amp;gt;
html{
  font-family:Calibri, Arial, Verdana, sans-serif;
  background:url(../img/css/snow.png) bottom left repeat-x fixed #222;
  color:#fff;
  text-shadow:1px 1px 1px rgba(0,0,0,0.5);
  height:101%;
}
body{
  width:940px;
  padding:10px;
  margin:0 auto;
}
#wrapper{
  position:relative;
  z-index:5; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Bring the content over the snowflakes */&amp;lt;/span&amp;gt;
}
h1{
  font-weight:bold;
  font-size:1.5em;
  margin-bottom:20px;
}
a{
  color:#fff;
}





&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  SNOWFLAKES
\*------------------------------------*/&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Set up a blank canvas in which to house the snowflakes */&amp;lt;/span&amp;gt;
#snow{
  position:fixed;
  top:0;
  right:0;
  bottom:0;
  left:0;
  overflow:hidden;
}
.snowflake{
  text-shadow:none;
  position:absolute;
  top:0;
  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Set up the animation */&amp;lt;/span&amp;gt;
  -webkit-animation-name:snowflake-animation;
  -webkit-animation-iteration-count:infinite;
  -webkit-animation-timing-function:linear;
}
&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Fill the empty span with a snowflake-like asterisk */&amp;lt;/span&amp;gt;
.snowflake:before{
  content:&quot;*&quot;;
}
@-webkit-keyframes snowflake-animation{
  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Start at the top */&amp;lt;/span&amp;gt;
  from{
    top:0%;
    -webkit-transform:rotate(0deg);
  }
  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Rotate by 360 degrees up until the half way point */&amp;lt;/span&amp;gt;
  50%{
    -webkit-transform:rotate(360deg);
  }
  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Animate to the bottom whilst rotating back to zero */&amp;lt;/span&amp;gt;
  to{
    top:100%;
    -webkit-transform:rotate(0deg);
  }
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The CSS, again, is extremely straightforward and self-explanatory. &lt;a href=&quot;/2010/09/keeping-code-clean-with-content/&quot;&gt;Use &lt;code&gt;content:&quot;&quot;;&lt;/code&gt; to keep our code a little cleaner&lt;/a&gt;, and animate all the snowflakes top-to-bottom whilst rotating them. Simple!&lt;/p&gt;

&lt;p&gt;So there we've put a new-age spin on a very dated (and still pretty garish) technique.&lt;/p&gt;

&lt;h2&gt;Addendum&lt;/h2&gt;

&lt;p&gt;Following &lt;a href=&quot;http://twitter.com/csswizardry/statuses/10425282116722688&quot;&gt;this Twitter conversation&lt;/a&gt; between &lt;a href=&quot;http://twitter.com/dbanksDesign&quot;&gt;Danny Banks&lt;/a&gt; and myself the &lt;code&gt;#snow&lt;/code&gt; &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; was introduced. Cheers for the heads-up, &lt;a href=&quot;http://twitter.com/dbanksDesign&quot;&gt;Danny&lt;/a&gt;!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Improving CSS tooltips</title>
   <link href="http://inuitcss.com/2010/11/improving-css-tooltips"/>
   <updated>2010-11-30T23:55:27+00:00</updated>
   <id>http://inuitcss.com/2010/11/improving-css-tooltips</id>
   <content type="html">&lt;p&gt;But only very slightly... &lt;a href=&quot;http://twitter.com/jackosborne&quot;&gt;Jack Osborne&lt;/a&gt;, whom I have followed on Twitter for a while now, posted some time ago &lt;a href=&quot;http://jackosborne.co.uk/articles/css-tooltips-with-the-pseudo-element/&quot;&gt;a tooltip tutorial&lt;/a&gt; whereby you utilise the &lt;code&gt;:after&lt;/code&gt; CSS pseudo-element and the &lt;code&gt;attr()&lt;/code&gt; function to populate it. His method works by giving an element a &lt;code&gt;title=&quot;&quot;&lt;/code&gt; attribute and a class of &lt;code&gt;tooltip&lt;/code&gt;, and placing the content of the title attribute after the content, all through CSS.&lt;/p&gt;

&lt;p&gt;The only &lt;em&gt;technical&lt;/em&gt; downside I can see here is the necessity for that class. Using a simple attribute selector we can ditch that and basically say 'if any element has a title, put that title after it in CSS'. By simply using &lt;code&gt;[title]&lt;/code&gt; over &lt;code&gt;.tooltip&lt;/code&gt; we can automate the process and trim some bytes, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;a href=&quot;http://twitter.com/jackosborne&quot; title=&quot;Follow Jack Osborne on Twitter&quot;&amp;gt;Jack Osborne&amp;lt;/a&amp;gt;


[title]{
    position:relative;
}
[title]:after{
    content:attr(title);
    color:#fff;
    background:#333;
    background:rgba(51,51,51,0.75);
    padding:5px;
    position:absolute;
    left:-9999px;
    opacity:0;
    bottom:100%;
    white-space:nowrap;
    -webkit-transition:0.25s linear opacity;
}
[title]:hover:after{
    left:5px;
    opacity:1;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Design and education</title>
   <link href="http://inuitcss.com/2010/11/design-and-education"/>
   <updated>2010-11-29T14:25:25+00:00</updated>
   <id>http://inuitcss.com/2010/11/design-and-education</id>
   <content type="html">&lt;p&gt;Last week &lt;a href=&quot;http://twitter.com/jazzpazz&quot;&gt;Pascal Raabe&lt;/a&gt; got in touch with me asking me to answer a few questions on the relevance and importance of formal education (i.e. a university degree) in the design world. My answer leaned more toward the web design/development side of things, but it's all much the same. He was happy with the feedback to his questions and also allowed me to post the Q&amp;A; here, because I thought it was quite interesting:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;I'm currently writing my dissertation in which I explore the relevance of design education in the knowledge economy and an increasingly digital future.&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;P.R.&lt;/strong&gt; I remember when I first came across CSS Wizardry, I was very impressed. I assume you opted not to go to uni and devised your professional career yourself and as far as I can see, very successfully so.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks for the kind words. And yeah, I did opt to skip university and go straight into the industry as soon as I could.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;P.R.&lt;/strong&gt; I would be interested to hear your opinion about design education. Do you think formal design education is still relevant? Why did you choose not to go to university? Do you feel that you somehow missed out on aspects of formal education that go beyond teaching (such as social life, time to experiment, etc.)?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I personally would (and actively do) suggest to people that, before considering enrolling in formal education in a web design/development field, they consider the benefits they would reap from the money it would cost.&lt;/p&gt;

&lt;p&gt;The reasons for this are generally that a) university is very expensive b) something such as web development is so accessible and learnable without a formal course that you can very easily learn the course content yourself for a fraction of the price (the cost of a few good books) or c) learn better, more current topics. Universities, where web development is concerned, are notoriously behind-the-times. I've heard countless horror stories, including the most recent from someone whose lecturer is teaching table based build!&lt;/p&gt;

&lt;p&gt;When the time came for me to decide on uni or industry it was a pretty simple decision. Several factors were taken into account but the most resounding were my then tiny web presence already gaining industry recognition and my own first-hand view of just what the courses were offering. Every clue at that time pointed to me having a wider knowledge, understanding and foothold than the graduates of the courses I was considering taking. As big-headed as that sounds it is unfortunately the truth; at 17 I had managed to teach myself more than most universities teach their students over three to four years.&lt;/p&gt;

&lt;p&gt;The final deciding factor in the move was a simple test of sorts. I sent two applications to two universities and to two web development agencies. Both agencies responded, and the first one I contacted offered me the job at the interview. That agency was Sense Internet; an award-winning big-hitter and quite a known name. To me the choice was clear—go to learn what I already knew over four years at an expense to myself, or start out full-time industry life at Sense…&lt;/p&gt;

&lt;p&gt;It was a few months after starting at Sense that I discovered Newcastle uni (one of the two I applied to) was using my &lt;a href=&quot;/web-design+/&quot;&gt;Web Design+&lt;/a&gt; document to teach their students. I almost ended up being on a course that were teaching using my material.&lt;/p&gt;

&lt;p&gt;So yeah, for those reasons I (gladly) decided against university.&lt;/p&gt;

&lt;p&gt;As far as missing out goes, it's a double edged sword. With uni comes a lot of socialising, with working at a respected agency comes credibility and cash. Bearing in mind I am still only 20 I guess I still am missing out, but I don't see it that way. Being in the industry has allowed me to move even further ahead, doing what I love and getting paid for it really is great in my opinion.&lt;/p&gt;

&lt;p&gt;With regards relevance, I'd say whilst not wholly irrelevant, a design/development degree is far from relevant. By that I guess I mean that relevance is probably not the best way of measuring it. It's more necessity, and as far as I'm concerned it is definitely not necessary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;P.R.&lt;/strong&gt; Judging by your portfolio and the informed commentary you put out there in your articles and on twitter, I'd say you're probably better educated than most design school graduates. How did you acquire these skills and knowledge? Were there any obstacles you had to overcome? Do you think university (or 'design school ) can prepare students adequately for the professional world?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks! I got these skills through genuine interest, lots of experimenting, stacks of reading and a lot of hard work. From the age of 15 my days would usually consist of get up, go to school, go to work, come home and tinker on my computer 'til the early hours. My PC in my room didn't actually have an Internet connection either, so I'd save articles and tutorials onto a USB stick to read in my room later.&lt;/p&gt;

&lt;p&gt;Two years of this and I'd decided I didn't need university. The key was that I was learning about the industry as it happened—things were always up-to-date. This is where degrees and formal education are lacking in my opinion; you can't plan the content of a course three years before it results in graduation. Three years in Internet years is such a long time it's untrue. That's why people are still being taught table-based development.&lt;/p&gt;

&lt;p&gt;I definitely don't think university can prepare you professionally, as it's just so far behind. As soon as you graduate and enter the industry a lot of people will have to disregard and relearn aspects of their education right away.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;P.R.&lt;/strong&gt; Lastly, what is your view of the 'professional world'? Many employers still require degrees, why do you think that is?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I think the kind of employers who might ask for a degree are &lt;em&gt;probably&lt;/em&gt; the type of employer who don't actually understand the technical side of web development. An employer who can look at, and appreciate and recognise, the talent of a web developer will know from that alone how good they are. Someone who doesn't know what they're looking for can always quantify their skills based on whether they have a degree or not. Whether this is a fair or accurate representation is another question entirely.&lt;/p&gt;

&lt;p&gt;In summary I personally think that you really don't need to go to university for web design/development. Over two-years of working in my room (i.e. alongside a full-time activity), at the cost of one or two good books I managed to go above and beyond what I could have spent three to four years learning full time at the expense of tens-of-thousands of pounds learning.&lt;/p&gt;

&lt;p&gt;Teach yourself at your own pace and learn what you want, when you want. Keep up to date, buy a few good books, get on Twitter, read articles and have a genuine passion and interest and you'll do a better job than any university will do.&lt;/p&gt;

&lt;p&gt;As for the social aspect, sure I missed a few years of partying mid-week and eating shop-brand beans-on-toast, but I did gain a wealth of knowledge, amazing friends, some exciting, real-world work and moreover a professional reputation. All before other people my age are even graduating yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forget uni, teach yourself, learn more, have fun.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Harry&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mark up a semantic, accessible, progressively enhanced, mobile optimised progress bar (bonus: style the numbers in an ordered list!)</title>
   <link href="http://inuitcss.com/2010/11/mark-up-a-semantic-accessible-progressively-enhanced-mobile-optimised-progress-bar-bonus-style-the-numbers-in-an-ordered-list"/>
   <updated>2010-11-17T18:27:32+00:00</updated>
   <id>http://inuitcss.com/2010/11/mark-up-a-semantic-accessible-progressively-enhanced-mobile-optimised-progress-bar-bonus-style-the-numbers-in-an-ordered-list</id>
   <content type="html">&lt;p&gt;How about that for an over-the-top title? But it's true, that's what we're going to be doing. It's been a while since my last post, unfortunately, so I thought I'd make up for it with this sizeable offering in which we will learn a lot of really great techniques in order to make something as simple as a progress bar. By which I mean a breadcrumb-esque meter of steps, such as you might find on a checkout process; we are making &lt;a href=&quot;/demos/progress-bar/&quot;&gt;this&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/demos/progress-bar/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/11/progress.jpg&quot; alt=&quot;Screenshot of the final product.&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And in doing so we will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Design and build a semantic, accessible and sensible progress bar.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Utilise the much underused method of styling page-specific elements based on their IDs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Style the numbers in an ordered list!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Progressively enhance it with some CSS3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimise it for mobile.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; This article isn't so much about a progress bar, but more an illustration that best practices and more advanced techniques can be applied to even the most insignificant aspects of a build to create something awesome!&lt;/p&gt;

&lt;h2&gt;Design and build&lt;/h2&gt;

&lt;p&gt;Let us assume the brief is this:&lt;/p&gt;

&lt;p&gt;We require a numbered progress bar to indicate user location (past, current and future) during a checkout path on the OurService™ website. It must:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Be fully accessible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide a section title with supporting information.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Highlight the user's current location in the process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be navigable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Work on mobile devices.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The design, let's assume, is predefined. It looks as above, purely because it has to. The design is not the major focus of this article, the code and techniques are.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Code what you consume, not what you see.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;Design&lt;/h3&gt;

&lt;p&gt;The progress bar shall be a linear, left to right series of linked labels. Current location shall be indicated by a change in colour, progression onto the next step shall be indicated by an arrow.&lt;/p&gt;

&lt;h3&gt;Build&lt;/h3&gt;

&lt;p&gt;For the purposes of this tutorial we shall assume the current page is the payment page.&lt;/p&gt;

&lt;p&gt;One school of though I find invaluable when it comes to sensible and semantic builds is code what you consume, not what you see. This is a very broad generalisation but works for the most part. Code content independently of (and before you consider) coding any styles. Web development basics, but fundamental to web standards and progressive enhancement.&lt;/p&gt;

&lt;p&gt;So, what are we consuming? It's an ordered list of steps which indicate location in a process.&lt;/p&gt;

&lt;p&gt;Okay so first off we know we need an &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; as this list has fixed and definite order. We also require titles and supporting copy for each item. As the titles and supporting copy require separation from one another we are going to wrap the titles in a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;; a generic inline container. This leaves us with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;body id=&quot;payment-page&quot;&amp;gt;

  &amp;lt;ol id=&quot;progress&quot;&amp;gt;

    &amp;lt;li class=&quot;details-step&quot;&amp;gt;
      &amp;lt;a href=&quot;#&quot;&amp;gt;
        &amp;lt;span&amp;gt;Your details&amp;lt;/span&amp;gt; 
        Name, email, address.
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;

    &amp;lt;li class=&quot;account-step&quot;&amp;gt;
      &amp;lt;a href=&quot;#&quot;&amp;gt;
        &amp;lt;span&amp;gt;Create account&amp;lt;/span&amp;gt; 
        Username and custom URL.
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;

    &amp;lt;li class=&quot;products-step&quot;&amp;gt;
      &amp;lt;a href=&quot;#&quot;&amp;gt;
        &amp;lt;span&amp;gt;Product options&amp;lt;/span&amp;gt; 
        Choose your package.
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;

    &amp;lt;li class=&quot;payment-step&quot;&amp;gt;
      &amp;lt;a href=&quot;#&quot;&amp;gt;
        &amp;lt;strong&amp;gt;
          &amp;lt;span&amp;gt;Payment&amp;lt;/span&amp;gt; 
          PayPal, or credit card.
        &amp;lt;/strong&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;

    &amp;lt;li class=&quot;go-step&quot;&amp;gt;
      &amp;lt;a href=&quot;#&quot;&amp;gt;
        &amp;lt;span&amp;gt;Go!&amp;lt;/span&amp;gt; 
        Start using OurService™
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;

  &amp;lt;/ol&amp;gt;

&amp;lt;/body&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few things in this code which I've not yet mentioned, one is the ID on the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, another being the class on each &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; and the last being the &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; wrapped around the payment page's text. I shall explain these next.&lt;/p&gt;

&lt;h4&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; ID and list item classes&lt;/h4&gt;

&lt;p&gt;A combination of an ID on the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and a class on a list item can allow you to know what the current page is. The CSS &lt;code&gt;#payment-page .payment-step{}&lt;/code&gt; will target the payment section of the progress bar when it is on the payment page in the process. Similarly, &lt;code&gt;#go-page .go-step{}&lt;/code&gt; will target the go item on the go page. I wrote &lt;a href=&quot;http://www.venturelab.co.uk/devblog/2010/06/body-idsmaking-life-easier-for-yourself/&quot;&gt;a much more in-depth article&lt;/a&gt; on this over at &lt;a href=&quot;http://www.venturelab.co.uk/&quot;&gt;Venturelab&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;The &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; around the payment step's text&lt;/h4&gt;

&lt;p&gt;If you're determining current page programatically, one could argue inserting a &lt;code&gt;class=&quot;current&quot;&lt;/code&gt; on the relevant item. This is doable, but avoiding such a class name is far nicer.&lt;/p&gt;

&lt;p&gt;As stated earlier we are assuming the current page to be the payment page. Now, we can style the current step on any page using CSS, as outlined above, however how would a user with styles disabled be able to tell what the current page is? How can we highlight this for those users?&lt;/p&gt;

&lt;p&gt;Well the solution would be to programatically wrap a &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; around the text on that page, undo the bolding effects with CSS for browsers with styles enabled, and allow people viewing unstyled content to see that the bolded item is the current page. This gives us:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/11/progress-unstyled.jpg&quot; alt=&quot;Unstyled progress bar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, users with styles disabled can clearly see the current link is the bolded one, this makes the progress bar that little bit more  accessible to those who might need it.&lt;/p&gt;

&lt;p&gt;So there we have it, the markup that powers the whole thing.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Styling&lt;/h2&gt;

&lt;p&gt;Now to style this thing up. First off we'll look at the very basic CSS, and that alone:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  MAIN
\*------------------------------------*/&amp;lt;/span&amp;gt;
html{
  height:101%;
}
body{
  font-family:Calibri, Arial, Verdana, sans-serif;
  background:#fff;
  color:#88979e;
  width:940px;
  padding:10px;
  margin:0 auto;
}


&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  PROGRESS
\*------------------------------------*/&amp;lt;/span&amp;gt;
#progress{
  list-style:none; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Remove the bullets */&amp;lt;/span&amp;gt;
  float:left; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Make its width equal to the combined width of the items inside it */&amp;lt;/span&amp;gt;
  margin-bottom:20px;
}
#progress li{
  float:left; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Stack them all up left */&amp;lt;/span&amp;gt;
  font-size:0.75em; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Make the entire item smaller */&amp;lt;/span&amp;gt;
  font-style:italic; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Make the entire item italic */&amp;lt;/span&amp;gt;
}
#progress a{
  display:block;
  text-decoration:none;
  padding:10px 25px 10px 10px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Padding to accomodate background image */&amp;lt;/span&amp;gt;
  background:#7b8d77;
  color:#fff;
}
#progress span{
  font-size:1.333em; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Bring the size of the title only back up */&amp;lt;/span&amp;gt;
  font-weight:bold;
  display:block;
  font-style:normal; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Undo the italics */&amp;lt;/span&amp;gt;
}
#progress strong{
  font-weight:normal; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Remove the bolding for CSS enabled browsers */&amp;lt;/span&amp;gt;
}
#progress a:hover{
  text-decoration:none;
}
#progress a:hover span{
  text-decoration:underline; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Underline the title on hover */&amp;lt;/span&amp;gt;
}
#details-page .details-step a,
#account-page .account-step a,
#products-page .products-step a,
#payment-page .payment-step a{
  background:url(../img/css/splitter.gif) right center no-repeat #a49d4d; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Arrow image on the current step */&amp;lt;/span&amp;gt;
}
#go-page .go-step a{
  background:#a49d4d; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Arrow image not needed on final step, colour only */&amp;lt;/span&amp;gt;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the above is very obvious, it is essentially just like creating a normal navigational menu, and gives us this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/11/progress-basic.jpg&quot; alt=&quot;Basic progress bar&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Styling numbers in ordered lists&lt;/h2&gt;

&lt;p&gt;Next up we style the numbers in the ordered list by using the very very useful and much unknown CSS counter module. Because you have such limited control over the appearance of your bullets in (ordered) lists they can be a pain to style. This pain is alleviated somewhat when using an unordered list as you can simply use a background image. It is an altogether different story when you're using an ordered list as the bullet needs to change with each list item.&lt;/p&gt;

&lt;p&gt;What we do here is use CSS to do a very prog-like job; we get it to loop through each item in a parent container and then increment a user-defined value each time it encounters a specified child. Sounds Greek? &lt;a href=&quot;http://www.impressivewebs.com/css-counter-increment/&quot;&gt;Read this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once we have this number available to us we use the CSS &lt;code&gt;:before&lt;/code&gt; pseudo-element and the &lt;code&gt;content:;&lt;/code&gt; property to insert the number before each item. How cool is that?!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  PROGRESS
\*------------------------------------*/&amp;lt;/span&amp;gt;
#progress{
  list-style:none;
  float:left;
  margin-bottom:20px;
  counter-reset:step; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Set up name of increment on parent */&amp;lt;/span&amp;gt;
}
#progress li{
  float:left;
  font-size:0.75em;
  font-style:italic;
}
#progress a{
  display:block;
  text-decoration:none;
  padding:10px 25px 10px 30px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Padding changed to 30px to accomodate number */&amp;lt;/span&amp;gt;
  background:#7b8d77;
  color:#fff;
  position:relative; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Relative position to allow absolute positioning later on */&amp;lt;/span&amp;gt;
}
#progress span{
  font-size:1.333em;
  font-weight:bold;
  display:block;
  font-style:normal;
}
#progress strong{
  font-weight:normal
}
#progress a:hover{
  text-decoration:none;
}
#progress a:hover span{
  text-decoration:underline;
}
#progress li a:before{
  counter-increment:step; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Increment the step on each occurance of this (pesudo) element */&amp;lt;/span&amp;gt;
  content:counter(step); &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Write out value of the increment */&amp;lt;/span&amp;gt;
  text-align:center;
  font-weight:bold;
  position:absolute; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Position number */&amp;lt;/span&amp;gt;
  top:50%;
  left:5px;
  margin-top:-8px;
}
#details-page .details-step a,
#account-page .account-step a,
#products-page .products-step a,
#payment-page .payment-step a{
  background:url(../img/css/splitter.gif) right center no-repeat #a49d4d;
}
#go-page .go-step a{
  background:#a49d4d;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This then gives us this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/11/no-css3-progress.jpg&quot; alt=&quot;Non-CSS3 progress bar&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Progressively enhancing&lt;/h2&gt;

&lt;p&gt;Now for the CSS3 progressive bits:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  PROGRESS
\*------------------------------------*/&amp;lt;/span&amp;gt;
#progress{
  background:#7b8d77; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Give the ol a background to prevent white showing through behind the items' round corners (change value to #f00 to see what I mean) */&amp;lt;/span&amp;gt;
}
#progress{
  -moz-border-radius:5px;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Round all corners of the progress bar */&amp;lt;/span&amp;gt;
  -webkit-border-radius:5px;
  border-radius:5px;
}
#progress a{
  text-shadow:1px 1px 1px rgba(0,0,0,0.25); &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* A small text-shadow */&amp;lt;/span&amp;gt;
  -moz-border-radius:5px 0 0 5px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Round the top- and bottom-left corners */&amp;lt;/span&amp;gt;
  -webkit-border-radius:5px 0 0 5px;
  border-radius:5px 0 0 5px;
}
#details-page .details-step a,
#account-page .account-step a,
#products-page .products-step a,
#payment-page .payment-step a{
  background:url(../img/css/splitter.gif) right center no-repeat #a49d4d;
}
#progress .go-step a{
  -moz-border-radius:5px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Round all corners of the final step */&amp;lt;/span&amp;gt;
  -webkit-border-radius:5px;
  border-radius:5px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full, combined CSS for the progress bar so far is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  MAIN
\*------------------------------------*/&amp;lt;/span&amp;gt;
html{
  height:101%;
}
body{
  font-family:Calibri, Arial, Verdana, sans-serif;
  background:#fff;
  color:#88979e;
  width:940px;
  padding:10px;
  margin:0 auto;
}


&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  PROGRESS
\*------------------------------------*/&amp;lt;/span&amp;gt;
#progress{
  list-style:none;
  background:#7b8d77;
  float:left;
  margin-bottom:20px;
  counter-reset:step;
  -moz-border-radius:5px;
  -webkit-border-radius:5px;
  border-radius:5px;
}
#progress li{
  float:left;
  font-size:0.75em;
  font-style:italic;
}
#progress a{
  display:block;
  text-decoration:none;
  padding:10px 25px 10px 30px;
  background:#7b8d77;
  color:#fff;
  text-shadow:1px 1px 1px rgba(0,0,0,0.25);
  position:relative;
  -moz-border-radius:5px 0 0 5px;
  -webkit-border-radius:5px 0 0 5px;
  border-radius:5px 0 0 5px;
}
#progress span{
  font-size:1.333em;
  font-weight:bold;
  display:block;
  font-style:normal;
}
#progress strong{
  font-weight:normal
}
#progress a:hover{
  text-decoration:none;
}
#progress a:hover span{
  text-decoration:underline;
}

#progress li a:before{
  counter-increment:step;
  content:counter(step);
  text-align:center;
  font-weight:bold;
  position:absolute;
  top:50%;
  left:5px;
  margin-top:-8px;
  padding:2px 6px;
  background:rgba(0,0,0,0.25);

  -moz-border-radius:20px;
  -webkit-border-radius:20px;
  border-radius:20px;
}
#details-page .details-step a,
#account-page .account-step a,
#products-page .products-step a,
#payment-page .payment-step a{
  background:url(../img/css/splitter.gif) right center no-repeat #a49d4d;
}
#go-page .go-step a{
  background:#a49d4d;
}
#progress .go-step a{
  -moz-border-radius:5px;
  -webkit-border-radius:5px;
  border-radius:5px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which, when coupled with the markup, gives this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/demos/progress-bar/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/11/progress.jpg&quot; alt=&quot;Screenshot of the final product.&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;Recap&lt;/h3&gt;

&lt;p&gt;So, let's cover what we've done so far. We've:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Coded up a semantic progress bar (using an ordered list and correct generic elements).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Made it accessible (addition of the strong around the content for non-CSS browsers).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Styled it all up.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Made use of &lt;a href=&quot;http://www.venturelab.co.uk/devblog/2010/06/body-idsmaking-life-easier-for-yourself/&quot;&gt;the body ID trick&lt;/a&gt; to mark the current page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Used CSS counters to style the numbers of an ordered list&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Progressively enhanced it all to make it a little easier on the eyes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Mobile optimisation&lt;/h2&gt;

&lt;p&gt;For more information on mobile/iPhone optimised sites please see &lt;a href=&quot;http://csswizardry.com/2010/01/iphone-css-tips-for-building-iphone-websites/&quot;&gt;my associated article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next up we need to optimise this thing for mobile. This couldn't be simpler. The key to optimising sites for mobile is linearise. Linearise everything.&lt;/p&gt;

&lt;p&gt;In your markup, add this line to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;head&amp;gt;
  &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&amp;gt;
  &amp;lt;title&amp;gt;Progress&amp;lt;/title&amp;gt;
  &amp;lt;strong&amp;gt;&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;&quot; /&amp;gt;&amp;lt;/strong&amp;gt;
  &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/new-style.css&quot; /&amp;gt;
&amp;lt;/head&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells the user agent that the viewport should be the same as the device's own screen-size, that it should be initially set to a scale of 1 (i.e. no scale), its maximum scale is set to 1, and that users can't scale themselves.&lt;/p&gt;

&lt;p&gt;Now, add the following to the very end of your CSS file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    MOBILE
\*------------------------------------*/&amp;lt;/span&amp;gt;
@media (max-width: 480px){ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* In any browser narrower that 480px... */&amp;lt;/span&amp;gt;
body{
    width:auto; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Give the body a fluid width... */&amp;lt;/span&amp;gt;
    padding:5px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* And a slight padding */&amp;lt;/span&amp;gt;
}
#progress{
    width:auto; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Give the list a fluid width */&amp;lt;/span&amp;gt;
    background:none; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Remove the list's background... */&amp;lt;/span&amp;gt;
    float:none; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* ...and float */&amp;lt;/span&amp;gt;
}
#progress li{
    float:none; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Remove list item float, causing them to stack */&amp;lt;/span&amp;gt;
    margin-bottom:1px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Space them slightly */&amp;lt;/span&amp;gt;
}
#progress a{
    margin:0 10px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Indent the left and right of each item by 10px */&amp;lt;/span&amp;gt;
    -moz-border-radius:5px; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Round all corners */&amp;lt;/span&amp;gt;
    -webkit-border-radius:5px;
    border-radius:5px;
}
#details-page .details-step a,
#account-page .account-step a,
#products-page .products-step a,
#payment-page .payment-step a,
#go-page .go-step a{
    background:#a49d4d; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Set the background of the current item */&amp;lt;/span&amp;gt;
    margin:0 auto; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Remove the 10px indent to show that the step is current */&amp;lt;/span&amp;gt;
}
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if you want to test this and don't have a smartphone, or haven't got this hosted in a live environment, simply resize your browser window right down until you see the change. I tend to use the Firefox Web Developer Toolbar addon to &lt;a href=&quot;http://csswizardry.com/wp-content/uploads/2010/11/mobile-optimised-progress.jpg&quot;&gt;resize the window to 480x800px&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the iPhone this now looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/11/iphone-progress.jpg&quot; alt=&quot;iPhone optimised progress bar&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;&lt;a href=&quot;http://csswizardry.com/demos/progress-bar/&quot;&gt;Demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;For the full working demo head to &lt;a href=&quot;http://csswizardry.com/demos/progress-bar/&quot;&gt;http://csswizardry.com/demos/progress-bar/&lt;/a&gt;. For the complete CSS (with reset) please see &lt;a href=&quot;http://csswizardry.com/demos/progress-bar/css/style.css&quot;&gt;http://csswizardry.com/demos/progress-bar/css/style.css&lt;/a&gt;. Also, try using Firebug to change the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;'s ID to &lt;code&gt;go-page&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Final words&lt;/h2&gt;

&lt;p&gt;As I stated previously, this article isn't so much about the progress bar itself. What I hope this article has shown is how something as small and trivial as a progress bar has a wealth of little nooks and crannies in which to immerse yourself. Semantics, accessibility, using &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; IDs to style current states without a &lt;code&gt;class=&quot;current&quot;&lt;/code&gt;, how to use CSS counters to style the numbers in an ordered list, how to progressively enhance lean markup, and how to optimise things for mobile in a flash.&lt;/p&gt;

&lt;p&gt;All of the above skills are easily and quickly transferable. It might be a progress bar today, but what could it be tomorrow? Skills like the ones covered here give you the potential to make something great, out of something very very simple.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Are CSS3 gradients Fool's Gold?</title>
   <link href="http://inuitcss.com/2010/10/are-css3-gradients-fools-gold"/>
   <updated>2010-10-25T15:19:31+01:00</updated>
   <id>http://inuitcss.com/2010/10/are-css3-gradients-fools-gold</id>
   <content type="html">&lt;p&gt;During a &lt;del&gt;discussion&lt;/del&gt; &lt;del&gt;debate&lt;/del&gt; argument with a developer today I, in a roundabout way, arrived at the question 'are CSS3 gradients Fool's Gold?' The argument itself is somewhat irrelevant and far too long winded to go into here, but the long and short of it was that he was trying to force some crazy CSS3 syntax into doing something that only a background image should be used for.&lt;/p&gt;

&lt;p&gt;After I had pointed this out to him, one of his arguments was (and I paraphrase) 'if a user disables images I still want them to be able to see it'.&lt;/p&gt;

&lt;p&gt;This astounded me a little, my response was (again, paraphrased) 'If a user wants to disable images then why spoof it? If they want to disable images they don't want to be left with something-that-looks-just-like-an-image-but-technically-isn't, they want that gone because they opted to disable images!'&lt;/p&gt;

&lt;p&gt;If a user has trouble reading something because of the rainbowey background on it and they choose to disable images to aid contrast, only to find that the rainbow persists, does this not present an accessibility issue?&lt;/p&gt;

&lt;p&gt;This then led me onto the thought that, actually, this is the same with all CSS3 gradients. I have been using CSS gradients for some time now, and they're live as we speak on several different sites. But are they such a good idea...?&lt;/p&gt;

&lt;p&gt;Now, I am just thinking out loud here, but are they a Fool's Gold? Do they present accessibility issues? Or am I over-dramatising and over-thinking things?&lt;/p&gt;

&lt;p&gt;Any thoughts or information about this would be great to help get the discussion opened up...&lt;/p&gt;

&lt;h2&gt;Addendum&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Please read this bit&lt;/strong&gt;, I do know how and why they are a good thing, but I'm not here to talk about that...&lt;/p&gt;

&lt;p&gt;To make clear, I fully understand all the benefits of using CSS gradients, they're a fantastic addition to CSS and I can wholeheartedly see why and where they are good (scalability, ease of change etc) however this post focusses entirely on possible drawbacks. I know all about their benefits, I just haven't mentioned them here.&lt;/p&gt;

&lt;p&gt;Furthermore, the rainbow gradient was a tongue-in-cheek example. It isn't however all that far from the truth...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>I hate that I love Writer</title>
   <link href="http://inuitcss.com/2010/10/i-hate-that-i-love-writer"/>
   <updated>2010-10-20T21:17:51+01:00</updated>
   <id>http://inuitcss.com/2010/10/i-hate-that-i-love-writer</id>
   <content type="html">&lt;p&gt;I absolutely hate that I love &lt;a href=&quot;http://informationarchitects.jp/&quot;&gt;Information Architects&lt;/a&gt;' &lt;a href=&quot;http://itunes.apple.com/us/app/ia-writer/id392502056?mt=8&quot;&gt;&lt;em&gt;Writer&lt;/em&gt;&lt;/a&gt;. Every time I use it I get a little angry inside because I just love it! Weird, I know, but true nonetheless. It's just so plain but so great that I get all these funny feelings about it, which always resolves to an envious kind of adoration.&lt;/p&gt;

&lt;p&gt;I have followed &lt;a href=&quot;http://twitter.com/iA&quot;&gt;iA&lt;/a&gt; fervently for as long as I've known about them. They are, to me, a beacon of what is good about this industry; they're an inspirational agency and one that I love. So, when I heard that they were working on an iPad app I was immediately interested. They'd set the bar pretty high with their other work, but I had equally high hopes and expectations.&lt;/p&gt;

&lt;p&gt;Anyway, the day the app went on sale I bought it. At £2.99 it's relatively pricey in app terms, but (as I tend to do more often than not) I reasoned that £3 is less than one pint, so actually pretty reasonable.&lt;/p&gt;

&lt;p&gt;I fired it up and saw pretty much nothing, which I guess is the point, but I did feel a little 'Oh, anti-climax...' I tinkered with it for a few minutes, idly typing nothings, deleting them, then typing some more. It was pretty mediocre. Or so I thought...&lt;/p&gt;

&lt;p&gt;As I'd only been typing dummy text I'd not really used it properly, or to its full potential. I didn't see the point, nor did I reap the benefits. That evening, lying in bed, I reached for my iPad and started drafting an article. That's when it hit me. Writer is awesome!&lt;/p&gt;

&lt;p&gt;When you start using it properly you realise that its stark UI and outward lack of features is a wealth of features in itself. Writer makes writing so easy, and it honestly seems to come more naturally. It's a genuine breath of fresh air for anyone who is used to writing on a computer.&lt;/p&gt;

&lt;p&gt;I hate word processors with a passion. They're horrible, horrible things. On this basis I tend(ed) to draft any articles in my text-editor, &lt;a href=&quot;http://notepad-plus-plus.org/&quot;&gt;Notepad++&lt;/a&gt;. It strips out all the stuff I don't need and leaves just me, the canvas and the letters. Oh and all those icons in the UI. And the nastily long line-length. And the awkward look of code-sized type as prose...&lt;/p&gt;

&lt;p&gt;Writer is so amazingly simple, and that's why it annoys me. How can something so simple be so fantastic?! It just doesn't make sense! I paid almost-a-beer for something that does nothing! Yet it allows me to do everything. I get a little shocked, too, every time I use Writer; I get shocked that each time I open it up I am met with the same sparse interface, and yet the removal of nigh on everything allows me to do whatever I want. It clears the mind and allows the text to just spill onto the 'page'.&lt;/p&gt;

&lt;p&gt;Since buying Writer I have written up every CSS Wizardry article in it. Right now, as I type this, I'm slouched in my chair, listening to music, sipping a beer and just writing. Writer is the perfect app for the iPad. It's using something very comfortable and ergonomic on something very comfortable and ergonomic. Genius.&lt;/p&gt;

&lt;p&gt;I've always said that there are fewer things more complex than making something more simple, yet iA have nailed it. This idea is so simple yet so well executed that I get the oh so familiar 'why didn't I think of that?!', and &lt;em&gt;this&lt;/em&gt; is what annoys me. A huge well-done to Oliver et al. Writer is a masterpiece.&lt;/p&gt;

&lt;p&gt;So, if you have an iPad and write a blog, articles, short stories or anything, do yourself a favour and &lt;a href=&quot;http://itunes.apple.com/us/app/ia-writer/id392502056?mt=8&quot;&gt;buy Writer&lt;/a&gt;--see if it pisses you off too ;)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unsung heroes</title>
   <link href="http://inuitcss.com/2010/10/unsung-heroes"/>
   <updated>2010-10-20T12:41:49+01:00</updated>
   <id>http://inuitcss.com/2010/10/unsung-heroes</id>
   <content type="html">&lt;p&gt;The internet is awash with web-celebrities; designers and developers ('&lt;a href=&quot;http://harryroberts.co.uk/2010/07/you-are-not-a-html-rockstar/&quot;&gt;rockstars&lt;/a&gt;?') who have, for whatever reason, amassed countless followers and people hanging on their every word. This is great, and can get the message from some of the industry's best to the masses via one blog post and a few tweets. Or is it? Just because someone has over ten thousand followers does not &lt;em&gt;necessarily&lt;/em&gt; mean that they know the best techniques, or what the most efficient, accessible and trustworthy solution is.&lt;/p&gt;

&lt;p&gt;One comment, one person; who is your unsung hero?&lt;/p&gt;

&lt;p&gt;I don't follow many web-celebrities, I don't find that they're always the best source of quality content, nor are they necessarily the first to invent or do something--people just get the impression they were because no one else saw the humble guy who lives down the road tweeting about it two months ago.&lt;/p&gt;

&lt;p&gt;The best developers out there, you've probably never even heard of.&lt;/p&gt;

&lt;p&gt;So I've decided to do an unsung heroes post. Leave one comment with one designer/developer who &lt;em&gt;you&lt;/em&gt; feel is underrated, at the top of their game, an inspiration, and someone who deserves more recognition than they get.&lt;/p&gt;

&lt;p&gt;I'll kick things off with my suggestion: &lt;a href=&quot;http://meiert.com/en/&quot;&gt;Jens Meiert&lt;/a&gt;. Now he's not a &lt;em&gt;total&lt;/em&gt; unknown, but certainly deserving of a far wider audience.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Name

    Jens Meiert


URL

    [http://meiert.com/en/](http://meiert.com/en/)


Twitter

    [@j9t](http://twitter.com/j9t)


Keywords

    Semantics, Sensibility, Development, Efficiency, Simplicity


Notes

    Since as long as I can remember I've been reading Jens' site. The way he builds shares my ideals almost exactly. He looks at things in the most objective way, he builds with maintainability, scalability and efficiency in mind. His knowledge is concentrated on front-end build, but spans a lot in that area. He codes to very high standards and in a way that is ideally suited to teamwork, _as all code should be_. He writes code that is shareable and lean, understandable and efficient, and above all else, sensible. He doesn't talk about 'how to create fancy download buttons' or 'woohoo look at the latest CSS3 whatsit!', he writes about things that actually matter. He talks from a business oriented viewpoint where things are really most important; creating code of a high standard that works now and will work in five years time. This is what building websites is about, creating a quality product that will stand the test of time and is built efficiently and sensibly. If everyone worked like Jens I firmly believe we'd all be happier in our jobs. Not enough people out there really put much thought into what they're coding, they tend to focus more on how the end result will look. Not Jens, I get absolutely fanatical about his ethics and qualities; he exhibits a true understanding for his profession, an understanding that really really deserves attention above and beyond that of most of the people writing on similar subjects. A quick flick through [his archives](http://meiert.com/en/blog/2010/) and I'm sure you can very quickly see what I mean. This is standards at its finest.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So there we have it, my 'unsung hero'. Who's yours? Copy/paste the following template to add your unsung hero to the discussion. Who has been an inspiration to you? Who do you wish more people listened to? Let's get the discussion under way and see who really keeps this industry on the up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;dl&amp;gt;

    &amp;lt;dt&amp;gt;Name&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;Jens Meiert&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;URL&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;a href=&quot;http://meiert.com/en/&quot;&amp;gt;http://meiert.com/en/&amp;lt;/a&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;Twitter&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;a href=&quot;http://twitter.com/j9t&quot;&amp;gt;@j9t&amp;lt;/a&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;Keywords&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;Semantics, Sensibility, Development, Efficiency, Simplicity&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;Notes&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;Since as long as I can remember I've been reading Jens' site. The way he builds shares my ideals almost exactly. He looks at things in the most objective way, he builds with maintainability, scalability and efficiency in mind. His knowledge is concentrated on front-end build, but spans a lot in that area. He codes to a very high standards and in a way that is ideall suited to teamwork, &amp;lt;em&amp;gt;as all code should be&amp;lt;/em&amp;gt;. He doesn't talk about 'how to create fancy download buttons' or 'woohoo look at the latest CSS3 whatsit!', he writes about things that actually matter. He talks from a business oriented viewpoint where things really matter; creating code of a high standard that works now and will work in five years time. This is what building websites is about, creating a quality product that will stand the test of time, is built efficiently and sensibly. If everyone worked like Jens I firmly believe we'd all be happier in our jobs.&amp;lt;/dd&amp;gt;

&amp;lt;/dl&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Things are changing at CSS Wizardry</title>
   <link href="http://inuitcss.com/2010/10/things-are-changing-at-css-wizardry"/>
   <updated>2010-10-19T13:08:19+01:00</updated>
   <id>http://inuitcss.com/2010/10/things-are-changing-at-css-wizardry</id>
   <content type="html">&lt;p&gt;Things are changing... but not much, thankfully. In light of a culmination of recent events, I have decided to start &lt;a href=&quot;/advertising/&quot;&gt;advertising&lt;/a&gt; on CSS Wizardry. Not spammy, unmoderated Google ads, or intrusive, unrelated and pointless ones, but single, exclusive ads reserved for one advertiser per month and for only £150. Here's why, after three years, I've made that decision...&lt;/p&gt;

&lt;p&gt;The timing is handy. CSS Wizardry has just broken the &lt;a href=&quot;http://csswizardry.com/wp-content/uploads/2010/10/stats.jpg&quot;&gt;50,000 visitors-in-30-days milestone&lt;/a&gt; and its &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;associated Twitter account&lt;/a&gt; has just exceeded 2,500 followers. These followers include some of the industry's most esteemed individuals.&lt;/p&gt;

&lt;p&gt;You may be familiar with &lt;a href=&quot;http://csswizardry.com/2010/09/css-wizardry-personal-content-and-getting-things-for-free/&quot;&gt;this recent article&lt;/a&gt; about CSS Wizardry's content and getting things for free. Well it's true, I put a lot of effort into writing articles here and, if recent traffic and follower counts are anything to go by, you guys seem to enjoy them. I love this, this is what keeps me writing, I just &lt;em&gt;love&lt;/em&gt; doing it. However, whilst I don't mind the time cost, there is the financial cost of maintaining CSS Wizardry. Next month I get the £xxx.xx bill for a year's hosting and although I'm more than happy to pay it, it will be coming out of my salaried pay-packet.&lt;/p&gt;

&lt;p&gt;So I've decided that it's time to attempt to monetise CSS Wizardry. Ads will not be expensive, as they don't need to be. They will not be spammy, because I don't want them to be. There will not be multitudes of them, because I'm sure you don't want there to be.&lt;/p&gt;

&lt;p&gt;An ad appears throughout the CSS Wizardry blog and associated pages for one calendar month, it is the same ad, and it's yours and yours only; no other ads appear alongside yours at all.&lt;/p&gt;

&lt;p&gt;If you, or someone you know, are interested then see the &lt;a href=&quot;/advertising/&quot;&gt;advertising page&lt;/a&gt; and drop me an email. This is all very informal, I hope the price is okay but feel free to enquire about special/bulk-buying offers.&lt;/p&gt;

&lt;p&gt;This month's advertiser is &lt;a href=&quot;http://twitter.com/dealpond&quot;&gt;Dealpond&lt;/a&gt;, a site I've used myself on a number of occasions when looking for the best prices on books, electronics and gadgets.&lt;/p&gt;

&lt;p&gt;Fingers crossed that this new strategy takes off and I hope it won't alienate readers not used to ads. I've tried to do this in the most classy way possible!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Your logo is an image, not a <h1></title>
   <link href="http://inuitcss.com/2010/10/your-logo-is-an-image-not-a-h1"/>
   <updated>2010-10-13T22:12:14+01:00</updated>
   <id>http://inuitcss.com/2010/10/your-logo-is-an-image-not-a-h1</id>
   <content type="html">&lt;p&gt;Should you mark your logo up as an image or a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;? There has been much debate for a long time now as to how to mark up logos. Should your logo be an inline image (&lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt;) or a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; with a background style--using one of &lt;a href=&quot;http://www.mezzoblue.com/tests/revised-image-replacement/&quot;&gt;many means of image replacement&lt;/a&gt;--to apply the logo to that? This debate has been raging for goodness knows how long, but I'm going to try and explain in this article why you should mark up logos as inline images, and why that's the most sensible option.&lt;/p&gt;

&lt;h2&gt;A brief example of each&lt;/h2&gt;

&lt;p&gt;Using an image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;a href=&quot;/&quot; title=&quot;Return to the homepage&quot; id=&quot;logo&quot;&amp;gt;
  &amp;lt;img src=&quot;/images/logo.gif&quot; alt=&quot;Nike logo&quot; /&amp;gt;
&amp;lt;/a&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;h1&amp;gt;&amp;lt;a href=&quot;/&quot; title=&quot;Return to the homepage&quot;&amp;gt;Nike&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;

h1 a{
  width:;
  height:;
  display:block;
  text-indent:-9999px;
  background:url(/images/logo.gif);
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Your logo is content&lt;/h2&gt;

&lt;p&gt;Your logo is content, not style. Style vs. content, in the web standards sense of the term, pertains to information and content that is required to be present/accessible irrespective of the presence of styles (in other words, CSS).&lt;/p&gt;

&lt;p&gt;A logo is content. Let's use Nike as an example throughout. Regardless of whether Nike's site is blue, red or green, their logo will always be 'that' swoosh. The logo is totally independent of the site's surrounding styles as the logo is content.&lt;/p&gt;

&lt;p&gt;Imagine you were to visit Nike's site in a browser that doesn't support styles. It only makes sense that that logo is still there. It's Nike's brand, and it'll be their brand whether their site is styled or not.&lt;/p&gt;

&lt;p&gt;So your logo is content; it's a visual representation of a brand that is defined long before that company's site can be brought into consideration. Nike is admittedly a very big brand, but a brand nonetheless. Transport that way of thinking to any build and it's becomes pretty obvious that a logo is indeed content.&lt;/p&gt;

&lt;h3&gt;Content = markup&lt;/h3&gt;

&lt;p&gt;So if a logo is content, a logo is markup, right? Right. You'd probably want to mark up your logo as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;a href=&quot;/&quot; title=&quot;Return to the homepage&quot; id=&quot;logo&quot;&amp;gt;
  &amp;lt;img src=&quot;/images/logo.gif&quot; alt=&quot;Nike logo&quot; /&amp;gt;
&amp;lt;/a&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As simple as that. Regardless of styles your content--and therefore logo--persist. Use the &lt;code&gt;id=&quot;logo&quot;&lt;/code&gt; to style anything such as positioning, and that's it.&lt;/p&gt;

&lt;h2&gt;Your logo isn't a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;So we've proved that a logo is content, but let's now prove that it &lt;em&gt;isn't&lt;/em&gt; a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, a commonly held practice for marking up logos.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;To have the &lt;h1&gt; being the logo would be like having your name being a photo. They both represent the same thing, but are separate entities...&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element is defined as being the uppermost, all-encompassing title of a page. Now, for a homepage this is something of a grey area. The chances are that your site is the site which the logo represents, i.e. Nike's logo appearing on Nike's site. On the homepage the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; may well be whatever the logo says; it may well be &lt;code&gt;&amp;lt;h1&amp;gt;Nike&amp;lt;/h1&amp;gt;&lt;/code&gt;. This is a case where the logo and the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; share the same meaning. &lt;em&gt;But&lt;/em&gt;, as discussed, the content of the two is different. The logo is still branding, and the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is still a textual element. To have the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; being the logo would be like having your name being a photo. They both represent the same thing, but are separate entities in themselves. A coded example might be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;a href=&quot;/&quot; title=&quot;Return to the homepage&quot; id=&quot;logo&quot;&amp;gt;
  &amp;lt;img src=&quot;/images/logo.gif&quot; alt=&quot;Nike logo&quot; /&amp;gt;
&amp;lt;/a&amp;gt;
...
&amp;lt;h1&amp;gt;Welcome to Nike's international website&amp;lt;/h1&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes a homepage doesn't even require a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; to be visible. The logo alone is enough, but your page still needs that &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; in the markup somewhere. It needs the logo to be an image but also needs a level one heading. Here you might want to have an 'invisible' &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; like I have here on CSS Wizardry. This means that semantically you're marking up your logo as an image, as it should be, and providing a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; to screen-readers.&lt;/p&gt;

&lt;h2&gt;What if you don't have a logo?&lt;/h2&gt;

&lt;p&gt;Some sites, CSS Wizardry included, don't have a logo as such. I use a bit of browser text as a logo, but even though this is textual content I do not mark this up as a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;. I mark it up using an &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;. This is still a text-module element, and to my mind is semantically sound.&lt;/p&gt;

&lt;h2&gt;Problems with using a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; to mark up a logo&lt;/h2&gt;

&lt;p&gt;Although I did admit that the logo's text might also be the title (&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;) of the homepage, there's a very good reason why you should not mark the logo up as one. What about your 'about page'? The title of that page is undoubtedly 'About me', and the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is a page's title. It only stands to reason, then, that the page's &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; reads &lt;code&gt;&amp;lt;h1&amp;gt;About me&amp;lt;/h1&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If however I had marked up my logo as a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, the about page's title would also be the same as the homepage, and a &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; would have to take place as the page's actual title. This is wrong; obviously and unarguably wrong. And, by this token, your contact and portfolio and services pages' titles would all also be the same. This is the problem with marking logos up as &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;s.&lt;/p&gt;

&lt;h2&gt;More practical reasons&lt;/h2&gt;

&lt;p&gt;And if you weren't convinced enough already, using an inline image will actually make your life easier.&lt;/p&gt;

&lt;p&gt;As previously mentioned, using an inline image allows  the logo to persist regardless of styles. This means that print stylesheets will have a logo embedded in the page as an image which they can print. Most printers, to conserve ink, will not print backgrounds, which means that any logos applied by means of a background image will be lost at print. Not great that your branding will be lost as soon as your site is printed, really.&lt;/p&gt;

&lt;p&gt;Furthermore, an inline image can have its dimensions altered. A background image on a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; can't. You can alter the size of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, but not its background (unless you're using some CSS3 background magic). This means that you cannot easily adapt the logo to different sizes through CSS alone; think about optimising for mobile. A useful CSS snippet for any mobile site is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;img{
  width:100%
  max-width:100%;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that all images will fill, but not break out of, the mobile screen. If your logo is applied as a background image it'll get ignored here. What might happen is that your &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; will render narrower that its background image's dimensions (i.e. the background image is wider in pixels than the device's screen is) on a mobile device, giving the impression of clipping the logo off. Conversely, the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; might not fill the width of the page leaving it, and therefore its logo background, spanning only a percentage of the page.&lt;/p&gt;

&lt;p&gt;You can manipulate a logo as an &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; far easier than you can as a background.&lt;/p&gt;

&lt;h2&gt;Stop applying logos as backgrounds&lt;/h2&gt;

&lt;p&gt;This really is semantics and web standards basics. A logo is content, not style. Just because your site is named the same as your logo reads does not make them the same thing. A logo should not be applied as backgrounds, and especially not to &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;s. Some of the industry's 'best' flaunt this lack of standards openly, and it's just plain incorrect.&lt;/p&gt;

&lt;p&gt;A logo is an image, a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is a title. Your logo is never a background image, it's never secondary content to anything. It is content in its own right and should be treated as such. Your logo is an image.&lt;/p&gt;

&lt;p&gt;If you take only one thing from this article, let it be that &lt;strong&gt;your logo is content, therefore an image&lt;/strong&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hyperbolic title using the word sexy to describe some code</title>
   <link href="http://inuitcss.com/2010/10/hyperbolic-title-using-the-word-sexy-to-describe-some-code"/>
   <updated>2010-10-11T18:46:57+01:00</updated>
   <id>http://inuitcss.com/2010/10/hyperbolic-title-using-the-word-sexy-to-describe-some-code</id>
   <content type="html">&lt;p&gt;Brief explanation as to how I, a 'ninja' or 'rockstar' of some description, have managed to solve a problem that doesn't exist whilst utilising some less-than-exemplary techniques. A quick sentence mocking those who haven't used all Javascript libraries on every page of their latest build. This is followed with a rhetorical question asking why not enough people are using verbose libraries to fix problems caused by poor markup and stupid CSS.&lt;/p&gt;

&lt;p&gt;Brief paragraph explaining why I think there's a massive gap in the market for something like this; something which has no production or commercial value.&lt;/p&gt;

&lt;p&gt;Basic misunderstanding of the underlying principles of the problem asserted in no uncertain terms here.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;Transitional doctype.

  Links to JS libraries used to force my shoddy code into working.

  Unexplained code which is only tested in non-IE browsers, and only actually works in Firefox.

  This code is also littered with semantic inaccuracies which further proves my lack of basic knowledge on this subject.

  This line actually breaks what I'm trying to achieve. I should remove it but I don't know that.

  &amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- I forgot to remove this comment from this section which I have actually copied and pasted from someone else --&amp;gt;&amp;lt;/span&amp;gt;

  Displaying my lack of JS knowledge by combining external libraries with inline code.

  I left this line in because I don't know what it does, and I don't want to break anything by taking it out. I probably don't actually need it.

  This miraculously fixes the above breakage. I worked this one out myself =D

Untold lines of code later, I have achieved what most developers could have done in less than half the time and to more than ten times the quality.&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A paragraph which talks about what the above achieves, but fails to explain how it does so. This is largely because I don't know this myself, and the fact that the source-code I copied wasn't commented enough to allow me to work it out.&lt;/p&gt;

&lt;p&gt;Giant download button.&lt;/p&gt;

&lt;p&gt;Quoting someone out of context to help further my claims that this is indeed the most effective method for combating something which is nothing but I've made into a big thing through my knowing nothing.&lt;/p&gt;

&lt;p&gt;Brief self-back-patting sentence. Mild, unaimed mockery at developers failing to embrace the power of jQuery coupled with MooTools combined with eight lines of stylistic markup and some inaccessible code to create something that doesn't even make sense.&lt;/p&gt;

&lt;p&gt;Final paragraph explaining why my method is better than using CSS3, which 'isn't supported yet', and how you can use this on your next website just by copying and pasting the above in some place which should cause it to have some effect on something. I don't know where this location is because I don't actually understand what I've bodged together. Sign off with a sentence reaffirming the aforementioned misunderstanding, and how you can overcome it with several thousand bytes of inaccessible, insemantic and verbose code.&lt;/p&gt;

&lt;p&gt;Huge 'Tweet this' link.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Submits article to dozens of web development sites to share my work with novice developers hoping to learn how to do things the correct way. Sits back and awaits lots of link-bait, low quality traffic, and novice devlopers thinking this is gospel.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Good developers vs. good salespeople</title>
   <link href="http://inuitcss.com/2010/10/good-developers-vs-good-salespeople"/>
   <updated>2010-10-06T10:35:01+01:00</updated>
   <id>http://inuitcss.com/2010/10/good-developers-vs-good-salespeople</id>
   <content type="html">&lt;p&gt;A small quote on the something I've been seeing, noticing and thinking a lot about the industry of late:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Good developers write good code. Good salespeople can sell bad code. I'm worried the salespeople are winning of late :(&quot;&lt;strong&gt;--&lt;a href=&quot;http://twitter.com/#!/csswizardry/statuses/26538562055&quot;&gt;Harry Roberts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Designing in the browser leads to better quality builds</title>
   <link href="http://inuitcss.com/2010/10/designing-in-the-browser-leads-to-better-quality-builds"/>
   <updated>2010-10-05T17:03:51+01:00</updated>
   <id>http://inuitcss.com/2010/10/designing-in-the-browser-leads-to-better-quality-builds</id>
   <content type="html">&lt;p&gt;Last night I got to thinking that the majority of design and build I have done in the past few years I have done straight into the browser. Personal sites, personal clients and some clients worked on during employment--all have benefited from being designed in the browser, and their code has benefited also. I maintain that the build quality of a site designed in the browser can be far greater than if it started its life in Photoshop.&lt;/p&gt;

&lt;h2&gt;A little background&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; I am in no way saying we invented the concept of designing in the browser, we merely adopted it &lt;em&gt;very&lt;/em&gt; early, before most.&lt;/p&gt;

&lt;p&gt;I have championed designing in the browser long before it became popular. True fact. I was doing this long before it was a mainstream practice.&lt;/p&gt;

&lt;p&gt;When working at &lt;a href=&quot;http://sense.co.uk/&quot;&gt;Sense&lt;/a&gt; I was extremely lucky to work alongside a man called &lt;a href=&quot;http://twitter.com/ReluctantPhil&quot;&gt;Philip Meitiner&lt;/a&gt;. He was Sense's Account Director and a genuine pleasure to work with and learn from. It was whilst we were working on a white-label website for some big name clients (Nissan, Renault, Mercedes, Volvo and more...) that we decided to ditch Photoshop and dive straight into the browser. This idea was born from the fact that I'd put together a series of HTML wireframes whose code was of a quality that I deemed suitable for production. It seemed backward to us to then fire up Photoshop and design an image based on a set of HTML pages, to then return to the HTML and style it.&lt;/p&gt;

&lt;p&gt;Thus was born our idea to design in the browser. We saved the HTML in isolation and used it as a starting point for each development of the various sites we had to build. We branded and designed each white-label in the browser and sent live, actual code back to the client for approval. It was, for everyone involved (though me more so) a dream come true.&lt;/p&gt;

&lt;h3&gt;The article I wish I'd written&lt;/h3&gt;

&lt;p&gt;Months later, 24 Ways published &lt;a href=&quot;http://24ways.org/2009/make-your-mockup-in-markup&quot;&gt;their article on designing in the browser&lt;/a&gt;. If there was one article I wish I'd written, it's that one. Phil was equally dismayed, however at least we knew we were on to something good.&lt;/p&gt;

&lt;h2&gt;How it works&lt;/h2&gt;

&lt;p&gt;For those not in the know, designing in the browser is exactly as it sounds. Instead of building a website in Photoshop then markup, you dive straight into the browser and notepad and get cracking. A few benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Saves time, cutting all Photoshop work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changing repeated elements (e.g. hyperlink colours) takes just one CSS declaration in the browser. It takes a lot of donkey work in Photoshop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clients buy websites, not printouts of websites. Designing in the browser allows them to see how their site looks in its intended environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This makes progressive enhancement usage much simpler. If they view it in Chrome, they see your round corners. If they view it in IE they see square corners. Both are intended behaviours, and both are fine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can show things like hover effects and interactions that Photoshop can't.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;&quot;Clients buy websites, not printouts of websites.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;How it improves build quality&lt;/h2&gt;

&lt;p&gt;There are a few reasons why I believe that designing in the browser improves the overall build quality of a website.&lt;/p&gt;

&lt;p&gt;Users don't (generally) visit a website for its design, they visit for its content. Designing in the browser considers content first. This is absolutely essential for a well thought out website, in my opinion. In Photoshop you design a layout and then populate it with content. Designing in the browser you start with your content and design around it. Content is the focus and the design does nothing but complement it. You're coming up with a suitable way to house the content you're starting out with, rather than shoehorning content into a preconceived design.&lt;/p&gt;

&lt;p&gt;By focussing on what your users are actually coming for, you often find that a better UX will follow. Ignore anything extraneous to begin with, nail the fundamentals (hint: &lt;a href=&quot;http://www.informationarchitects.jp/en/the-web-is-all-about-typography-period/&quot;&gt;typography&lt;/a&gt;!) and concentrate on how pretty it looks after. Designs change more frequently than content does; invest in the content early.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;What happens when your Photoshop printout uses nice anti-aliased Helvetica, and the final site renders in non-aliased Arial on the client's machine?&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Another reason is that, particularly if you are in a team where the designers don't do a lot of hands-on coding and build, devoting a lot of code to purely visual effects and design can lead to insensible builds, insemantic markup and a whole host of other issues. This is, admittedly, a marginal chance, but coding around the content before the design will often lead to more sensibly built websites, focussing more effectively on its content.&lt;/p&gt;

&lt;p&gt;The main time to use the designing in the browser as your primary build method is probably with a lot more sites than you'd imagine. Blogs, ecommerce, portfolios, news sites, apps, aggregators. You name it.&lt;/p&gt;

&lt;h2&gt;Designer to developer&lt;/h2&gt;

&lt;p&gt;Hopefully this one doesn't happen often, but it can do...&lt;/p&gt;

&lt;p&gt;I'm sure developers have had this countless times--a designer brings you a design that just isn't codable. The client had been shown a PSD that you have no hope of coding unless you botch and hack at markup and use ridiculously extraneous amounts of Javascript to manipulate it. By designing at code level you avoid all these problems from the outset. What you code &lt;em&gt;is&lt;/em&gt; your design, your design &lt;em&gt;is&lt;/em&gt; codable.&lt;/p&gt;

&lt;h3&gt;Designers obsolete?&lt;/h3&gt;

&lt;p&gt;Far from it. The designer is often the developer anyway, and if not, the designer is needed to call the creative shots and create initial visuals. Take &lt;a href=&quot;http://venturelab.co.uk/&quot;&gt;Venturelab&lt;/a&gt; for example. &lt;a href=&quot;http://twitter.com/simonwiffen&quot;&gt;Si&lt;/a&gt; came up with the skeleton of that design in Photoshop. Any type work, any calls-to-action, lists, navigation and tables were done by me, in the browser. Si created two 'mood board' style PSDs (and very good ones at that) but &lt;a href=&quot;http://twitter.com/JustinWhitston&quot;&gt;Justin&lt;/a&gt; was only ever shown working code, designed in the browser.&lt;/p&gt;

&lt;p&gt;Nail the backbone in Photoshop if needs be, but in areas where rapid development and the need for quick and arbitrary changes are needed (think typography and link colours etc.) designing in the browser is far more efficient. Imagine the pain of changing the zebra-stripe colours of a giant table in Photoshop when you just edit one CSS declaration and see to it all in one go.&lt;/p&gt;

&lt;h2&gt;On pushing the limits&lt;/h2&gt;

&lt;p&gt;There have however been one or two occasions in my career where not designing in the browser has done more good for a project than bad.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;There's a large chance that [a developer working in the browser] won't make things difficult for themselves, that they won't push their boundaries. This is a bad thing.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The first example links back to what I said about designers handing sites to developers that the developers can't code. If the person designing the site is also the person building it, there is a (pretty large) chance that they'll take the &lt;del&gt;easiest&lt;/del&gt; simplest route to completion. There's a large chance that they won't make things difficult for themselves, that they won't push their boundaries. This is a bad thing.&lt;/p&gt;

&lt;p&gt;If I draw on my own experience, the &lt;a href=&quot;http://www.finduscrispypancakes.com/&quot;&gt;Findus Crispy Pancakes&lt;/a&gt; site is an excellent example of designers giving developers the kind of headaches we love. I built Findus about a year or so ago whilst at Sense. &lt;a href=&quot;http://twitter.com/RobFarnell&quot;&gt;Rob&lt;/a&gt; designed the site in Photoshop and when I saw it I nearly fainted. I had no idea where I'd even start coding up such a complex looking, overlapping, quite frankly mental design.&lt;/p&gt;

&lt;p&gt;Yet despite this, I got my developers brain on and got to work. I finished the site about four days ahead of schedule and enjoyed every minute of it. That design pushed me more than it would have if it had started out in the browser. It was a lot better for being in Rob's hands first. And I still maintain that it was one of my most challenging builds to date (IE6 support...).&lt;/p&gt;

&lt;h3&gt;Developers still need designers!&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/RobFarnell&quot;&gt;Follow Rob on Twitter&lt;/a&gt;. Fantastic designer and all-round nice guy.&lt;/p&gt;

&lt;p&gt;It is important that the designer and developer have overlapping knowledge of each others' respective areas, yet play to their fullest in their own. The Findus site was a bit of fun on a small project which allowed me and Rob to really stretch ourselves, and that's what it's all about.&lt;/p&gt;

&lt;h3&gt;Big brands&lt;/h3&gt;

&lt;p&gt;Another couple of times where designing in the browser hasn't been viable was when we, at Sense, were working on the &lt;a href=&quot;http://travelodge.co.uk/&quot;&gt;Travelodge&lt;/a&gt; and &lt;a href=&quot;http://rizla.co.uk/&quot;&gt;Rizla&lt;/a&gt; websites. Travelodge was designed by another agency anyway, but even so, as they had very stringent brand guidelines that stated that round corners were a pivotal part of the brand, everything needed to be done in Photoshop.&lt;/p&gt;

&lt;p&gt;Another example would be Rizla, which, again, we built at Sense. As Rizla's brand is so important to their success and recognition it could not have just gone straight into the browser. Rizla wasn't so much about quickly accessible content, so much as heavily designed and branded content. We allowed for users to change the design, and for the design to carry off promotional work, which could not have happened straight in the browser.&lt;/p&gt;

&lt;h2&gt;Aiding programmers&lt;/h2&gt;

&lt;p&gt;This section was edited in part by &lt;a href=&quot;http://twitter.com/dan_bentley&quot;&gt;Dan Bentley&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Programmers manipulate markup. A Photoshop document is nigh on totally useless to a programmer, whose involvement lies in all that magic stuff that happens behind the scenes. Allowing programmers access to the code from an earlier point means they can start their job alongside the developer sooner.&lt;/p&gt;

&lt;p&gt;Furthermore is the idea that Javascript developers can visualise their involvement much sooner, too, and see what markup they will be manipulating from the outset, rather than having to second guess what markup might result from the developer's take on the PSD. They can start manipulating the DOM and begin building prototypes alongside the main build developer right from the start, making life easier for them as well.&lt;/p&gt;

&lt;h2&gt;When do you design in the browser?&lt;/h2&gt;

&lt;p&gt;At every available opportunity.&lt;/p&gt;

&lt;p&gt;It saves time, it's a much better way of presenting concepts to clients, it leads to better quality builds, it gives more consideration to content, it's more fun than working in Photoshop (at least from my point of view), it's easier to experiment, it's far more efficient and the quality of the code is usually better as it concerns itself with content over decoration.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Designs change more frequently than content does; invest in the content early.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For any content-centric sites (I know, &lt;em&gt;all&lt;/em&gt; sites are about content) such as blogs, web-apps, CMS style dashboard builds, news sites, informational sites or anything similar, you can't lose by designing in the browser.&lt;/p&gt;

&lt;p&gt;If you're an account manager type person at an agency, run the idea past your development team; I'm pretty sure they'd love to work like this, if they don't already.&lt;/p&gt;

&lt;h3&gt;When can't it be used?&lt;/h3&gt;

&lt;p&gt;Sometimes, designing straight in the browser just can't work. Heavily branded or very graphical sites that are more about decoration or branding than content will be a struggle to create without opening Photoshop first. However, by completing the major chunk of the layout and graphical design in Photoshop, you can often leave it at that, and model/work on type straight in the browser (what happens when your Photoshop printout uses nice anti-aliased Helvetica, and the final site renders in non-aliased Arial on the client's machine?). For the fine details, designing in the browser will be far more efficient and true-to-life than using Photoshop will ever be. Embrace it, and enjoy it.&lt;/p&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;p&gt;So, do you design in the browser? Are there any reasons why you don't? Would you like to? Leave a comment and open the debate up a little wider...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>In response to 'Invisible captcha to prevent form spam'</title>
   <link href="http://inuitcss.com/2010/10/in-response-to-invisible-captcha-to-prevent-form-spam"/>
   <updated>2010-10-04T16:57:39+01:00</updated>
   <id>http://inuitcss.com/2010/10/in-response-to-invisible-captcha-to-prevent-form-spam</id>
   <content type="html">&lt;p&gt;I seem to be doing a lot of these types of posts lately--responses to other articles. Today's is about an article pointed out to me by a friend and ex-colleague. The article deals with an interesting new way to &lt;a href=&quot;http://www.ngenworks.com/blog/invisible_captcha_to_prevent_form_spam/&quot;&gt;combat form spam by hiding a form field from human sight&lt;/a&gt;, and working on the premise that a spam-bot (devoid of 'human sight') will continue to fill this field in, thus identifying it as being spam.&lt;/p&gt;

&lt;p&gt;The more astute among you will have already spotted the flaw. Is it just spam-bots that can't see? Nope, exactly.&lt;/p&gt;

&lt;p&gt;Screen-reader users can't see this form field in much the same way a spam-bot can't. Their screen-reader will read out the field's label and prompt them to fill it in.&lt;/p&gt;

&lt;p&gt;The issue here is that humans aren't meant to know about this field, and anyone filling it in will flag their submission up (incorrectly) as being spam.&lt;/p&gt;

&lt;p&gt;A way round this might be to label the field as 'Hey humans, do not put your email address in here!' and hope that they'll not be too confused by it, but that's unlikely because it's nothing &lt;em&gt;but&lt;/em&gt; confusing. We also have to assume here that not all screen-readers will ignore content with &lt;code&gt;display:none;&lt;/code&gt; applied to it.&lt;/p&gt;

&lt;p&gt;An interesting idea, but pretty inaccessible to a small minority of users. And users are more important than a lack-of-spam.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS Wizardry, personal content and getting things for free</title>
   <link href="http://inuitcss.com/2010/09/css-wizardry-personal-content-and-getting-things-for-free"/>
   <updated>2010-09-29T12:25:01+01:00</updated>
   <id>http://inuitcss.com/2010/09/css-wizardry-personal-content-and-getting-things-for-free</id>
   <content type="html">&lt;p&gt;Today I was somewhat surprised to receive a tweet from one of my (I'm guessing newer) followers saying he was 'disappointed that I tweet personal content from this account' and that he 'expects more CSS related content'. I'm not going to link to the tweet, because I feel that's not necessary, but I was a little taken aback. Here's my open reply...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; This article is not aimed directly at the person who sent the tweet, rather an open letter to everyone…&lt;/p&gt;

&lt;p&gt;CSS Wizardry is my own personal branding. It started off as my portfolio back in 2007 when I was 17. Since then it has transformed as I released more and more tutorial and resource content, and started writing in-depth articles. I also joined &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;Twitter&lt;/a&gt; to help spread my personal brand to reach a wider audience. Twitter, along with some very high brow followers I am both pleased and humbled to have acquired, has been a massive force in CSS Wizardry's expansion.&lt;/p&gt;

&lt;p&gt;Since its inception, CSS Wizardry has remained free to use&lt;del&gt;, and free of ads&lt;/del&gt;. &lt;del&gt;I currently do not monetise CSS Wizardry whatsoever.&lt;/del&gt; Cheeky wee ad in the sidebar. I have provided hours and hours and &lt;em&gt;hours&lt;/em&gt; of decent, insightful content at no cost to my followers/readers and have not directly collected a penny for myself from doing so. CSS Wizardry costs me massively in both time writing content, and money in hosting etc. I give a lot away for nothing, and actually at cost to myself.&lt;/p&gt;

&lt;p&gt;I was conscious some time ago that I had a few personal articles on CSS Wizardry which I thought were perhaps out of place, so I created my even-more-personal site at &lt;a href=&quot;http://harryroberts.co.uk/&quot;&gt;harryroberts.co.uk&lt;/a&gt; to house all that stuff.&lt;/p&gt;

&lt;p&gt;People like to follow people, otherwise they'd just read RSS feeds...&lt;/p&gt;

&lt;p&gt;If you really don't want any personal stuff appearing via Twitter then simply don't follow me. If you &lt;em&gt;just&lt;/em&gt; want web development content then subscribe to &lt;a href=&quot;/feed/&quot;&gt;the feed&lt;/a&gt;, but please please please...&lt;/p&gt;

&lt;p&gt;Play fair, CSS Wizardry is a time and cash investment on my part to provide good quality content for you for free. Don't bitch about it, ey? That's just ungrateful...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Typographic puns with Suze</title>
   <link href="http://inuitcss.com/2010/09/typographic-puns-with-suze"/>
   <updated>2010-09-28T21:31:10+01:00</updated>
   <id>http://inuitcss.com/2010/09/typographic-puns-with-suze</id>
   <content type="html">&lt;p&gt;Today, &lt;a href=&quot;http://twitter.com/suzehaworth&quot;&gt;Suze&lt;/a&gt; and I entered, completely accidentally, into an email thread making typographic puns back and forth to one another. Suze isn't a type geek by any means, but she's more than used to me being one. She's bought me books, Helvetica goodies, and even endured more than one game of Type Trumps with me. I also &lt;a href=&quot;http://twitter.com/#!/csswizardry/status/25799545790&quot;&gt;tweeted earlier&lt;/a&gt; that I'd write the conversation up in here, so here it is. Sorry if it disappoints, but it really made me smile that she came up with easily the geekiest one out of the two of us!&lt;/p&gt;

&lt;p&gt;Me&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[…] Certainly on the meanness **font** [typo of _front_]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suze&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Haha, typography on the brain?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Me&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;**Em**, maybe, yeah… [typo of _erm_]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suze&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Em, who's she? ;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Me&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;It was another pun, as in 'em dash'. You obviously didn't get it though, it's like your humour has slipped into a **comma**…
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suze&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hahaha, that is terrible!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Me&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[…] I can't wait **tilde** [dinner](http://twitter.com/#!/csswizardry/status/25813409368) later on!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suze&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I **kern**’t wait either!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And on that note, I think Suze won with 'kern'. Bless her ;)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Keeping code clean with content</title>
   <link href="http://inuitcss.com/2010/09/keeping-code-clean-with-content"/>
   <updated>2010-09-27T21:37:07+01:00</updated>
   <id>http://inuitcss.com/2010/09/keeping-code-clean-with-content</id>
   <content type="html">&lt;p&gt;The CSS &lt;code&gt;content&lt;/code&gt; property is one that has been around for a while. It's not new, nor is it particularly ground-breaking. It is however, at least in my opinion, extremely useful and extremely underused. For those not in the know, &lt;code&gt;content&lt;/code&gt; sets, well, the content of an element via CSS. That is to say it gets rendered in the page but doesn't appear in the markup. Coupled with the &lt;code&gt;:before&lt;/code&gt; or &lt;code&gt;:after&lt;/code&gt; pseudo-elements you can prepend or append content to an element respectively:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Add a pilcrow before paragraphs */&amp;lt;/span&amp;gt;
p:before{
  content:&quot;¶ &quot;;
}
&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Add a bullet after the last paragraph */&amp;lt;/span&amp;gt;
p:last-of-type:after{
  content:&quot; •&quot;;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The benefit of this is that things that are technically stylistic that could only really be placed in the markup in order to make an appearance can actually be 'injected' into the page through CSS. This keeps your code free from any stylistic markup that adds non-semantic value, and means that any markup-like elements are added through the stylesheet.&lt;/p&gt;

&lt;p&gt;A particular example I have been using lately is simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- Markup --&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;dl&amp;gt;
  &amp;lt;dt&amp;gt;Name&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;Harry&amp;lt;/dd&amp;gt;
  &amp;lt;dt&amp;gt;Age&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;20&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* CSS */&amp;lt;/span&amp;gt;
dt:after{
  content:&quot;:&quot;;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The great thing here, and this is &lt;em&gt;extremely&lt;/em&gt; die-hard web standards and semantics, is that an item's title is not &lt;em&gt;technically&lt;/em&gt; 'Name:' or 'Age:', rather it is just 'Name' and 'Age'. The colon is, if you are being very anal, just stylistic.&lt;/p&gt;

&lt;p&gt;Also, another benefit is data-purity in a database. Imagine, for whatever reason, you're populating that &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt; from a database, you might end up storing 'Name:' and 'Age:' in there as opposed to the more clean and accurate 'Name' and 'Age'. Either that or your markup might look something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;dl&amp;gt;
  &amp;lt;dt&amp;gt;&amp;lt;?=$userNameTitle; ?&amp;gt;:&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;&amp;lt;?=$userName; ?&amp;gt;&amp;lt;/dd&amp;gt;
  &amp;lt;dt&amp;gt;&amp;lt;?=$userAgeTitle; ?&amp;gt;:&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;&amp;lt;?=$userAge; ?&amp;gt;&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the trailing colons on the &lt;code&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;s? This can be avoided simply by utilising the &lt;code&gt;content&lt;/code&gt; property.&lt;/p&gt;

&lt;h2&gt;Encoding&lt;/h2&gt;

&lt;p&gt;One point I will make is that, for certain symbols, you might need to encode them in the CSS file. If you know the symbol's numeric value (e.g. an em dash is &lt;code&gt;&amp;amp;#151;&lt;/code&gt;) simply fire it into &lt;a href=&quot;http://www.evotech.net/articles/testjsentities.html&quot;&gt;this converter&lt;/a&gt; and paste the result into your CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h2:after{
  content:&quot;\0097&quot;; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Add an em dash after headings */&amp;lt;/span&amp;gt;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>A quick counter to 'The Digital Agencies of the Future!'</title>
   <link href="http://inuitcss.com/2010/09/a-quick-counter-to-the-digital-agencies-of-the-future"/>
   <updated>2010-09-16T11:36:01+01:00</updated>
   <id>http://inuitcss.com/2010/09/a-quick-counter-to-the-digital-agencies-of-the-future</id>
   <content type="html">&lt;p&gt;This is a quick counter argument to a link that seems to have been doing its rounds on &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;Twitter&lt;/a&gt; today. &lt;a href=&quot;http://www.narrowdesign.com/future/&quot;&gt;The link in question&lt;/a&gt; is a page full of screenshots by &lt;a href=&quot;http://www.narrowdesign.com/&quot;&gt;Narrow Design&lt;/a&gt; of some fairly large agencies' websites as viewed on a mobile, in this case iPhone, browser. It's clearly making a point/taking the piss that a lot of these big names haven't bothered designing a mobile friendly site. Here is my defence (yes, defence) of those agencies...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The link:&lt;/strong&gt; &lt;a href=&quot;http://www.narrowdesign.com/future/&quot;&gt;http://www.narrowdesign.com/future/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyone who runs/owns/works in an agency will know that the last client is themselves. The company site is the last one to get attention, behind those of the clients who pay and keep your agency afloat. As such, it's fairly common (and almost a given) that your agency site will be somewhat behind, always needing a makeover 'when we're quiet'.&lt;/p&gt;

&lt;p&gt;Mobile browsing has only taken off pretty recently. It's no surprise to me that these agencies simply haven't got round to redeveloping their site in this short time-frame. It's just not going to happen, it's a big undertaking and a large opportunity cost to any company. Splitting off a team of developers to work on an internal project is a big move, which means that you need to be fairly financially safe to do so.&lt;/p&gt;

&lt;p&gt;This in itself then turns the mockery around somewhat--a company &lt;em&gt;that&lt;/em&gt; busy that it's not got round to rebuilding its own site is, if anything, a good agency.&lt;/p&gt;

&lt;p&gt;Of course, this excuse won't fit all the agencies whose screenshots have appeared in the list, but it's a seriously valid excuse. Further still is the fact that a lot of the sites don't offer a non-Flash fallback, but the issue there is not with mobile development, but rather with accessibility in general.&lt;/p&gt;

&lt;p&gt;The page is admittedly very tongue in cheek, but I don't think agencies not building mobile optimised sites is really grounds for publicly calling them out... or is that just me?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Set then unset (or reset...?)</title>
   <link href="http://inuitcss.com/2010/09/set-then-unset"/>
   <updated>2010-09-05T17:53:29+01:00</updated>
   <id>http://inuitcss.com/2010/09/set-then-unset</id>
   <content type="html">&lt;p&gt;There are countless tutorials on the Internet that preach about exactly how you should write your CSS. From trying to enforce single-line syntax, to specifying the number of spaces you should use and where, I wholeheartedly disagree with any articles of this kind. Your CSS can look however you choose, it just has to be readable, sensible and efficient.&lt;/p&gt;

&lt;p&gt;A method I've recently become fond of requires the mass setting and tactical unsetting of style rules across elements. I've been toying with a way of explaining this method for a few days now, but I just can't think of a way to word it. I'll have to rely on code examples, instead...&lt;/p&gt;

&lt;p&gt;Take the following, long winded way of styling a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and a &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h1{
  font-family:Helvetica, Arial, sans-serif;
  font-size:2em;
  font-weight:bold;
  margin-bottom:20px;
}
h2{
  font-family:Helvetica, Arial, sans-serif;
  font-size:1.5em;
  font-weight:bold;
  margin-bottom:20px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This of course could be written as the much more condensed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h1,h2{
  font-family:Helvetica, Arial, sans-serif;
  font-weight:bold;
  margin-bottom:20px;
}
h1{
  font-size:2em;
}
h2{
  font-size:1.5em;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, for all this is more efficient, it can be taken further still:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;h1,h2{
  font-family:Helvetica, Arial, sans-serif;
  font-size:2em;
  font-weight:bold;
  margin-bottom:20px;
}
h2{
  font-size:1.5em;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we give both the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; the &lt;em&gt;same&lt;/em&gt; font size (this being the value we want the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; to use) and then override/unset this value on the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Another example...&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* OLD */&amp;lt;/span&amp;gt;
ol,ul{
  margin-bottom:20px;
  font-style:italic;
}
ol{
  list-style:decimal outside;
}
ul{
  list-style:square outside;
}
&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* NEW */&amp;lt;/span&amp;gt;
ol,ul{
  margin-bottom:20px;
  font-style:italic;
  list-style:decimal outside;
}
ul{
  list-style:square outside;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I'm afraid I can't really offer any more verbal explanation of this technique but the code examples should explain well enough. If you do have any questions though, pop them in the comments.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Zebra-striping rows and columns</title>
   <link href="http://inuitcss.com/2010/08/zebra-striping-rows-and-columns"/>
   <updated>2010-08-31T20:54:01+01:00</updated>
   <id>http://inuitcss.com/2010/08/zebra-striping-rows-and-columns</id>
   <content type="html">&lt;p&gt;Zebra-striping tables is certainly not a new thing; it has been done and discussed for years. They (allegedly) aid usability in reading tabular data by offering the user a coloured means of separating and differentiating rows from one another. I say allegedly, there has been research into their effectiveness, conducted by &lt;a href=&quot;http://twitter.com/Formulate&quot;&gt;Jessica Enders&lt;/a&gt; over at &lt;a href=&quot;http://www.alistapart.com/articles/zebrastripingdoesithelp/&quot;&gt;A List Apart&lt;/a&gt; which proved pretty inconclusive.&lt;/p&gt;

&lt;p&gt;Striping a table's alternate rows couldn't be simpler. By programatically adding a class of &lt;code&gt;odd&lt;/code&gt; or suchlike to every other &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; you can then apply styles to this row (usually a pale background colour) and create zebra-stripes. An even better method would be to ditch the extraneous class and use the &lt;code&gt;nth-of-type&lt;/code&gt; selector, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;tbody tr:nth-of-type(odd){
  background:rgba(255,255,136,0.5); &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Pale yellow with 50% opacity */&amp;lt;/span&amp;gt;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What the &lt;code&gt;nth-of-type selector&lt;/code&gt; is doing here is looking for every odd &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;, that is to say the 1st, 3rd, 5th, 7th and so on.&lt;/p&gt;

&lt;p&gt;By understanding this, we can apply that logic to create zebra-striped columns, too. Thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;tbody td:nth-of-type(odd),
thead th:nth-of-type(odd){
  background:rgba(255,255,136,0.5);
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Above:&lt;/strong&gt; Here we target every other &lt;th&gt; in the &lt;head&gt;, and &lt;td&gt; in the &lt;tbody&gt;.&lt;/p&gt;

&lt;p&gt;We can also combine the two, to create a table where every other row and every other column is striped simultaneously, and by using the &lt;code&gt;rgba()&lt;/code&gt; colour declaration we can effectively layer the stripes, therefore showing where they cross over. The code for this simply combines the two:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;tbody td:nth-of-type(odd),
tbody tr:nth-of-type(odd),
thead th:nth-of-type(odd){
  background:rgba(255,255,136,0.5);
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;&lt;a href=&quot;/demos/zebra-striping/&quot;&gt;You wanna see a demo?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Sure thing, &lt;a href=&quot;/demos/zebra-striping/&quot;&gt;here you go...&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Addendum&lt;/h2&gt;

&lt;p&gt;After questions about browser support, I have decided to add a little onto the article...&lt;/p&gt;

&lt;p&gt;The selectors involved here are only supported in CSS3 capable browser, that is to say pretty much anything but Internet Explorer. However, due to zebra-striping's negligible benefits and inherently progressive nature, I don't feel that it is a feature that is important enough to warrant full cross-browser support. Research shows that tables are just as usable without zebra-striping as with, therefore in IE et al, the user is not receiving a sub-par experience.&lt;/p&gt;

&lt;p&gt;Of course if you do want to support Internet Explorer, you can always revert to programmatically adding an &lt;code&gt;odd&lt;/code&gt; class to &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Semantics and sensibility</title>
   <link href="http://inuitcss.com/2010/08/semantics-and-sensibility"/>
   <updated>2010-08-09T16:34:46+01:00</updated>
   <id>http://inuitcss.com/2010/08/semantics-and-sensibility</id>
   <content type="html">&lt;p&gt;For a while now, sensible naming conventions and semantics have been confused. Things such as &lt;code&gt;class=&quot;left&quot;&lt;/code&gt; or &lt;code&gt;class=&quot;clear&quot;&lt;/code&gt; have been deemed insemantic, whereas in reality, semantics really doesn't stretch that far… Let me illustrate with some code examples:&lt;/p&gt;

&lt;h2&gt;Insemantic code&lt;/h2&gt;

&lt;p&gt;The following code is just plain wrong, it's insemantic, using the wrong elements for the wrong job:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div class=&quot;nav-link&quot;&amp;gt;&amp;lt;a href=&quot;/&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;nav-link&quot;&amp;gt;&amp;lt;a href=&quot;/about/&quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;page-title&quot;&amp;gt;About&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;This is some page text about some stuff...&amp;lt;/div&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Insensible code&lt;/h2&gt;

&lt;p&gt;This code is perfectly semantic, it just uses some silly classes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;div class=&quot;border&quot;&amp;gt;
  &amp;lt;h2 class=&quot;red&quot;&amp;gt;This is a heading&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Semantics concerns itself with elements...&lt;/h2&gt;

&lt;p&gt;...and not the names assigned to them. Using the correct element for the correct job is as far as semantics goes. Standards concerning naming of those elements is all about &lt;em&gt;sensibility&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Semantics sets a standard from which it is very difficult to stray. Headings are marked up with a &lt;code&gt;&amp;lt;h1-6&amp;gt;&lt;/code&gt;, a list with &lt;code&gt;&amp;lt;ul/ol/dl&amp;gt;&lt;/code&gt; and so on. You cannot, however, define a convention for naming the IDs and classes of these. &lt;code&gt;&amp;lt;div id=&quot;contact&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;div id=&quot;kontact&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;div id=&quot;contact-info&quot;&amp;gt;&lt;/code&gt; all bear different names, but are all equally as semantic. All three are examples of semantic &lt;em&gt;and&lt;/em&gt; sensible code.&lt;/p&gt;

&lt;p&gt;However, take the following examples: &lt;code&gt;&amp;lt;div id=&quot;bottom&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;div id=&quot;lower-area&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;div id=&quot;b&quot;&amp;gt;&lt;/code&gt;. These examples exhibit semantic code, but with insensible namings.&lt;/p&gt;

&lt;h3&gt;Be sensible, for our sake&lt;/h3&gt;

&lt;p&gt;Semantics should be adhered no matter what--web standards are good. Naming however is totally down to you, you can call your elements whatever you wish. &lt;code&gt;&amp;lt;div id=&quot;a&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;div id=&quot;b&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;div id=&quot;c&quot;&amp;gt;&lt;/code&gt; are all possible, but not sensible.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Always code like you're working in a team, even when you're not.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I have actually seen markup like this, and the developer's reasoning was 'I like to keep my markup as lean as possible, and I know what &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; do'.&lt;/p&gt;

&lt;p&gt;While this is all correct, and passable, it's not really very sensible. He might know what &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; do, but what about the person who inherits the project? For all his justification of code bloat was somewhat advanced (&lt;em&gt;really&lt;/em&gt; decreasing markup size), the impression the next guy to see his code will have will be 'WTF was this guy thinking?!' Always code like you're working in a team, even when you're not.&lt;/p&gt;

&lt;h2&gt;Final word&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;An ID/class should be as short as possible but as long as necessary.--&lt;a href=&quot;http://meiert.com/en/blog/20090617/maintainability-guide/&quot;&gt;Jens Meiert&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Semantics and sensibility are not the same. Anyone who tells you that &lt;code&gt;class=&quot;left&quot;&lt;/code&gt; is insemantic is wrong. Be semantic and be sensible. Pick names which are descriptive. An ID/class should be as short as possible but as long as necessary.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Thoughts on Dribbble</title>
   <link href="http://inuitcss.com/2010/05/thoughts-on-dribbble"/>
   <updated>2010-05-11T10:56:59+01:00</updated>
   <id>http://inuitcss.com/2010/05/thoughts-on-dribbble</id>
   <content type="html">&lt;p&gt;For a while I was really gutted I didn't have a &lt;a href=&quot;http://dribbble.com/&quot;&gt;Dribbble&lt;/a&gt; invite, I posted a tweet requesting one, and &lt;a href=&quot;http://twitter.com/drewm&quot;&gt;Drew McLellan&lt;/a&gt; gave me one. From the off I was kind of disappointed with it. It's just Twitter with screenshots. Anyway, I wrote these thoughts down the other day elsewhere, and I thought I'd do a mini-post to share them more publicly. They are totally unrehearsed, unedited and completely off the cuff:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;I think it's just another place where the more famous designers just pat each other on the back, regardless of what they actually produce.
It's too elitist and the more known designers only follow each other, leaving less known people following them but their own work barely been seen. This in turn fuels the cycle--the famous get more so, while the more humble designers go unnoticed. I am seriously unimpressed with Dribbble&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, if you're really really wanting a Dribbble invite, don't worry; you're not missing much.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On a more personal note...</title>
   <link href="http://inuitcss.com/2010/04/on-a-more-personal-note"/>
   <updated>2010-04-14T09:50:23+01:00</updated>
   <id>http://inuitcss.com/2010/04/on-a-more-personal-note</id>
   <content type="html">&lt;p&gt;Lately, I'll admit, I've not been too hot on replying to emails and suchlike. If you have emailed me recently I do apologise, however I've not turned my home PC on in almost two weeks now, and it feels great. I spend eight hours a day in front of my computer at &lt;a href=&quot;http://venturelab.co.uk/&quot;&gt;work&lt;/a&gt;, and usually the first thing I do when I get home is turn the computer on there. I could sometimes spend over half of my day sat at a PC.&lt;/p&gt;

&lt;p&gt;While I have written &lt;a href=&quot;/resources/&quot;&gt;several resources&lt;/a&gt; in my spare time, and thoroughly enjoyed each, they are very time consuming. The exposure and nice comments they bring are great, but sometimes it's hard to keep on putting in hours and hours of work in exchange for a pat on the back--that's why so few people actually take the time to do it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/04/trials.jpg&quot; alt=&quot;A photo of me riding trials, taken by Suzanna Haworth&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&quot;http://twitter.com/suzehaworth&quot;&gt;@suzehaworth&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, having gotten back into &lt;a href=&quot;http://www.flickr.com/photos/csswizardry/sets/72157617396200602/&quot;&gt;trials&lt;/a&gt; lately, combined with improving weather, I'm devoting more spare time to that at the moment. Evenings not spent with &lt;a href=&quot;http://suzannahaworth.com/&quot;&gt;Suze&lt;/a&gt; will most likely be spent riding. &lt;em&gt;Not at my PC&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is not to say I won't be writing articles any more, far from it. I love writing articles, and as CSS Wizardry's exposure has rocketed recently (thanks to people like yourself) writing articles is even more rewarding than ever, and the quality of the comments and feedback is increasing too. I have article ideas all the time, and will post whenever I have the chance. All that's happening at the moment is I'm stepping back from the PC for a bit, for my health and sanity more than anything. Too much time at the PC can't be doing me much good. A result of which is that I haven't been on email for a couple of weeks now...&lt;/p&gt;

&lt;p&gt;If you have emailed and it is urgent, I apologise. Please &lt;a href=&quot;http://twitter.com/?status=@csswizardry&quot;&gt;tweet at me&lt;/a&gt; as I'm always on Twitter. I've also had emails regarding permission to translate &lt;a href=&quot;/web-design+/&quot;&gt;Web Design+&lt;/a&gt;--if you'd like to translate it that'd be great, you have my permission to do so (provided you don't pass it off as your own, of course).&lt;/p&gt;

&lt;p&gt;Also, regarding freelance work; I shan't be undertaking any form of freelance for the foreseeable future, sorry...&lt;/p&gt;

&lt;p&gt;Keep &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;following me on Twitter&lt;/a&gt; though, as I'll still be posting links and things as ever, and add &lt;a href=&quot;/feed/&quot;&gt;the CSS Wizardry RSS feed&lt;/a&gt; so any articles I do write, you'll hear about first.&lt;/p&gt;

&lt;p&gt;I'm not going, just relaxing. And I think you should too. Move away from your computer, get outside and have fun!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
&lt;em&gt;Harry&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building sites without using IDs or classes</title>
   <link href="http://inuitcss.com/2010/04/building-sites-without-using-ids-or-classes"/>
   <updated>2010-04-07T12:17:09+01:00</updated>
   <id>http://inuitcss.com/2010/04/building-sites-without-using-ids-or-classes</id>
   <content type="html">&lt;p&gt;This morning, for one reason or another, I decided to have a go at coding up a page without using any IDs or classes in my markup, and therefore none in my CSS. I'm not sure why I tried it, I guess I just did... In order to make it a fairly painless job I dove straight into the browser and coded up a simple header, footer, two column layout. &lt;a href=&quot;/demos/sites-without-ids-classes/&quot;&gt;View the demo&lt;/a&gt; and be sure to view the source.&lt;/p&gt;

&lt;p&gt;Using a combination of more advanced selectors such as sibling and &lt;code&gt;nth-of-type&lt;/code&gt; you can target elements based on their position in the markup rather than a given name. The practical upshot of this is that your markup is much leaner and cleaner, removing class and ID names has a notable impact.&lt;/p&gt;

&lt;h2&gt;Using advanced selectors&lt;/h2&gt;

&lt;p&gt;For a complete list please see &lt;a href=&quot;http://www.w3.org/TR/css3-selectors/&quot;&gt;http://www.w3.org/TR/css3-selectors/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The more advanced selectors take information about an element to determine whether it matches a certain criteria, for example &lt;code&gt;body&amp;gt;div&lt;/code&gt; will target a &lt;code&gt;div&lt;/code&gt; that is a direct and immediate descendant of the &lt;code&gt;body&lt;/code&gt;; &lt;code&gt;p+p&lt;/code&gt; will target a paragraph immediately preceded by a paragraph.&lt;/p&gt;

&lt;p&gt;On this basis, you could select (for example) your main content &lt;code&gt;div&lt;/code&gt; by knowing that it's the second &lt;code&gt;div&lt;/code&gt; in your content wrapper: &lt;code&gt;body&amp;gt;div div:nth-of-type(2)&lt;/code&gt;. Broken down we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;body&lt;/code&gt;--sets the root&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;gt;div&lt;/code&gt;--the first &lt;code&gt;div&lt;/code&gt; inside the body (the wrapper &lt;code&gt;div&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;div:nth-of-type(2)&lt;/code&gt;--the second &lt;code&gt;div&lt;/code&gt; in the wrapper (just after the header &lt;code&gt;div&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Why I think this won't catch on&lt;/h2&gt;

&lt;p&gt;For the time being, let's completely disregard that Internet Explorer completely disregards these selectors...&lt;/p&gt;

&lt;p&gt;As you can see from the above example, targeting the single, lone, unique content &lt;code&gt;div&lt;/code&gt; has taken two advanced selectors and 27 bytes. The selectors are fixed, the content &lt;code&gt;div&lt;/code&gt; will always have to be the second &lt;code&gt;div&lt;/code&gt; in the &lt;code&gt;div&lt;/code&gt; that is an immediate child of the &lt;code&gt;body&lt;/code&gt;. This is incredibly restrictive. Surely &lt;code&gt;#content{…}&lt;/code&gt; is far better than &lt;code&gt;body&amp;gt;div div:nth-of-type(2){…}&lt;/code&gt;…?&lt;/p&gt;

&lt;p&gt;For the sake of ease, instead of rambling about pros and cons, I've simply drawn up a list of advantages and disadvantages:&lt;/p&gt;

&lt;h3&gt;Advantages:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Leaner markup.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Promotes more sensible structuring of code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Promotes semantics.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Disadvantages:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Difficult syntaxes to remember.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extremely restrictive--elements are styled based on their location meaning that any moving/restructuring means all styles tied to an element are lost. This leads me on to...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The CSS is no longer just describing style, it also describes structure. CSS is a styling language, not a markup one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arbitrary elements such as images and &lt;code&gt;div&lt;/code&gt;s that change depending on page content (blog posts for example) aren't fixed enough to be styled based on their structure. This means that any variable content will require IDs and classes anyway, so you might as well us them across the board as opposed to a mix of with and without.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Difficult to understand. I wrote &lt;a href=&quot;/demos/sites-without-ids-classes/css/style.css&quot;&gt;the CSS for the demo page&lt;/a&gt; and I'm having a hard enough time doing the calculations to work out what does what. Imagine inheriting that!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenga. As soon as you alter your markup, the structure dependent CSS will come falling down too, what might be the first child might become the second, making the second child the third and so on, creating a domino effect.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Final word&lt;/h3&gt;

&lt;p&gt;While the more advanced CSS(3) selectors are impressive, and incredibly powerful, they aren't flexible enough to allow any large dependency upon them. That, and they're more awkward to understand than the tried and tested ID/class 'hooks' we know and use. There are far too many downsides to make cleaner markup a big enough plus-side in my opinion... Oh, and Internet Explorer doesn't seem to honour any of them, but that can't have come as much of a surprise.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>30 days without an iPhone</title>
   <link href="http://inuitcss.com/2010/03/30-days-without-an-iphone"/>
   <updated>2010-03-08T12:15:17+00:00</updated>
   <id>http://inuitcss.com/2010/03/30-days-without-an-iphone</id>
   <content type="html">&lt;p&gt;As of 6 February, 2010, I have been without my iPhone. It's been&lt;br/&gt;
unbelievably difficult for me, as a web developer and geek, to&lt;br/&gt;
properly function without it. You do not realise how reliant&lt;br/&gt;
everyone is upon technology until you lose it. Unsurprisingly it is&lt;br/&gt;
really quite hard going from having the whole internet at your&lt;br/&gt;
call and fingertips, to going to a big, archaic pre-iPhone piece&lt;br/&gt;
of rubbish. If this experience taught me one thing though, I am&lt;br/&gt;
very dependent on technology, simply just to wile away the time;&lt;br/&gt;
even sat in bed, my iPhone was a major part of me seeing what&lt;br/&gt;
revelations the web had in store.&lt;/p&gt;

&lt;h2&gt;Do I need an iPhone?&lt;/h2&gt;

&lt;p&gt;Of course I don't, but I do have one, and that's what I'm used to. However, after a few days I kind of got used to, and almost enjoyed (&lt;em&gt;almost&lt;/em&gt;) not being connected to the internet, the internet that I spend 8+ hours a day sat connected to.&lt;/p&gt;

&lt;h3&gt;The problem&lt;/h3&gt;

&lt;p&gt;Sure, the first few days were okay. And I had bought into a policy whereby the damaged item is replaced in 48 hours. I rang up and was told the it would in fact take 10-12 days. It took 30. Anyone who owns an iPhone surely knows that that just isn't easy.&lt;/p&gt;

&lt;p&gt;The insurers name? Read the opening paragraph again, closely ;) Shh...&lt;/p&gt;

&lt;p&gt;Anyway, anyone &lt;a href=&quot;http://snapbird.org/csswizardry/timeline/iphone&quot;&gt;following&lt;/a&gt; &lt;a href=&quot;http://snapbird.org/csswizardry/timeline/insurance&quot;&gt;me&lt;/a&gt; &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;on Twitter&lt;/a&gt; will know that this whole farce has really wound me up, with error after error on the insurers part. You will also know that I have refused to name them. This was for the sake of professionalism, while ever they were messing around, and I was keeping it amicable, they were 100% in the wrong, nothing could come back to me, nor could my actions influence theirs (i.e. me being rude making them even slower etc.). It didn't really work to my advantage, but still, better that than be a rude shouty b*stard to them, eh?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Thai-po-graph-e</title>
   <link href="http://inuitcss.com/2010/03/thai-po-graph-e"/>
   <updated>2010-03-04T09:22:15+00:00</updated>
   <id>http://inuitcss.com/2010/03/thai-po-graph-e</id>
   <content type="html">&lt;p&gt;This is just a silly little something I threw together yesterday. A small pictogram using a map of Thailand, children's TV character &lt;em&gt;Po&lt;/em&gt;, a graph and the letter &lt;em&gt;e&lt;/em&gt; to represent, well, Typography.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/03/thai-po-graph-e-web.jpg&quot; alt=&quot;Pictogram reading Thai-po-graph-e&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Too much time on my hands!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thai&lt;/em&gt; • &lt;em&gt;Po&lt;/em&gt; • &lt;em&gt;graph&lt;/em&gt; • &lt;em&gt;e&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Moving forward is holding us back</title>
   <link href="http://inuitcss.com/2010/03/moving-forward-is-holding-us-back"/>
   <updated>2010-03-02T22:03:28+00:00</updated>
   <id>http://inuitcss.com/2010/03/moving-forward-is-holding-us-back</id>
   <content type="html">&lt;p&gt;For years, web developers have been looking forward to that next feature, that new and monumental shift which has allowed them to break away from the shackles of obsolescence and adopt new and forward thinking technologies. But it is beginning to come full circle--that thirst for new technology has slowly brought us back to square one, reimposing the constraints that we have, for years, tried to rid ourselves of. &lt;em&gt;Moving forward is holding us back&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Okay, okay. That was a very alarmist intro. There is no web developers' apocalypse around the corner (not that I know of anyway, please don't take anything I say about the apocalypse as read. I don't want that responsibility.), nor are we going to have to regress to using tables and spacer GIFs again. The real issue here is that with all this new technology that keeps emerging and exciting web developers is unwittingly reimposing the restrictions of yesteryear...&lt;/p&gt;

&lt;h2&gt;Screen resolutions&lt;/h2&gt;

&lt;p&gt;Remember trying to break away from 800x600px?&lt;/p&gt;

&lt;p&gt;With the movement toward a more mobile web, screen resolutions are in fact getting smaller. The iPhone's maximum resolution is 480px, increasingly popular netbooks are set at about 1024px wide. Such a shift toward mobile and portable devices mean that screen sizes are actually getting &lt;em&gt;smaller&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In my opinion, &lt;a href=&quot;http://csswizardry.com/2010/01/iphone-css-tips-for-building-iphone-websites/&quot;&gt;iPhones and other mobile devices should be handled separately&lt;/a&gt;, serving them device specific CSS. Netbooks on the other hand are still 'desktop' machines like any other. Their smallness is their key feature, and at 1024px horizontal resolution, they aren't that small anyway...&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;http://960.gs/&quot;&gt;the 960 Grid System&lt;/a&gt;, and &lt;a href=&quot;http://csswizardry.com/type-tips/#tip-09&quot;&gt;an optimum line length of 52-78 characters&lt;/a&gt;, sticking to 1024px shouldn't be that difficult anyway. I believe that although desktop monitor sizes are generally getting larger, other equally important technologies are creeping up, and as responsible developers you should cater for them. Sure you may want to start adopting &lt;a href=&quot;http://sam.brown.tc/entry/379/the-new-massive-blue&quot;&gt;the 1080 grid&lt;/a&gt;, which is all well and good if you know your audience, but to cater for the majority, we're &lt;em&gt;not ready to burst 1024 yet&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Connection speeds&lt;/h2&gt;

&lt;p&gt;Remember building for 56k dial up connections? (I don't)&lt;/p&gt;

&lt;p&gt;Where permanent and fixed connections are getting much faster, connections to mobile devices through means such as 3G are &lt;em&gt;much&lt;/em&gt; slower. The ability to optimise sites to be fast loading over such connections is getting more important. As edge-case resolutions are getting smaller, edge-case connections are getting slower. Much slower.&lt;/p&gt;

&lt;h3&gt;A word on Flash&lt;/h3&gt;

&lt;p&gt;Remember &lt;a href=&quot;http://www.2advanced.com/&quot;&gt;2Advanced&lt;/a&gt;? A site of yesteryear...&lt;/p&gt;

&lt;p&gt;Flash seems to be dying a death anyway these days, slowly being superseded by Javascript and Canvas et al. However, what was once a fantastically powerful technology has been ousted completely from Apple's &lt;em&gt;i&lt;/em&gt; products, making in an inviable option for content which needs to be universally accessible.&lt;/p&gt;

&lt;h3&gt;A real life example?&lt;/h3&gt;

&lt;p&gt;Anyone with an iPhone will know what I mean--spending any amount of time on an iPhone loading poorly optimised sites is a real grind, and via some sensible optimisation these problems can be easily alleviated.&lt;/p&gt;

&lt;p&gt;However, a more interesting example might be the one that happened to myself... When &lt;a href=&quot;http://csswizardry.com/2010/01/pastures-newfrom-sense-to-venturelab/&quot;&gt;we first started at Venturelab&lt;/a&gt; we really were building the company from the ground up. For the first few weeks we were without desktop machines &lt;em&gt;and&lt;/em&gt; internet. I was working on a 10.1″ netbook with a screen resolution of 1024x600px, and over a poor 3G connection via a dongle.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Accessibility isn't just about disabilities, it's about varying degrees of ability to access content.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Working in this manner really made me wonder whether enough people are delivering content in a manner which is accessible on numerous levels. Accessibility isn't just about disabilities, it's about varying degrees of ability to access content. As responsible developers your content should be accessible through a full spectrum of means and in an acceptable manner.&lt;/p&gt;

&lt;p&gt;All it takes is some decent optimisation (which is also set to reap SEO benefits) and a reasonable page layout and you're already halfway there.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A quick note on border radius</title>
   <link href="http://inuitcss.com/2010/03/a-quick-note-on-border-radius"/>
   <updated>2010-03-02T10:34:55+00:00</updated>
   <id>http://inuitcss.com/2010/03/a-quick-note-on-border-radius</id>
   <content type="html">&lt;p&gt;This is a quick post concerning the &lt;code&gt;border-radius&lt;/code&gt; CSS3 property, and the syntax behind it. After coming across &lt;a href=&quot;http://www.border-radius.com/&quot;&gt;this site&lt;/a&gt; earlier today via &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;Twitter&lt;/a&gt; I remembered my initial frustrations with lack of uniformity across user agents and their required syntax in order to create round corners; Firefox requiring a different format to Webkit and the CSS3 spec was pretty annoying.&lt;/p&gt;

&lt;p&gt;However, it's not all that bad. As border-radius.com would have you believe, the syntax to create an element with top-left and bottom-right corners with a 50px round, and top-right and bottom-left corners with 10px rounds would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;-webkit-border-radius: 50px;
-webkit-border-top-right-radius: 10px;
-webkit-border-bottom-left-radius: 10px;
-moz-border-radius: 50px;
-moz-border-radius-topright: 10px;
-moz-border-radius-bottomleft: 10px;
border-radius: 50px;
border-top-right-radius: 10px;
border-bottom-left-radius: 10px;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wrong, you can actually use the &lt;code&gt;border-radius&lt;/code&gt; shorthand to nail this in three lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;-moz-border-radius:50px 10px 50px 10px;
-webkit-border-radius:50px 10px 50px 10px;
border-radius:50px 10px 50px 10px;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax follows the following rule: &lt;code&gt;border-radius:top-left top-right bottom-right bottom-left;&lt;/code&gt;. I've tested this in Firefox (&lt;code&gt;-moz-border-radius&lt;/code&gt;), Webkit (&lt;code&gt;-webkit-border-radius&lt;/code&gt;) and Opera (&lt;code&gt;border-radius&lt;/code&gt;) and &lt;a href=&quot;http://csswizardry.com/demos/border-radius/&quot;&gt;it works just fine&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Addendum&lt;/h2&gt;

&lt;p&gt;You'd think Webkit would just be Webkit, right? Wrong. This works in Chrome but &lt;em&gt;not&lt;/em&gt; Safari. I've had reports that Safari 4.0.4 (I guess it's &lt;em&gt;not found it&lt;/em&gt;, get it? Oh never mind.) doesn't work. Useful...&lt;/p&gt;

&lt;p&gt;Still, this version will work, and is still considerably shorter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;-webkit-border-radius: 50px;
-webkit-border-top-right-radius: 10px;
-webkit-border-bottom-left-radius: 10px;
-moz-border-radius:50px 10px 50px 10px;
border-radius:50px 10px 50px 10px;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Suzanna Haworth Photography redesign</title>
   <link href="http://inuitcss.com/2010/02/suzanna-haworth-redesign"/>
   <updated>2010-02-28T17:40:52+00:00</updated>
   <id>http://inuitcss.com/2010/02/suzanna-haworth-redesign</id>
   <content type="html">&lt;p&gt;Having only put the first version of Suze's site live &lt;a href=&quot;http://csswizardry.com/2009/12/suzanna-haworth-photography/&quot;&gt;a few months ago&lt;/a&gt;, we both decided it needed a whole new approach. Originally a static site, built with my own PHP framework, it relied on manual updates from me, which meant that for the sake of efficiency updates had to happen once there was enough content to upload; ergo not very often. After porting CSS Wizardry over to Wordpress and being very impressed, I decided that was the best approach for Suze too. This meant she could update her own site as often as she wanted.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://suzannahaworth.com/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/suze-site.jpg&quot; alt=&quot;A screenshot of Suzanna's new site&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, &lt;a href=&quot;http://twitter.com/suzehaworth&quot;&gt;follow Suze on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As the site was built very quickly, we are adapting it as it grows and fixing any bugs as they happen. Let me know if you find anything astray. Anyway, enough talking, &lt;a href=&quot;http://suzannahaworth.com/&quot;&gt;go look for yourselves&lt;/a&gt;!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Usability in everyday items</title>
   <link href="http://inuitcss.com/2010/02/usability-in-everyday-items"/>
   <updated>2010-02-28T17:04:19+00:00</updated>
   <id>http://inuitcss.com/2010/02/usability-in-everyday-items</id>
   <content type="html">&lt;p&gt;Yesterday when &lt;del&gt;being dragged around shops by&lt;/del&gt; out shopping with my girlfriend &lt;a href=&quot;http://suzannahaworth.com/&quot;&gt;Suzanna&lt;/a&gt;, we were walking down a shampoo/haircare isle when I asked 'Is it shampoo or conditioner where the lid is on the bottom of the bottle, as opposed to the top?' Suze answered my question with 'Conditioner has the lid on the bottom, shampoo on the top, but I don't know why'. I knew why...&lt;/p&gt;

&lt;h2&gt;The shampoo lid&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/shampoo.jpg&quot; alt=&quot;A photograph of matching bottles of shampoo and conditioner, illustrating lid differences&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Imagine the scenario, you're a girl with long hair and you're washing it in the shower. Your hair is in your eyes, and covered in shampoo. Opening your eyes would lead to some serious stinging! You reach down and below you, by your feet, you have two identical bottles--except they're not identical... One has its lid on the top and the the other has its lid on the bottom. As long as you've learnt which one's which, as my girlfriend clearly has, you know without having to open your eyes which bottle you have hold of. This is a really ingenious piece of usability, yet so so simple.&lt;/p&gt;

&lt;h2&gt;The vacuum cleaner&lt;/h2&gt;

&lt;p&gt;Another great bit of usability I saw was in Suzanna's vacuum cleaner. It has a retractable cable which rests inside the body of the cleaner when it's being stored. When pulling the cable out to plug it in, when you are roughly a metre away from reaching its furthest limit of extension, you see a yellow marker on it. This indicates that something must be about to happen, and then when you pull that extra metre out, there is a red marker to signify that this is a far as the cable will extend. This means that there's no chance of accidentally pulling the cable out too far and damaging it if under the impression that there's more wire in there. Simple, but &lt;em&gt;so&lt;/em&gt; helpful.&lt;/p&gt;

&lt;h3&gt;The lesson?&lt;/h3&gt;

&lt;p&gt;A lot of the time, the best way to make something usable is to imagine yourself using it--what would &lt;em&gt;you&lt;/em&gt; want out of it? Because nine times out-of ten someone else would appreciate that feature too.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Type tips—quick tips on all things web typography</title>
   <link href="http://inuitcss.com/2010/02/type-tipsquick-tips-on-all-things-web-typography"/>
   <updated>2010-02-24T09:42:13+00:00</updated>
   <id>http://inuitcss.com/2010/02/type-tipsquick-tips-on-all-things-web-typography</id>
   <content type="html">&lt;p&gt;Yesterday I released &lt;a href=&quot;/type-tips/&quot;&gt;Type Tips&lt;/a&gt;, a collection of short and simple tips to take your web typography to the next level. The project has been some time in the making, with me first mentioning it &lt;a href=&quot;http://twitter.com/csswizardry/status/7560350672&quot;&gt;back in early January&lt;/a&gt;. For one reason or another I only got started on the project last night, but I ploughed through and released a first version within a few hours.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/type-tips/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/type-tips.jpg&quot; alt=&quot;A screenshot of type tips&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope Type Tips comes in useful for you, and that the information in there is of some notable value. If you do like it, please share it by tweeting the link, I'd appreciate it. Any other thoughts? Just drop me a comment...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Typographic phrases (or: how to turn sayings geeky)</title>
   <link href="http://inuitcss.com/2010/02/typographic-phrases-or-how-to-turn-sayings-geeky"/>
   <updated>2010-02-19T09:46:28+00:00</updated>
   <id>http://inuitcss.com/2010/02/typographic-phrases-or-how-to-turn-sayings-geeky</id>
   <content type="html">&lt;p&gt;A while ago I had the idea to express some old sayings in a silly, geeky way, using code and logic to express logically, the meaning behind some well known phrases. I got Illustrator fired up last night and decided to finally got a few made. They're kind of obvious really, even a non-developer brain can make sense of them, and deciphering the saying is pretty simple, but I think they're cool nonetheless.&lt;/p&gt;

&lt;h2&gt;Many hands make light work&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/many-hands.jpg&quot; alt=&quot;Many hands make light work&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are lots of contradictions in sayings and phrases. Like this one, if many hands do make light work, then how does this next one work?&lt;/p&gt;

&lt;h2&gt;Too many cooks spoil the broth&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/too-many-cooks.jpg&quot; alt=&quot;Too many cooks spoil the broth&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;A stitch in time...&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/a-stitch-in-time.jpg&quot; alt=&quot;A stitch in time saves nine&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;While the cat is away...&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/while-the-cat-is-away.jpg&quot; alt=&quot;While the cat is away the mice will play&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Absence makes the heart grow fonder vs. time is a great healer&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/absence.jpg&quot; alt=&quot;Absence makes the heart grow fonder vs. time is a great healer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This one is another glaring contradiction, so I decided to combine the two into one poster.&lt;/p&gt;

&lt;h2&gt;Out of sight, out of mind&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/out-of-sight.jpg&quot; alt=&quot;Out of sight, out of mind&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Two wrongs don't make a right&lt;/h2&gt;

&lt;p&gt;This one doesn't really follow the code paradigm, but I thought I'd include it anyway.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/two-wrongs.jpg&quot; alt=&quot;Two wrongs don't make a right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Got any more that would work in this way? Leave any suggestions in the comments.&lt;/p&gt;

&lt;p&gt;Also, I do realise that, programmatically, not all of these posters make perfect sense. For example, &lt;code&gt;$cooks &amp;gt; 'enough'&lt;/code&gt; doesn't really work in a programming sense... It's just a bit of fun!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Multiple column lists using one <ul></title>
   <link href="http://inuitcss.com/2010/02/mutiple-column-lists-using-one-ul"/>
   <updated>2010-02-11T23:44:02+00:00</updated>
   <id>http://inuitcss.com/2010/02/mutiple-column-lists-using-one-ul</id>
   <content type="html">&lt;p&gt;This is a quick, simple tutorial on how to create multiple column lists by only using one &lt;code&gt;ul&lt;/code&gt;. Often is the case when you'd want multiple lists side-by-side, but you end up using markup like &lt;code&gt;&amp;lt;ul class=&quot;col&quot;&amp;gt;&lt;/code&gt; in order to get several lists sat next to each other. However, by simply floating &lt;code&gt;li&lt;/code&gt;s left and setting their width to the correct percentage (two columns = &lt;code&gt;li{width:50%;}&lt;/code&gt; and so on), you can attain a multiple column list pretty easily.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://csswizardry.com/demos/multiple-column-lists/&quot;&gt;View demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The trick here is to force the list to break at the right point. If you want two columns, you need to float the list items left and set them at 50% width, therefore the list items will only ever fit two side-by-side, then begin again on the row beneath. By that token, three columns would require a width of 33% and floated left, four would be 25% and so on.&lt;/p&gt;

&lt;h2&gt;The code&lt;/h2&gt;

&lt;p&gt;Both the markup and CSS for this is incredibly simple, nothing fancy, no CSS3, nothing progressive, just basic styling applied to lean markup.&lt;/p&gt;

&lt;h3&gt;The markup&lt;/h3&gt;

&lt;p&gt;The markup for this is just a simple &lt;code&gt;ul&lt;/code&gt;, thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;ul id=&quot;double&quot;&amp;gt; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;&amp;lt;!-- Alter ID accordingly --&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;li&amp;gt;CSS&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;XHTML&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Semantics&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Accessibility&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Usability&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Web Standards&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;PHP&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Typography&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Grids&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;CSS3&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;HTML5&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;UI&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to make this into a multiple column list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;ul{
  width:760px;
  margin-bottom:20px;
  overflow:hidden;
  border-top:1px solid #ccc;
}
li{
  line-height:1.5em;
  border-bottom:1px solid #ccc;
  float:left;
  display:inline;
}
#double li  { width:50%;} &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* 2 col */&amp;lt;/span&amp;gt;
#triple li  { width:33.333%; } &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* 3 col */&amp;lt;/span&amp;gt;
#quad li    { width:25%; } &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* 4 col */&amp;lt;/span&amp;gt;
#six li     { width:16.666%; } &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* 6 col */&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;When to use this&lt;/h2&gt;

&lt;p&gt;Use this wisely... It displays content in an ambiguous manner and should not be used where order of reading is imperative.&lt;/p&gt;

&lt;p&gt;This method should only be used if the lists content doesn't require any specific ordering as the markup is written linearly and the list is displayed in a matrix. As you can see, the way the content is displayed means it can be read across»down»across or down»up»down. This means that the way you write your content is not necessarily the way it will be read. In &lt;a href=&quot;/demos/multiple-column-lists/&quot;&gt;my example&lt;/a&gt; this isn't an issue, as the content can safely be read in any order.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Upside down domains—registering an international domain name</title>
   <link href="http://inuitcss.com/2010/02/upside-down-domainsregistering-an-international-domain-name"/>
   <updated>2010-02-04T15:44:17+00:00</updated>
   <id>http://inuitcss.com/2010/02/upside-down-domainsregistering-an-international-domain-name</id>
   <content type="html">&lt;p&gt;Earlier today I registered the domain &lt;a href=&quot;http://%CA%8E%C9%B9%C9%B9%C9%90%C9%A5.com&quot;&gt;http://ʎɹɹɐɥ.com&lt;/a&gt;. Or did I? Upon reading &lt;a href=&quot;http://sam.brown.tc/entry/417/how-to-register-an-international-domain-name&quot;&gt;an article by Sam Brown&lt;/a&gt;, which in turn linked to &lt;a href=&quot;http://sneeu.com/blog/2010/1/how-register-international-domain-name/&quot;&gt;an article by John Sutherland&lt;/a&gt; explaining how to register such domains, I wanted one. There are a few levels to this trickery. There's the 'Oh I totally understand how this works!', or there's the 'I don't want to know how it works, I just want it!' level.&lt;/p&gt;

&lt;h2&gt;I just want one!&lt;/h2&gt;

&lt;p&gt;Okay, I didn't actually register&lt;code&gt;http://ʎɹɹɐɥ.com/&lt;/code&gt;, I registered what you might call its alias: &lt;code&gt;http://xn--jna6b0ca7h.com&lt;/code&gt;. So, by that token, you find the upside down version of your domain (mine being &lt;code&gt;harry&lt;/code&gt;) via this &lt;a href=&quot;http://www.sevenwires.com/play/UpsideDownLetters.html&quot;&gt;upside down letter converter&lt;/a&gt;, paste the result (mine being &lt;code&gt;ʎɹɹɐɥ&lt;/code&gt;) into &lt;a href=&quot;http://mct.verisign-grs.com/conversiontool/&quot;&gt;this IDN converter&lt;/a&gt; and add whatever domain extension (mine being .com) to the resulting string (mine being &lt;code&gt;xn--jna6b0ca7h&lt;/code&gt;). You then register the outcome, and you can access it via the upside down version! &lt;code&gt;http://ʎɹɹɐɥ.com/&lt;/code&gt; is just an alias of &lt;code&gt;http://xn--jna6b0ca7h.com/&lt;/code&gt; in a sense...&lt;/p&gt;

&lt;p&gt;If you view the source of this page you'll see the markup actually links to &lt;code&gt;http://ʎɹɹɐɥ.com/&lt;/code&gt; but resolves to &lt;code&gt;http://xn--jna6b0ca7h.com/&lt;/code&gt; in the status bar when you hover it.&lt;/p&gt;

&lt;h2&gt;I want details!&lt;/h2&gt;

&lt;p&gt;If you want to actually understand the technicalities behind it, you ought to read the two articles linked previously.&lt;/p&gt;

&lt;h2&gt;Why would I need this?&lt;/h2&gt;

&lt;p&gt;You don't, but it is cool, right? Although, you could use it as a pretty nifty short-URL for your blog on Twitter like Daring Fireball's awesome &lt;a href=&quot;http://?df.ws&quot;&gt;http://?df.ws&lt;/a&gt; one.&lt;/p&gt;

&lt;h3&gt;Which leads me on to...&lt;/h3&gt;

&lt;p&gt;You don't have to have an upside down domain, you can use glyphs in there too. Grab some glyphs from &lt;a href=&quot;http://copypastecharacter.com/&quot;&gt;CopyPasteCharacter&lt;/a&gt; and pop those into the converter too.&lt;/p&gt;

&lt;h3&gt;Registering your domain&lt;/h3&gt;

&lt;p&gt;This is not a plug...&lt;/p&gt;

&lt;p&gt;I've heard reports of people being asked about languages for the IDNs from their registrar of choice. I went with &lt;a href=&quot;http://www.heartinternet.co.uk/&quot;&gt;Heart Internet&lt;/a&gt; and registered &lt;code&gt;http://xn--jna6b0ca7h.com/&lt;/code&gt; no trouble, just as if it was a regular domain.&lt;/p&gt;

&lt;p&gt;Be sure to comment it you buy/have bought one yourself.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS bar charts—styling data with CSS3 and progressive enhancement</title>
   <link href="http://inuitcss.com/2010/02/css-bar-charts-styling-data-with-css3-and-progressive-enhancement"/>
   <updated>2010-02-02T23:59:27+00:00</updated>
   <id>http://inuitcss.com/2010/02/css-bar-charts-styling-data-with-css3-and-progressive-enhancement</id>
   <content type="html">&lt;p&gt;Bar charts in CSS are neither very new, or very difficult. Using some pretty basic styling you can force lists etc into resembling graphs and charts fairly easily. Such charts, in their most basic form, work perfectly well in displaying and presenting the data they represent. However, using some rich CSS3 and progressive enhancement, you can really start pushing the display and presentation of these normally boring documents to the next level. They are also an ideal way in which to demonstrate the power and ability of progressive enhancement.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;/demos/graphs/&quot;&gt;View demo&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Look at the site in IE8, &lt;em&gt;then&lt;/em&gt; Firefox, &lt;em&gt;then&lt;/em&gt; Safari/Chrome.&lt;/strong&gt; Keep refreshing.&lt;/p&gt;

&lt;p&gt;I have created &lt;a href=&quot;/demos/graphs/&quot;&gt;a demo page&lt;/a&gt; which simply represents three items of data expressed as percentages. It is not the data itself or the numbers we are concerned with here--it is the proof of concept. The fact that this can be done on my made up data shows that you can do it too, on real life information.&lt;/p&gt;

&lt;h2&gt;Progressive enhancement&lt;/h2&gt;

&lt;p&gt;At &lt;a href=&quot;http://venturelab.co.uk/&quot;&gt;Venturelab&lt;/a&gt;, we decided to use progressive enhancement as a matter of course. CSS3 and designing in the browser all the way!&lt;/p&gt;

&lt;p&gt;Progressive enhancement is, in my opinion, one of the most exciting schools of thought web development has seen in years (though I &lt;em&gt;have&lt;/em&gt; only been in the web for three...). It is the idea whereby any non-essential features (i.e. anything whose absence will have no adverse effect on the usability or accessibility of a website) are added to the website in a &lt;em&gt;progressive&lt;/em&gt; manner--often through CSS3.&lt;/p&gt;

&lt;p&gt;The benchmark example is rounded corners; to apply these through old means, for example with images, would have taken a developer a substantial amount of time--time the client is paying for. It seems silly now to think that way-back-when, putting rounded corners on a &lt;code&gt;div&lt;/code&gt; might have taken upward of 30 minutes, when we can apply it in about 5 seconds using &lt;code&gt;-moz-border-radius:5px;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It really is a no brainer--anyone visiting the site in a browser with no CSS3 support will see square corners. Does this matter? Of course it doesn't. No one visits a site to look solely at the design--they visit for content. Does it matter to them what shape the corners of your RSS button are? No again. Progressive enhancement saves you time, and your client money.&lt;/p&gt;

&lt;h3&gt;Isn't this just graceful degradation?&lt;/h3&gt;

&lt;p&gt;Graceful degradation = building for the best and getting worse; progressive enhancement = building to cater the worst and getting better...&lt;/p&gt;

&lt;p&gt;The line between progressive enhancement and graceful degradation is fine but significant. Graceful degradation is the idea that you'd build a site for, say, Firefox, then selectively break and &lt;em&gt;downgrade&lt;/em&gt; it in the likes of IE(6). Progressive enhancement takes a much more positive attitude in that you build &lt;em&gt;for&lt;/em&gt; IE(6) and then selectively &lt;em&gt;upgrade&lt;/em&gt; it in browsers like Firefox and Safari. It's no longer starting great and getting worse, it's now starting great and getting better.&lt;/p&gt;

&lt;h3&gt;Internet Explorer&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; Only tested in IE8 as this is not a final solution, rather a proof-of-concept.&lt;/p&gt;

&lt;p&gt;Internet Explorer(8)'s take on my bar charts is as you'd expect from any browser, it renders it perfectly well, providing clear, accessible content, with a flawless UX and perfectly usable. &lt;em&gt;This is not bad!&lt;/em&gt; We don't need to downgrade anything, this is our starting point. It looks good and it functions perfectly. If you did as above and visited in IE8 first, you wouldn't know that there were round corners missing--because that &lt;em&gt;doesn't&lt;/em&gt; matter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/ie.gif&quot; alt=&quot;A screenshot of the CSS bar chart in Internet Explorer 8&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Firefox&lt;/h3&gt;

&lt;p&gt;Next up is Firefox, where we add some round corners to the blue bars, and also a very subtle drop shadow (&lt;code&gt;text-shadow:;&lt;/code&gt;) on the text. This is no more usable than before, the content is no more accessible than in IE, but it &lt;em&gt;does&lt;/em&gt; look a tad nicer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/firefox.gif&quot; alt=&quot;A screenshot of the CSS bar chart in Firefox&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Safari/Chrome&lt;/h3&gt;

&lt;p&gt;It is in Webkit based browsers such as Safari and Chrome that the real magic happens. Webkit's proprietary CSS is above and beyond that of any other rendering engine...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/safari.gif&quot; alt=&quot;A screenshot of the CSS bar chart in Safari&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What if I couldn't be bothered opening Photoshop to make a subtle gradient &lt;code&gt;.gif&lt;/code&gt; for the bars? No worries, use Webkit's gradient CSS. A little reflection might look nice on the bars too, but I don't fancy any superfluous markup or &lt;code&gt;.png&lt;/code&gt;s to fiddle with. Ah great, Webkit has a bit of reflection CSS too.&lt;/p&gt;

&lt;p&gt;However, for the real show-piece, the Webkit animation. I'm not using any Javascript libraries anywhere else in the page so I don't fancy pulling a whole one in for something that won't really be missed if it's not there. I hear Webkit has animations... magic!&lt;/p&gt;

&lt;h2&gt;The code&lt;/h2&gt;

&lt;p&gt;Now that's the theory covered, let's look at what does all this stuff... Please note, I have used some PHP to randomise the values used by the bars of the chart. As a result, some CSS appears in the source code of the PHP file, and the rest in &lt;a href=&quot;http://csswizardry.com/demos/graphs/css/style.css&quot;&gt;the page's CSS file&lt;/a&gt;. The code shown in the examples below is condensed into one large chunk.&lt;/p&gt;

&lt;h3&gt;The markup&lt;/h3&gt;

&lt;p&gt;The markup simply comprises of one uncluttered &lt;code&gt;dl&lt;/code&gt;. The reasoning behind a definition list is that each item is a title, followed by some information about that title. Not only is this semantically correct, it's a nice set of elements to be working with to achieve the layout we've got.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;dl id=&quot;chart&quot;&amp;gt;
  &amp;lt;dt&amp;gt;Sales increase this week&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;&amp;lt;span id=&quot;data-one&quot;&amp;gt;47%&amp;lt;/span&amp;gt;&amp;lt;/dd&amp;gt;
  &amp;lt;dt&amp;gt;Revenue increase this week&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;&amp;lt;span id=&quot;data-two&quot;&amp;gt;59%&amp;lt;/span&amp;gt;&amp;lt;/dd&amp;gt;
  &amp;lt;dt&amp;gt;Profit increase this week&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;&amp;lt;span id=&quot;data-three&quot;&amp;gt;26%&amp;lt;/span&amp;gt;&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all there is to it.&lt;/p&gt;

&lt;h3&gt;The CSS, CSS3 and progressive enhancement&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
  CHART
\*------------------------------------*/&amp;lt;/span&amp;gt;
#chart{
  width:520px;
}
#chart dt{
  width:160px;
  float:left;
  margin:0 20px 5px 0;
  padding:2px 0;
  display:inline;
  font-weight:bold;
  text-align:right;
}
#chart dd{
  width:339px;
  border-right:1px solid #ddd;
  float:left;
  margin-bottom:5px;
  display:inline;
}
#chart dd span{
  color:#fff;
  background:#09f;
  text-align:center;
  padding:2px 0;
  display:block;

  text-shadow:1px 1px 1px rgba(0,0,0,0.2);
  -moz-border-radius:2px;
  -webkit-border-radius:2px;
  border-radius:2px;
  background:-webkit-gradient(linear, left top, -&amp;gt;
  left bottom, from(#09f), to(#077fd0));
  -webkit-box-reflect:below 0 -&amp;gt;
  -webkit-gradient(linear, left top, -&amp;gt;
  left bottom, from(rgba(0,0,0,0)), to(rgba(0,0,0,0.25)));
}
#data-one{
  width:47%;
}
#data-two{
  width:59%;
}
#data-three{
  width:26%;
}
#data-one{
  -webkit-animation-name:bar-one; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Give the bar an animation with a
    unique name */&amp;lt;/span&amp;gt;
}
#data-two{
  -webkit-animation-name:bar-two; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Give the bar an animation with a
    unique name */&amp;lt;/span&amp;gt;
}
#data-three{
  -webkit-animation-name:bar-three; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Give the bar an animation with a
    unique name */&amp;lt;/span&amp;gt;
}
#data-one,#data-two,#data-three{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Define animation styles for all three
    bars at once */&amp;lt;/span&amp;gt;
  -webkit-animation-duration:0.5s; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Animation duration in seconds */&amp;lt;/span&amp;gt;
  -webkit-animation-iteration-count:1; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Amount of times to loop */&amp;lt;/span&amp;gt;
  -webkit-animation-timing-function:ease-out; &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Ease in, out etc. */&amp;lt;/span&amp;gt;
}
@-webkit-keyframes bar-one{
  0%{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Define bar-one styles at 0% (0 seconds) */&amp;lt;/span&amp;gt;
    width:0%;
  }
  100%{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Define bar-one styles at 100% (0.5 seconds) */&amp;lt;/span&amp;gt;
    width:47%;
  }
}
@-webkit-keyframes bar-two{
  0%{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Define bar-two styles at 0% (0 seconds) */&amp;lt;/span&amp;gt;
    width:0%;
  }
  100%{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Define bar-two styles at 100% (0.5 seconds) */&amp;lt;/span&amp;gt;
    width:59%;
  }
}
@-webkit-keyframes bar-three{
  0%{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Define bar-three styles at 0% (0 seconds) */&amp;lt;/span&amp;gt;
    width:0%;
  }
  100%{ &amp;lt;span class=&quot;code-comment&quot;&amp;gt;/* Define bar-three styles at 100% (0.5 seconds) */&amp;lt;/span&amp;gt;
    width:26%;
  }
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;In detail&lt;/h4&gt;

&lt;p&gt;There may well be some bits in there that you're not familiar with, particularly CSS animations. Basically, to animate an element you need to do a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Assign the element an animation name. This name is the 'hook' to link an animation, defined later, to an element.&lt;/li&gt;
&lt;/ol&gt;


&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#data-one{
  -webkit-animation-name:bar-one;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Assign the element animation properties. Here you set things like duration, repetition and ease-in/out.&lt;/li&gt;
&lt;/ol&gt;


&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#data-one,#data-two,#data-three{
  -webkit-animation-duration:0.5s;
  -webkit-animation-iteration-count:1;
  -webkit-animation-timing-function:ease-out;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Set up the keyframes of the animation. Here you set the various points. Here we have one thing to animate through two states, so we simply set a beginning at 0% and and end at 100%. We could set at any percentage in between but as we just have a beginning and an end, we don't need to--Webkit sees to that.&lt;/li&gt;
&lt;/ol&gt;


&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;@-webkit-keyframes bar-one{
  0%{
    width:0%;
  }
  100%{
    width:47%;
  }
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With regards the Webkit reflections, it may be a better idea to consult the &lt;a href=&quot;http://webkit.org/blog/182/css-reflections/&quot;&gt;Surfin' Safari page on that&lt;/a&gt;, as anything I'd say would most likely be a poorly pulled off rehash.&lt;/p&gt;

&lt;h2&gt;Closing word&lt;/h2&gt;

&lt;p&gt;So there you have it, a real life, justifiable and wholly appropriate application of CSS3 and progressive enhancement coupled with data visualisation. Don't be held back by the limitations of older browsers--relish in the opportunities new ones bring.&lt;/p&gt;

&lt;p&gt;And as a final bonus, &lt;a href=&quot;http://twitter.com/VIPickering&quot;&gt;@VIPickering&lt;/a&gt; requested &lt;a href=&quot;/demos/graphs/index2.php&quot;&gt;this (view in Safari/Chrome)&lt;/a&gt;... enjoy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS Wizardry Netvibes widget</title>
   <link href="http://inuitcss.com/2010/02/css-wizardry-netvibes-widget"/>
   <updated>2010-02-02T11:04:54+00:00</updated>
   <id>http://inuitcss.com/2010/02/css-wizardry-netvibes-widget</id>
   <content type="html">&lt;p&gt;For those of you that read CSS Wizardry &lt;em&gt;and&lt;/em&gt; use &lt;a href=&quot;http://www.netvibes.com/&quot;&gt;Netvibes&lt;/a&gt;, I have created &lt;a href=&quot;http://eco.netvibes.com/widgets/295220/css-wizardry-search&quot;&gt;a small search widget&lt;/a&gt; which you may be interested in adding to your Netvibes page. The widget is simply a small search form, from which you can search all the current articles on the CSS Wizardry site. All you need to do is head to &lt;a href=&quot;http://eco.netvibes.com/widgets/295220/css-wizardry-search&quot;&gt;the widget's page&lt;/a&gt; and hit 'Add to Netvibes'.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/02/widget.jpg&quot; alt=&quot;A screenshot of the CSS Wizardry Netvibes widget&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From my point of view, creating the widget could not have been simpler--simply writing some basic form HTML which posts to the blog will yield results, and it then just requires dropping into an XML document and placing on a live server, and linking to via the Netvibes developer centre.&lt;/p&gt;

&lt;p&gt;You can view the 'master' XML document here: &lt;a href=&quot;http://csswizardry.com/netvibes/index.xml&quot;&gt;http://csswizardry.com/netvibes/index.xml&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iPhone CSS—tips for building iPhone websites</title>
   <link href="http://inuitcss.com/2010/01/iphone-css-tips-for-building-iphone-websites"/>
   <updated>2010-01-31T20:17:10+00:00</updated>
   <id>http://inuitcss.com/2010/01/iphone-css-tips-for-building-iphone-websites</id>
   <content type="html">&lt;p&gt;With the rapid rise in mobile browsers, it has probably never been more important to ensure your sites can be handled on these platforms. By far one of the most popular such browsers is Mobile Safari on the iPhone--this is one of the easiest browsers to develop for: it runs on Webkit (meaning a lot of rich CSS3 support) and it's only ever on one resolution and on one OS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; This article addresses iPhone development and iPhone development only. There is no reason why you cannot or should not develop for other mobile devices and platforms, Apple or otherwise. &lt;em&gt;This just happens to be an iPhone only post&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The practical upshot of this is that you need to do no cross-browser testing, and can use all the &lt;a href=&quot;/css3/&quot;&gt;CSS3&lt;/a&gt; you like. This post will show you some of the basics of developing and designing websites for the iPhone and Mobile Safari.&lt;/p&gt;

&lt;h2&gt;To start&lt;/h2&gt;

&lt;p&gt;The first thing to remember when developing a site to be displayed on an iPhone is that it is &lt;em&gt;very&lt;/em&gt; similar to designing a print stylesheet. &lt;em&gt;You need to linearise everything.&lt;/em&gt; Make sure you have one column and everything is read in one line--straight from top to bottom. This will also put your markup writing skills to the test.&lt;/p&gt;

&lt;p&gt;Some people don't agree with browser sniffing, but you need to detect the iPhone somehow.&lt;/p&gt;

&lt;p&gt;This first bit of code is a PHP browser sniffing snippet, the actual CSS we'll use is not brought through via any server side code, we'll use some CSS media queries for that. What we'll use this code for is serving the markup with an iPhone specific meta tag and to shorten the current page's title.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;?php
  $browser = strpos($_SERVER['HTTP_USER_AGENT'],&quot;iPhone&quot;);
    if ($browser == true){
    $browser = 'iphone';
  }
?&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What the above code does is sees if the user agent contains any instance of 'iPhone' using &lt;a href=&quot;http://uk2.php.net/strpos&quot;&gt;the &lt;code&gt;strpos&lt;/code&gt; PHP function&lt;/a&gt;. Place this piece of code at the very top of your header include, before any other markup. In order to action something if the browser &lt;em&gt;is&lt;/em&gt; an iPhone, simply use the following bit of PHP logic in the place you want it to be initiated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;?php if($browser == 'iphone'){ ?&amp;gt;DO THIS&amp;lt;?php } ?&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want people to save your site to their home screen...&lt;/p&gt;

&lt;p&gt;Now, to put that snippet to use. We want to do two things with this little piece of PHP.&lt;/p&gt;

&lt;h3&gt;Saving to the homescreen--shortening the page title&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/01/iphone-01.jpg&quot; alt=&quot;An iPhone screenshot of the CSS Wizardry home screen icon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First off, we'd like users to be able to save a link to your site on their home screen, this is simple enough, they simply need to select to do so from within the browser. However, if you look at the title of my home page alone, it's quite long: CSS Wizardry--CSS, Web Standards, Typography, and Grids by Harry Roberts. This would never fit underneath an icon without being shortened, so we need to serve a different title to the iPhone only. To achieve this we us the PHP snippet like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;?php if($browser == 'iphone'){ ?&amp;gt;
  &amp;lt;title&amp;gt;Short iPhone only title&amp;lt;/title&amp;gt;
&amp;lt;?php }else{ ?&amp;gt;
  &amp;lt;title&amp;gt;Regular title&amp;lt;/title&amp;gt;
&amp;lt;?php } ?&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, both when browsing and saving your site to their home screen, a user will only ever see the shortened version.&lt;/p&gt;

&lt;h4&gt;The home screen icon&lt;/h4&gt;

&lt;p&gt;Actually making the icon is very simple. All you need to do is upload a 57x57px icon (usually a larger version of your favicon) to your server root. The icon must be named &lt;code&gt;apple-touch-icon.png&lt;/code&gt;, and the iPhone will sort the rest out. See &lt;a href=&quot;http://csswizardry.com/apple-touch-icon.png&quot;&gt;my icon&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Stopping user pinch-zooming&lt;/h3&gt;

&lt;p&gt;The second use for the PHP snippet is to serve the iPhone a meta tag which disables the user pinch-zoom that Mobile Safari offers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;?php if($browser == 'iphone'){ ?&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot;
  content=&quot;width=device-width,
  minimum-scale=1.0, maximum-scale=1.0&quot; /&amp;gt;
&amp;lt;?php } ?&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that, once we've linearised the content and sorted the font sizing, the user will only ever have to traverse down your page, much like a native app.&lt;/p&gt;

&lt;h2&gt;Beginning styling&lt;/h2&gt;

&lt;p&gt;Some developers prefer to redirect iPhone users to a totally different version of the site--we won't be doing that.&lt;/p&gt;

&lt;p&gt;We could use the PHP snippet to serve the iPhone a whole new stylesheet, or even send the user to a whole new site, rather like Twitter does (&lt;a href=&quot;http://m.twitter.com/&quot;&gt;m.twitter.com&lt;/a&gt;). However, there's a simpler way to do it using some CSS media queries. The advantage of this is that you're simply reusing old content and pre-written markup, and only ever using one CSS file.&lt;/p&gt;

&lt;p&gt;The first thing you need to do is make sure the HTML link element that points to your main stylesheet does &lt;strong&gt;not&lt;/strong&gt; have a &lt;code&gt;media&lt;/code&gt; attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/path/to/style.css&quot; /&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we're going to use &lt;a href=&quot;http://csswizardry.com/quick-tips/#tip-15&quot;&gt;Quick Tip #15&lt;/a&gt; that I wrote on my Quick Tips page. This means that we can just add our iPhone styles directly onto the end of the main stylesheet, and inherit all the styles set for desktop viewing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*--- Main CSS here ---*/&amp;lt;/span&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    IPHONE
\*------------------------------------*/&amp;lt;/span&amp;gt;
@media screen and (max-device-width: 480px){
&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*--- iPhone only CSS here ---*/&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now any CSS before the media query will be used across all platforms, but anything between the query will be used by any screen media with a maximum screen size of 480px (i.e. an iPhone).&lt;/p&gt;

&lt;h3&gt;Things to remember&lt;/h3&gt;

&lt;p&gt;There are a few key things to remember when developing CSS for the iPhone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Avoid explicit absolute widths--where possible you should use percentage widths.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linearise everything--where possible, remove all floats. We want no content side-by-side unnecessarily.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The first thing to do is to set the &lt;code&gt;-webkit&lt;/code&gt; proprietary CSS &lt;code&gt;-webkit-text-size-adjust&lt;/code&gt; on the body which will resize the text for you, meaning you shouldn't have to touch any font sizes yourself. Also, if your body copy is set in a sans font such as Arial, now is your chance to use some Helvetica--for normal sites, Helvetica should not be used as body copy as it renders hideously on a PC. Take advantage of the fact that you can guarantee its presence and quality on an iPhone. Change your &lt;code&gt;font-family&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*--- Main CSS here ---*/&amp;lt;/span&amp;gt;

&amp;lt;span class=&quot;code-comment&quot;&amp;gt;/*------------------------------------*\
    IPHONE
\*------------------------------------*/&amp;lt;/span&amp;gt;
@media screen and (max-device-width: 480px){
body{
  -webkit-text-size-adjust:none;
  font-family:Helvetica, Arial, Verdana, sans-serif;
  padding:5px;
}
}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above, I also added a small padding to make sure nothing touches the edge of the browser. All wrapper and content &lt;code&gt;div&lt;/code&gt;s from here on in should be set to &lt;code&gt;width:100%;&lt;/code&gt; making them the whole width of the screen, minus 10px.&lt;/p&gt;

&lt;h3&gt;Structure&lt;/h3&gt;

&lt;p&gt;Now, as all layouts differ I am going to assume a similar one to mine, a simple two column set up with a logo and menu in the header. If your layout is different I am sure you can quite easily retrofit it. As I mentioned before, remove all stylistic &lt;code&gt;float&lt;/code&gt;s and set all widths to &lt;code&gt;100%&lt;/code&gt;. If you are using &lt;code&gt;div&lt;/code&gt;s sensibly (i.e. for large bodies of content and not for nav items) this code should see you right for linearising the content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;@media screen and (max-device-width: 480px){
body{...}
div{
  clear:both!important;
  display:block!important;
  width:100%!important;
  float:none!important;
  margin:0!important;
  padding:0!important;
}
}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That will force all &lt;code&gt;div&lt;/code&gt;s to rest one on top of the other, full width and in order. You have begun linearising all your content.&lt;/p&gt;

&lt;h3&gt;The navigation&lt;/h3&gt;

&lt;p&gt;If you have a navigation menu in which all the items are floated and made horizontal, insert the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;@media screen and (max-device-width: 480px){
body{...}
div{...}
#nav,#nav li{
  float:none!important;
  clear:both!important;
  margin:0 0 20px 0!important;
  display:block;
  padding:0;
  text-align:left!important;
  width:100%;
}
#nav{
  border:1px solid #ccc;
  padding:5px;
  -webkit-border-radius:5px;
}
#nav li{
  margin:0!important;
}
#nav li a{
  display:block;
}
}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/01/iphone-02.jpg&quot; alt=&quot;A screenshot of the CSS Wizardry navigation menu on an iPhone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This then will give you a vertical navigation menu which has a 100% width and the actual links themselves have a larger hit area (applied via &lt;code&gt;display:block;&lt;/code&gt;), meaning that it's prominent at the top of each page and easier for users to select single items.&lt;/p&gt;

&lt;h3&gt;Images&lt;/h3&gt;

&lt;p&gt;As images inherently have a set pixel width (i.e. their own width) there is a high chance that they will break out of the wrapper area (as a lot of images will be above 480px wide). To combat this simply add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;@media screen and (max-device-width: 480px){
body{...}
div{...}
#nav,#nav li{...}
img{
  max-width:100%;
  height:auto;
}
}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other than elements very specific to my site, that is pretty much &lt;a href=&quot;/wp-content/themes/default/style.css&quot;&gt;all the CSS I use to quickly size and linearise my content&lt;/a&gt;. Any elements specific to your own site will obviously need considering on a case-by-case basis, but if you remember to not set absolute widths and to always linearise your content then it should be a doddle. Oh and it's a great time to use some guaranteed &lt;a href=&quot;/css3/&quot;&gt;CSS3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;View &lt;a href=&quot;http://csswizardry.com/wp-content/uploads/2010/01/iphone-03.jpg&quot;&gt;a screenshot of an entire page of CSS Wizardry&lt;/a&gt; on an iPhone.&lt;/p&gt;

&lt;p&gt;Do you have an iPhone version of your site? Have you any more tips you'd like to add? Please do so in the comments below.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The three types of dash</title>
   <link href="http://inuitcss.com/2010/01/the-three-types-of-dash"/>
   <updated>2010-01-30T17:07:43+00:00</updated>
   <id>http://inuitcss.com/2010/01/the-three-types-of-dash</id>
   <content type="html">&lt;p&gt;Unbeknown to many, there are &lt;del&gt;three main&lt;/del&gt; many types of dash, and one of the most common typographical mistakes is to use the wrong dash for the wrong job. There are actually &lt;del&gt;three&lt;/del&gt; several different types of dash and each have their own uses. The 'dash' you see on your keyboard is actually a hyphen which is used as a 'catch all' glyph which is used for several purposes. The only reason for this is that there's just not enough room on a keyboard for so many different dashes.&lt;/p&gt;

&lt;h3&gt;The em dash --&lt;/h3&gt;

&lt;p&gt;The em dash (&lt;code&gt;&amp;amp;mdash;&lt;/code&gt;)--so named because it is the width of a capital 'M'--is used to delimit a separate clause in a sentence--rather like this--or similar sub-clause structures. Often used in its place however is the hyphen (-). Looking at the two side by side the difference is quite clear:&lt;/p&gt;

&lt;h4&gt;Proper em dashes:&lt;/h4&gt;

&lt;p&gt;The em dash (--), or m dash, m-rule, etc., often demarcates a parenthetical thought--like this one--or some similar interpolation.&lt;/p&gt;

&lt;h4&gt;Improper hyphens:&lt;/h4&gt;

&lt;p&gt;The em dash (--), or m dash, m-rule, etc., often demarcates a parenthetical thought - like this one - or some similar interpolation.&lt;/p&gt;

&lt;h4&gt;Spaces around em dashes&lt;/h4&gt;

&lt;p&gt;The proper setting of em dashes seems somewhat unclear. The ideal way to set them is with hair spaces (&lt;code&gt;&amp;amp;#8202;&lt;/code&gt;) either side -- like this. However, IE6 doesn't support the hair space leaving the options of either fully spaced -- like this, or unspaced--like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            Various means of spacing em dashes




                    Fully Spaced
                    Hair Spaced
                    Un Spaced









                        This -- is an em -- dash.





                        This -- is an em -- dash.





                        This--is an em--dash.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The en dash -&lt;/h3&gt;

&lt;p&gt;The en dash (&lt;code&gt;&amp;amp;ndash;&lt;/code&gt;)--so named because it is half the width of a capital 'M' (an 'n')--has altogether different uses to the em dash. The en dash is used in ranges, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;6 - 10 years&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;July 10 - August 1 2009&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pp. 40-42&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;§§ 12-13&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Read &lt;a href=&quot;http://en.wikipedia.org/wiki/Dash#En_dash&quot;&gt;more specific guidelines&lt;/a&gt; on Wikipedia.&lt;/p&gt;

&lt;h3&gt;The hyphen&lt;/h3&gt;

&lt;p&gt;The purpose of the hyphen (-) is to join two words--for example 'front-end'--and to separate syllables when splitting a long word over two lines. As previously mentioned, the hyphen is often misused in place of both the above.&lt;/p&gt;

&lt;h4&gt;The minus&lt;/h4&gt;

&lt;p&gt;There is also a separate dash for the minus symbol. The proper entity for a minus symbol is simply &lt;code&gt;&amp;amp;minus;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;More reading&lt;/h3&gt;

&lt;p&gt;A reader of the old CSS Wizardry left me with a link to &lt;a href=&quot;http://garyjones.co.uk/development/hyphens&quot;&gt;one of his own articles&lt;/a&gt; covering a few &lt;em&gt;further&lt;/em&gt; variations of each.
  &lt;em&gt;[§§]: sections
  &lt;/em&gt;[pp.]: pages
  *[IE6]: Internet Explorer 6&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The importance of proper punctuation</title>
   <link href="http://inuitcss.com/2010/01/the-importance-of-proper-punctuation"/>
   <updated>2010-01-27T11:44:38+00:00</updated>
   <id>http://inuitcss.com/2010/01/the-importance-of-proper-punctuation</id>
   <content type="html">&lt;p&gt;This is a short (and cheeky) post on the necessity of using proper punctuation--particularly the hyphen--and how it can completely alter the meaning of your sentence, often with ill effect. This morning, for one reason or another, I was reminded of a conversation I had with &lt;a href=&quot;http://twitter.com/nofunnyname&quot;&gt;@nofunnyname&lt;/a&gt; last week on the subject of him buying a car. He said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;I need to get an old ass banger.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, is that 'old-ass banger', or 'old ass-banger'? You decide ;)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A reconsideration—in defence of <b> and <i> (or: people fear what they don't understand)</title>
   <link href="http://inuitcss.com/2010/01/a-reconsiderationin-defence-of-b-and-i-or-people-fear-what-they-dont-understand"/>
   <updated>2010-01-26T23:06:10+00:00</updated>
   <id>http://inuitcss.com/2010/01/a-reconsiderationin-defence-of-b-and-i-or-people-fear-what-they-dont-understand</id>
   <content type="html">&lt;p&gt;The other day, I got to thinking about the HTML elements &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;, and wondered if they were still &lt;em&gt;viably&lt;/em&gt; usable in production code. I've personally never used them before but I was aware that they existed and were still very much valid XHTML markup (even in the Strict &lt;code&gt;DOCTYPE!&lt;/code&gt;). Wondering whether I'd avoided two elements for three years unnecessarily, I did some digging.&lt;/p&gt;

&lt;h2&gt;What the facts state&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; &lt;em&gt;are&lt;/em&gt; still valid, and as XHTML is just an XML serialisation of HTML, pretty much all the elements apparent in the HTML spec are true of the XHTML spec too--it is, pretty much, just the way in which these elements are written that makes them different in XHTML.&lt;/p&gt;

&lt;h2&gt;Twitter&lt;/h2&gt;

&lt;p&gt;With the help of &lt;a href=&quot;http://twitter.com/smashingmag&quot;&gt;@smashingmag&lt;/a&gt; I turned to &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;Twitter&lt;/a&gt; and my knowledgeable followers and asked the question:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Using &lt;i&gt; and &lt;b&gt; in (valid) XHTML (strict)… your thoughts on this would be much appreciated. #upcomingBlogPost Cheers all!&quot; &lt;strong&gt;&lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;@csswizardry&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Most of the answers I got said petty much the same thing: use &lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; ... &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; are deprecated. While this is largely true, there are some myths that need dispelling.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; the same as bold and italics. strong is strong emphasis and em is emphasis. &lt;strong&gt;It is purely through convention that these two elements happen to adopt either bold or italicised appearances.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;b&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; deprecated in any way in HTML or XHTML. &lt;strong&gt;They are still in existence, still valid and still (in the right places) usable.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Some replies&lt;/h3&gt;

&lt;p&gt;A few choice replies I received which are, on the whole, representative of everyone's thoughts:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;strong and em make more sense, especially when taking screen readers into account. &lt;strong&gt;&lt;a href=&quot;http://twitter.com/CreativeNotice&quot;&gt;@CreativeNotice&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Or so you'd think, see below...&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;I prefer &lt;strong&gt; &lt;/em&gt; because of semantics . You want to put emphasis, not just make text italic.&quot; &lt;strong&gt;&lt;a href=&quot;http://twitter.com/wehelpdesign&quot;&gt;@WeHelpDesign&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, if you &lt;em&gt;do&lt;/em&gt; just want emphasis that is...&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Using &lt;i&gt; and &lt;b&gt; is just fine if it's for visual bling without real semantic background.&quot; &lt;strong&gt;&lt;a href=&quot;http://twitter.com/levito&quot;&gt;@levito&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ah, this is more like it!&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;&lt;b&gt; and &lt;i&gt; tags describe presentation, not structural semantics. Rather style &lt;em&gt; and &lt;strong&gt; tags.&quot; &lt;strong&gt;&lt;a href=&quot;http://twitter.com/hornergraphic&quot;&gt;@hornergraphic&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;A view that is seemingly shared by almost everyone else who responded.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;What about strong and em?&lt;/h3&gt;

&lt;p&gt;The vast majority of people who replied were in favour of &lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; over &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt;. Presuming all respondents were assuming the question was 'What are your thoughts on using &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; to represent strong emphasis and emphasis, and thus replace &lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt;?' then they'd have all been spot on correct. However, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; are  totally separate things. &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; assume no semantic value, meaning literally bold and italic respectively. &lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; however have nothing to do with bold or italics. As previously mentioned, it is through convention only that the default styling for each is so.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; are 'spoken word' type elements, where they represent a change in tone only. This means that their styling is in no way linked to their naming, it is just that us, as people, are familiar with italicised prose sounding more stressed--or emphasised--than surrounding text. This is where the importance of aforementioned semantics and screenreaders come in. Or is it...?&lt;/p&gt;

&lt;h4&gt;The screenreader fallacy&lt;/h4&gt;

&lt;p&gt;Screenreaders &lt;em&gt;don't&lt;/em&gt; use &lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;The common belief is that &lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt;'s semantic meaning is used by screenreaders to alter tonality when reading content aloud, thus letting the user know that the copy is in fact meant to be understood in a different manner to any neighbouring text. This was something I too believed until the wonderfully knowledgeable &lt;a href=&quot;http://twitter.com/pekingspring&quot;&gt;@pekingspring&lt;/a&gt; pointed me toward &lt;a href=&quot;http://www.paciellogroup.com/blog/?p=41&quot;&gt;this article&lt;/a&gt; by &lt;a href=&quot;http://twitter.com/stevefaulkner&quot;&gt;@stevefaulkner&lt;/a&gt;--it turns out screenreaders &lt;em&gt;don't&lt;/em&gt; use &lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; to alter tonality!&lt;/p&gt;

&lt;p&gt;This means that screenreaders see no semantic value in the &lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; element. However, they should be used &lt;em&gt;unconditionally&lt;/em&gt; where a change in tone is implied, whether a screenreader will understand this or not.&lt;/p&gt;

&lt;h3&gt;Where to use &lt;b&gt; and &lt;i&gt; then?&lt;/h3&gt;

&lt;p&gt;One of my first thoughts was where to use these elements if indeed they are still usable. My initial idea was the use of &lt;code&gt;i&lt;/code&gt; for markup up things that have to be italicised but the italics aren't indicative of any tone. To quote the Penguin Guide to Punctuation:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Another use of italics ... is to cite titles of complete works...&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Initially I thought this was the ideal use for the &lt;code&gt;i&lt;/code&gt; element--something that had to be in italics, yet implied no tone of voice. It was such a good fit! However, &lt;a href=&quot;http://twitter.com/pekingspring&quot;&gt;@pekingspring&lt;/a&gt; came to my aid again and reminded me that the &lt;code&gt;cite&lt;/code&gt; element is for this exact purpose. That was that idea gone.&lt;/p&gt;

&lt;p&gt;Another possible usage for the &lt;code&gt;i&lt;/code&gt; element was gleaned from the &lt;a href=&quot;http://typographyapp.com/&quot;&gt;Typography Manual&lt;/a&gt; iPhone app, which states:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Italics should be used for single letters in a sentence referred to as letters. [for] example 'The letter &lt;em&gt;j&lt;/em&gt; appears too large.'&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;An idea I had for using &lt;code&gt;b&lt;/code&gt; was somewhat linked to the &lt;code&gt;cite&lt;/code&gt; element anyway. A common mistake is to markup the 'author' of a quote in &lt;code&gt;cite&lt;/code&gt; tags. This is of course incorrect, but what &lt;em&gt;do&lt;/em&gt; you use? It's not really a paragraph, so what is it? I did consider the &lt;code&gt;b&lt;/code&gt; element for this, but I feel that such a piece of information does need a more semantic element to represent it.&lt;/p&gt;

&lt;p&gt;Friend and colleague &lt;a href=&quot;http://twitter.com/simonwiffen&quot;&gt;@simonwiffen&lt;/a&gt; has a very nicely written example usage for each, which I personally think are spot on. The following chunk of text is lifted directly from an internal document written by &lt;a href=&quot;http://twitter.com/simonwiffen&quot;&gt;@simonwiffen&lt;/a&gt;:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;1.4.3 Strong, emphasis, bold and italic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; (strong emphasis) and &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; (emphasis) should be used as opposed to &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; (bold) and &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; (italic) unless the bold or italic is required without any semantic context (for example in a product name).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Remember &lt;strong&gt;you must&lt;/strong&gt; check this box&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;p&amp;gt;Remember &amp;lt;strong&amp;gt;you must&amp;lt;/strong&amp;gt; check this box.&amp;lt;/p&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should &lt;em&gt;really&lt;/em&gt; try to validate your pages&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;p&amp;gt;You should &amp;lt;em&amp;gt;really&amp;lt;/em&amp;gt; try to validate your pages&amp;lt;/p&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read more about &lt;strong&gt;Splash_down_!™&lt;/strong&gt; below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;p&amp;gt;Read more about &amp;lt;b&amp;gt;Splash&amp;lt;i&amp;gt;down&amp;lt;/i&amp;gt;!™&amp;lt;/b&amp;gt; below&amp;lt;/p&amp;gt;&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Succinct and, in my opinion, pretty hard to argue with.&lt;/p&gt;

&lt;h4&gt;HTML5 has it sussed&lt;/h4&gt;

&lt;p&gt;I won't be using HTML5 for a long while yet, but that's another story altogether...&lt;/p&gt;

&lt;p&gt;Ideally I'd like to retrofit the HTML5 specification's definitions of each for use right now in XHTML, however I'm not sure I'd be comfortable going ahead with doing such a thing, coding to one spec whilst picking my favourite bits of another.&lt;/p&gt;

&lt;h5&gt;The &lt;b&gt; element in HTML5&lt;/h5&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;The b element represents  a span of text to be stylistically offset from the normal prose without conveying any extra importance, such as key words in a document abstract, product names in a review, or other spans of text whose typical typographic presentation is boldened.&quot;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.w3.org/html5/spec/Overview.html#the-b-element&quot;&gt;HTML5&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5&gt;The &lt;i&gt; element in HTML5&lt;/h5&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;The i  element represents  a span of text in an alternate voice or mood, or otherwise offset from the normal prose, such as a taxonomic designation, a technical term, an idiomatic phrase from another language, a thought, a ship name, or some other prose whose typical typographic presentation is italicized.&quot;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.w3.org/html5/spec/Overview.html#the-i-element&quot;&gt;HTML5&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;A go-between in the meantime?&lt;/h3&gt;

&lt;p&gt;There will always be the argument that instead of using &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; you could or should use something like &lt;span class=&quot;italics&quot;&gt; or &lt;span class=&quot;bold&quot;&gt; so as to avoid using insemantic elements, however a class name like that is more insemantic than an in-spec HTML element. Not to mention the fact that a &lt;code&gt;span&lt;/code&gt; with a &lt;code&gt;class&lt;/code&gt; applied is far more cumbersome than a 'pre-made' piece of HTML.&lt;/p&gt;

&lt;h3&gt;The resolve?&lt;/h3&gt;

&lt;p&gt;So which is worse?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using &lt;code&gt;i&lt;/code&gt; to mark up emphasised text&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;code&gt;em&lt;/code&gt; to mark up italicised and non-emphasised text&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;code&gt;i&lt;/code&gt; to mark up purely italicised text&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;code&gt;&amp;lt;span class=&quot;italics&quot;&amp;gt;&lt;/code&gt; to mark up italicised text&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Special thanks to the following for help with this article: &lt;a href=&quot;http://twitter.com/smashingmag&quot;&gt;@smashingmag&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/pekingspring&quot;&gt;@pekingspring&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/stevefaulkner&quot;&gt;@stevefaulkner&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/simonwiffen&quot;&gt;@simonwiffen&lt;/a&gt; and all &lt;a href=&quot;http://twitter.com/csswizardry/followers&quot;&gt;my Twitter followers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think that the fact that &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; are still in the spec, are valid (even in strict) and are being carried over to HTML5 (albeit slightly redefined) indicates that there is still a very real place for them in web development right now. The frequency with which they'll be used is slim at best, but they should not be ruled out, and at the very least not misunderstood. I'm not going to make the leap myself just yet, but they are there, they are usable, and one day I might just use them.&lt;/p&gt;

&lt;p&gt;What are you going to do?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A suitable alternative—on proper use of alt attributes</title>
   <link href="http://inuitcss.com/2010/01/a-suitable-alternativeon-proper-use-of-alt-attributes"/>
   <updated>2010-01-26T16:03:03+00:00</updated>
   <id>http://inuitcss.com/2010/01/a-suitable-alternativeon-proper-use-of-alt-attributes</id>
   <content type="html">&lt;p&gt;Images in HTML come with a mandatory attribute used to &lt;em&gt;textually&lt;/em&gt; describe the information displayed &lt;em&gt;visually&lt;/em&gt; through the image. The &lt;code&gt;alt&lt;/code&gt; attribute (&lt;a href=&quot;http://csswizardry.com/eta&quot;&gt;not tag&lt;/a&gt;) is used by screenreaders etc to tell users who can't view the actual image what it represents. It is also used in any circumstance where images can't be loaded (slow connections, broken URIs etc).&lt;/p&gt;

&lt;h2&gt;When not to use it&lt;/h2&gt;

&lt;p&gt;You should never &lt;em&gt;not&lt;/em&gt; use an &lt;code&gt;alt&lt;/code&gt; attribute, rather leave it empty, thus: &lt;code&gt;alt=&quot;&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The only time you can really get away with &lt;em&gt;not&lt;/em&gt; having a complete &lt;code&gt;alt&lt;/code&gt; attribute is if the image holds no context or information that the user needs to be aware of. This is usually the case when the image is purely decorational, though it may be argued that the image should therefore be added through CSS in the spirit of separating style and content. By that token it is fairly safe to say that there should never be an instance in which you leave an &lt;code&gt;alt&lt;/code&gt; attribute empty.&lt;/p&gt;

&lt;h2&gt;You're using it, but not quite right...&lt;/h2&gt;

&lt;p&gt;The next best scenario is that you are using images correctly, for their correct purpose and are using &lt;code&gt;alt&lt;/code&gt; attributes, but they don't really do as much as they should. A lot of the time I come across images that have less than ideal &lt;code&gt;alt&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/01/car.jpg&quot; alt=&quot;A photograph of an abandoned car&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Image sourced via Google Images--original author unknown.&lt;/p&gt;

&lt;p&gt;One example might be the above image of a car. This, while technically correct, is not ideal: &lt;code&gt;&amp;lt;img src=&quot;/img/car.jpg&quot; alt=&quot;Car&quot; /&amp;gt;&lt;/code&gt;. All this tells the user is 'Car'. It doesn't say whether it's a picture with the word car in it, or whether it's a picture of a car. A much better &lt;code&gt;alt&lt;/code&gt; attribute would be &lt;code&gt;alt=&quot;A photograph of an abandoned car&quot;&lt;/code&gt; (as used in my code).&lt;/p&gt;

&lt;h3&gt;Other poor uses&lt;/h3&gt;

&lt;p&gt;Another real-world example of poor &lt;code&gt;alt&lt;/code&gt; attribute usage is actually on &lt;a href=&quot;http://www.cnn.com/&quot;&gt;CNN's website&lt;/a&gt;. On their home page today (26 January, 2010) they have a series of headlines with accompanying images. The code for such a pairing looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;img height=&quot;68&quot; border=&quot;0&quot; width=&quot;120&quot; alt=&quot;Haiti's swanky club -&amp;gt;
now home to misery&quot; src=&quot;http://i.cdn.turner.com/cnn/2010/WORLD/ -&amp;gt;
americas/01/26/haiti.camp/tzvids.haiti.aid.cnn.jpg&quot;&amp;gt; -&amp;gt;
… Haiti's swanky club now home to misery&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is wrong on two counts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A screenreader will read out to the user Haiti's swanky club now home to misery … Haiti's swanky club now home to misery. Every image/headline pairing on the page is laid out like this, meaning in every instance a user using a screenreader will hear the headline twice. This will surely soon get annoying.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Secondly, the image was actually of earthquake survivors holding a large bag, nothing to do with clubs and, unfortunately, far from swanky.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;Using the attribute properly&lt;/h2&gt;

&lt;p&gt;On the &lt;a href=&quot;http://www.bbc.co.uk/&quot;&gt;BBC's home page&lt;/a&gt; however (on the same date) they are using &lt;code&gt;alt&lt;/code&gt; attributes perfectly. They have an image of a woman wearing a veil, alongside the article's headline France report back face veil ban. The image's &lt;code&gt;alt&lt;/code&gt; attribute: &lt;code&gt;alt=&quot;A woman wears a full-length veil in Lyon, 25 January&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;The biggest no-no of all&lt;/h2&gt;

&lt;p&gt;One thing which consistently winds me up is the ridiculously bad practice of stuffing &lt;code&gt;alt&lt;/code&gt; attributes with keywords. &lt;code&gt;alt&lt;/code&gt; attributes are an accessibility feature, end of. They are &lt;em&gt;not&lt;/em&gt; a way of slipping in keywords out of sight, and any attempt to do so is irresponsible and incredibly bad practice. The only time 'keywords' may be validly placed in &lt;code&gt;alt&lt;/code&gt; attributes is if it's explicitly related to the image; for example: &lt;code&gt;&amp;lt;img src=&quot;/img/product.jpg&quot; alt=&quot;A photograph of Mike's Carpets' ProClean™ carpet cleaner&quot; /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;How to do it properly&lt;/h2&gt;

&lt;p&gt;Writing proper &lt;code&gt;alt&lt;/code&gt; text is incredibly simple, yet a little more time consuming than the 'Car' cop-out. All you need to do is write out in full exactly what the image shows. If it's an elephant giving a donkey a piggy-back don't be lazy and use &lt;code&gt;alt=&quot;Elephant and a donkey&quot;&lt;/code&gt;. Instead, write out &lt;code&gt;alt=&quot;A photograph of an African elephant giving a donkey a piggy back across a swamp&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, for any pages that use similar images repeatedly but are slightly different to one another, make sure your alt attributes reflect these differences. A good example would be &lt;a href=&quot;http://csswizardry.com/portfolio/&quot;&gt;my portfolio page&lt;/a&gt;. Instead of using &lt;code&gt;alt=&quot;Screenshot&quot;&lt;/code&gt; over and over again I used text like &lt;code&gt;alt=&quot;Screenshot of Suzanna Haworth’s website&quot;&lt;/code&gt; and &lt;code&gt;alt=&quot;Screenshot of RAAMaudio UK Ltd.&quot;&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;This is one of the most basic aspects of web development, but one that too many people are still getting wrong.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Customer service—a company's biggest asset</title>
   <link href="http://inuitcss.com/2010/01/customer-servicea-companys-biggest-asset"/>
   <updated>2010-01-10T21:38:40+00:00</updated>
   <id>http://inuitcss.com/2010/01/customer-servicea-companys-biggest-asset</id>
   <content type="html">&lt;p&gt;Recently, when buying products or dealing with companies, I have been noticing something, and its profound effects on me--&lt;em&gt;customer service&lt;/em&gt;. You can deal with a business and get exactly what you're after, but it is in that process that some companies can really shine beyond others, and that some can really leave a bad taste in your mouth...&lt;/p&gt;

&lt;h2&gt;The good&lt;/h2&gt;

&lt;p&gt;It's nice to be able to say that lately I've been noticing an &lt;em&gt;increase&lt;/em&gt; in good customer service rather than bad. Instead of boring you with reams of storytelling and recounts, I'll just give a list and a few points on why I enjoyed dealing with each:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://moo.com/&quot;&gt;Moo&lt;/a&gt;:&lt;/strong&gt; I used Moo's online system to make &lt;a href=&quot;http://csswizardry.com/2010/01/moo-business-cardsmost-impressive/&quot;&gt;my new business cards&lt;/a&gt;. They quality was amazing, the delivery was speedy, the process was smooth and the company is great. I'd definitely recommend them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.tampopo.co.uk/&quot;&gt;Tampopo&lt;/a&gt;:&lt;/strong&gt; Suze and I headed to Tampopo yesterday for some lunch. If you live near a Tampopo and have never been, I urge you to go. The food is outstanding, the service is quick and the staff are extremely friendly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://labottegamilanese.co.uk/&quot;&gt;La Bottega Milanese&lt;/a&gt;:&lt;/strong&gt; This is a tiny little coffee shop that has recently opened by my house. It's not a franchise or a chain, it's one guy who has opened up a lovely little shop. The coffee was excellent, he was extremely friendly, the shop was nice and it was just a more enjoyable experience than your typical Starbucks type coffee.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.northbar.com/&quot;&gt;North Bar&lt;/a&gt;:&lt;/strong&gt; North Bar is a gorgeous little bar in the centre of Leeds, and a personal favourite of mine. The beers there are out of this world and the service is always superb. If you like world beers, you'll love North Bar.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;The bad&lt;/h2&gt;

&lt;p&gt;Unfortunately there is a flip-side. There are places where the service is not that good.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.pcworld.co.uk/&quot;&gt;PC World&lt;/a&gt;:&lt;/strong&gt; Just after Christmas I bought myself a Dell Inspiron Netbook from PC World. &lt;del&gt;I&lt;/del&gt; Suze called up the night before to reserve one black Netbook at the online price of £249. We arrived at the store the next day to find they'd reserved two red ones at £279. When we mentioned this they seemed to think it was our fault. 'It says here you wanted red. It says here you want two. You don't want to pay for extra security?!'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://oportobar.co.uk/&quot;&gt;Oporto&lt;/a&gt;, &lt;a href=&quot;http://tinyurl.com/y9fvryz&quot;&gt;Jake's Bar&lt;/a&gt; and &lt;a href=&quot;http://www.barroombar.com/wherewelive/index.php?view=bar&amp;amp;display=leeds&quot;&gt;Bar Room Bar&lt;/a&gt;:&lt;/strong&gt; This might just be 'one of those things' but anyone &lt;a href=&quot;http://twitter.com/csswizardry&quot;&gt;following me&lt;/a&gt; on &lt;a href=&quot;http://twitter.com/csswizardry/status/7574973304&quot;&gt;Twitter&lt;/a&gt; will know that this got me absolutely livid. I headed out with a good friend &lt;a href=&quot;http://twitter.com/JoeWhitley&quot;&gt;Joe Whitley&lt;/a&gt; for a few drinks in Leeds only to be turned away from three bars because they weren't prepared to let two guys in without any female company. So much for organising a night out with a male friend. Three of the better bars in Leeds, plus my favourite, Oporto, really managed to annoy and alienate me last night...&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;In short...&lt;/h3&gt;

&lt;p&gt;So, in short, the products of all the above are completely acceptable, and worth the amount you pay for them. What made all the difference however is the non-monetary value added (or subtracted) through customer service. It's something all businesses should definitely try and focus on more.&lt;/p&gt;

&lt;p&gt;Any stories of good or bad customer services yourselves?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Moo business cards—most impressive</title>
   <link href="http://inuitcss.com/2010/01/moo-business-cardsmost-impressive"/>
   <updated>2010-01-09T16:36:42+00:00</updated>
   <id>http://inuitcss.com/2010/01/moo-business-cardsmost-impressive</id>
   <content type="html">&lt;p&gt;After so long with no type of business cards to speak of, I decided to design myself some new ones. I wanted to use the pink I use on the site (&lt;code&gt;#f43059&lt;/code&gt;) but I also wanted to shy away from using the obvious choice of Helvetica (although it &lt;em&gt;is&lt;/em&gt; a beautiful typeface). Instead I opted for Din, which I think works amazingly well in context. I also decided to use &lt;a href=&quot;http://moo.com/&quot;&gt;Moo&lt;/a&gt; for the printing, and I am &lt;em&gt;extremely&lt;/em&gt; glad I did...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/01/cards.jpg&quot; alt=&quot;CSS Wizardry business cards&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Naturally I designed the cards in Illustrator but my initial thoughts were to flatten these vector files and send them off to a print company to be done by them. However, after remembering Moo, I decided to give them a shot and get a limited run of just fifty cards made--this was because I wasn't sure on just how good the quality might be...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/01/cards-02.jpg&quot; alt=&quot;Photograph of the front and back of my business cards&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The main reason for my concerns about quality was the fact that I was to print the cards from a .jpg image, rather than a lossless vector format. However, when they arrived I was amazed to find they were perfectly legible, totally flawless and perfectly finished. Nothing was even slightly questionable about the cards or their quality, I was pretty impressed!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/01/case.jpg&quot; alt=&quot;Photograph of the case in which my Moo business cards arrived&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As well as the quality of the cards themselves I was delighted to find they were presented in a gorgeous heavy card case along with some sorting tags for 'Mine' and 'Theirs' business cards. A beautiful way to present some top quality cards.&lt;/p&gt;

&lt;h2&gt;Moo MiniCards&lt;/h2&gt;

&lt;p&gt;As well as getting myself some business cards from Moo I decided to surprise &lt;a href=&quot;http://twitter.com/suzehaworth&quot;&gt;Suze&lt;/a&gt; with some MiniCards with a few photos from &lt;a href=&quot;http://www.flickr.com/photos/suzannahaworth/&quot;&gt;her Flickr stream&lt;/a&gt;. The cards were, again, top quality, presented in a lovely shallow box. She was really pleased with them! Although she is wondering what exactly to do with them, so please post any suggestions!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2010/01/minicards.jpg&quot; alt=&quot;Suzanna Haworth’s MiniCards&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;A firm recommendation...&lt;/h3&gt;

&lt;p&gt;After the speed with which the cards were printed and delivered, their outstanding quality, the beautiful presentation and the sheer pleasure of using Moo (not to mention the extremely attractive prices) I will, without a shadow of a doubt, be using Moo again, and definitely recommending them to anyone who requires professional business cards or something novelty like their MiniCards. Five star service.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Message to Santa—a Christmas project</title>
   <link href="http://inuitcss.com/2009/12/message-to-santaa-christmas-project"/>
   <updated>2009-12-23T11:01:54+00:00</updated>
   <id>http://inuitcss.com/2009/12/message-to-santaa-christmas-project</id>
   <content type="html">&lt;p&gt;Last year, the ever so talented &lt;a href=&quot;http://stargirl-art.co.uk/&quot;&gt;Megan Smith&lt;/a&gt; and I designed and built &lt;a href=&quot;http://messagetosanta.net/&quot;&gt;Message to Santa&lt;/a&gt;--a cool way for kids to send of their present letters to the Big Man. Megan provided the cute little illustrations, and I designed and built it all. Although it is December 23 now, so probably a little late to be sending off your letters, I thought I'd do a quick blog post about it...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://messagetosanta.net/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2009/12/mts.jpg&quot; alt=&quot;A screenshot of Message to Santa&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Typographic work planner</title>
   <link href="http://inuitcss.com/2009/12/typographic-work-planner"/>
   <updated>2009-12-22T11:17:25+00:00</updated>
   <id>http://inuitcss.com/2009/12/typographic-work-planner</id>
   <content type="html">&lt;p&gt;No one likes being told what to do, especially if it's work related, but nevertheless jobs need done. Why present boring stuff in a boring way? If you're going to be told what to do, at least soften the blow by being told nicely. Enter this, a little HTML/CSS typographic work planner. By using some super-semantic HTML and a dash of CSS you can craft a beautiful looking yet incredibly simple work planner for you and your staff.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://csswizardry.com/demos/typographic-work-planner/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2009/12/table.jpg&quot; alt=&quot;Screenshot of the typographic work planner&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Typographic work planner markup:&lt;/h2&gt;

&lt;p&gt;The rich, semantic markup is as follows. Notice the use of the more semantic elements and attributes such as &lt;code&gt;summary=&quot;&quot;&lt;/code&gt;, &lt;code&gt;colgroup&lt;/code&gt;, &lt;code&gt;scope=&quot;&quot;&lt;/code&gt;, &lt;code&gt;caption&lt;/code&gt; and more...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&amp;gt;

  &amp;lt;title&amp;gt;Typographic work planner&amp;lt;/title&amp;gt;

  &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body id=&quot;home&quot;&amp;gt;
  &amp;lt;div id=&quot;wrapper&quot;&amp;gt;
    &amp;lt;table summary=&quot;An overview of upcoming and recently completed work ?
    by employees&quot;&amp;gt;
      &amp;lt;caption&amp;gt;Work schedule&amp;lt;/caption&amp;gt;
      &amp;lt;colgroup&amp;gt;
        &amp;lt;col id=&quot;date&quot; /&amp;gt;
        &amp;lt;col id=&quot;user&quot; /&amp;gt;
        &amp;lt;col id=&quot;dec&quot; /&amp;gt;
      &amp;lt;/colgroup&amp;gt;
      &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th scope=&quot;col&quot;&amp;gt;Date&amp;lt;/th&amp;gt;
          &amp;lt;th scope=&quot;col&quot;&amp;gt;User&amp;lt;/th&amp;gt;
          &amp;lt;th scope=&quot;col&quot;&amp;gt;Description&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/thead&amp;gt;
      &amp;lt;tfoot&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;td colspan=&quot;3&quot;&amp;gt;Sense Internet Ltd work planner&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/tfoot&amp;gt;
      &amp;lt;tbody&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;td class=&quot;date&quot;&amp;gt;20 December, 2009&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;user&quot;&amp;gt;Harry Roberts&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;desc&quot;&amp;gt;Lorem ipsum dolor sit amet, elit. Nunc ?
          rhoncus dui et mauris. Nam augue felis, dapibus ut, condimentum ?
          in, ornare a, est. Proin sem risus, pretium ut, mattis nec.&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;td class=&quot;date&quot;&amp;gt;20 December, 2009&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;user&quot;&amp;gt;Joe Whitley&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;desc&quot;&amp;gt;Suspendisse venenatis. Donec eleifend ?
          dignissim diam. Integer faucibus neque tempor pede. Maecenas at ?
          magna sed lectus adipiscing molestie. Pellentesque habitant morbi ?
          tristique senectus et netuset malesuada fames ac turpis egestas. ?
          Curabitur sodales gravida tellus.&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;td class=&quot;date&quot;&amp;gt;21 December, 2009&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;user&quot;&amp;gt;Harry Roberts&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;desc&quot;&amp;gt;Lorem ipsum dolor sit amet, elit. Nunc ?
          rhoncus dui et mauris. Nam augue felis, dapibus ut, condimentum ?
          in, ornare a, est. Proin sem risus, pretium ut, mattis nec.&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;td class=&quot;date&quot;&amp;gt;21 December, 2009&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;user&quot;&amp;gt;Joe Whitley&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;desc&quot;&amp;gt;Suspendisse venenatis. Donec eleifend ?
          dignissim diam. Integer faucibus neque tempor pede. Maecenas at ?
          magna sed lectus adipiscing molestie. Pellentesque habitant morbi ?
          tristique senectus et netuset malesuada fames ac turpis egestas. ?
          Curabitur sodales gravida tellus.&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;td class=&quot;date&quot;&amp;gt;21 December, 2009&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;user&quot;&amp;gt;Sam Penrose&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;desc&quot;&amp;gt;Lorem ipsum dolor sit amet, elit. Nunc ?
          rhoncus dui et mauris. Nam augue felis, dapibus ut, condimentum ?
          in, ornare a, est. Proin sem risus, pretium ut, mattis nec.&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr class=&quot;today&quot;&amp;gt;
          &amp;lt;td class=&quot;date&quot;&amp;gt;22 December, 2009&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;user&quot;&amp;gt;Joe Whitley&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;desc&quot;&amp;gt;Suspendisse venenatis. Donec eleifend ?
          dignissim diam. Integer faucibus neque tempor pede. Maecenas at ?
          magna sed lectus adipiscing molestie. Pellentesque habitant morbi ?
          tristique senectus et netuset malesuada fames ac turpis egestas. ?
          Curabitur sodales gravida tellus.&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr class=&quot;today&quot;&amp;gt;
          &amp;lt;td class=&quot;date&quot;&amp;gt;22 December, 2009&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;user&quot;&amp;gt;Sam Penrose&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;desc&quot;&amp;gt;Lorem ipsum dolor sit amet, elit. Nunc ?
          rhoncus dui et mauris. Nam augue felis, dapibus ut, condimentum ?
          in, ornare a, est. Proin sem risus, pretium ut, mattis nec.&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr class=&quot;today&quot;&amp;gt;
          &amp;lt;td class=&quot;date&quot;&amp;gt;22 December, 2009&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;user&quot;&amp;gt;Joe Whitley&amp;lt;/td&amp;gt;
          &amp;lt;td class=&quot;desc&quot;&amp;gt;Suspendisse venenatis. Donec eleifend ?
          dignissim diam. Integer faucibus neque tempor pede. Maecenas at ?
          magna sed lectus adipiscing molestie. Pellentesque habitant morbi ?
          tristique senectus et netuset malesuada fames ac turpis egestas. ?
          Curabitur sodales gravida tellus.&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;In detail...&lt;/h3&gt;

&lt;p&gt;There are a few things in the table you may not have seen before, briefly, they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;summary=&quot;&quot;&lt;/code&gt;:&lt;/strong&gt; This is an attribute which provides a brief overview of the table and its contents/purpose.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;caption&lt;/code&gt;:&lt;/strong&gt; This is a table specific caption, essentially a heading/title explicitly for the table.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;colgroup&lt;/code&gt; and &lt;code&gt;col&lt;/code&gt;:&lt;/strong&gt; This is an essentially invisible element that just adds semantic meaning to the table. It defines the columns and can—in some browsers—be used to style them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;scope=&quot;col&quot;&lt;/code&gt;:&lt;/strong&gt; This is an attribute which tells the browser whether the &lt;code&gt;th&lt;/code&gt; is a title for a column or a row. This then obviously makes the other possible attribute value &lt;code&gt;row&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;tfoot&lt;/code&gt;:&lt;/strong&gt; This is a table footer and contain pretty much anything you like. It must however appear &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;tbody&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Typographic work planner CSS:&lt;/h2&gt;

&lt;p&gt;The CSS used to create the work planner is pretty basic, with a dash or progressive enhancement added via some CSS3. &lt;a href=&quot;http://csswizardry.com/demos/typographic-work-planner/css/style.css&quot;&gt;View the full CSS file with reset etc.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;table{
  margin-bottom:20px;
}
td,th{
  border-bottom:1px solid #ccc;
}
tbody tr{
  background:#fff;
}
tbody tr:nth-of-type(even){
  background:#ffc;
}
th,tfoot,caption{
  font-family:Helvetica, Arial, Verdana, sans-serif;
  font-size:1.6em;
  font-weight:bold;
}
th,td{
  padding:10px 0;
}
caption{
  font-size:2.4em;
  position:absolute;
  left:-9999px;
}
.date{
  width:160px;
  padding:10px 15px 10px 5px;
  font-family:Georgia, &quot;Times New Roman&quot;, Times;
  font-size:1.6em;
  font-style:italic;
}
.user{
  width:460px;
  padding-right:20px;
  font-family:Helvetica, Arial, Verdana, sans-serif;
  font-size:4.8em;
  font-weight:bold;
}
.desc{
  width:280px;
  font-size:1.2em;
}
tbody tr.today{
  background:#ff8;

  text-shadow:1px 1px 1px rgba(0,0,0,0.3);
}
tfoot{
  color:#666;
}
tfoot td{
  padding:10px 5px;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;&lt;a href=&quot;http://csswizardry.com/demos/typographic-work-planner/&quot;&gt;Typographic work planner demo&lt;/a&gt;&lt;/h2&gt;
</content>
 </entry>
 
 <entry>
   <title>Snow in Leeds</title>
   <link href="http://inuitcss.com/2009/12/snow-in-leeds"/>
   <updated>2009-12-18T10:22:03+00:00</updated>
   <id>http://inuitcss.com/2009/12/snow-in-leeds</id>
   <content type="html">&lt;p&gt;Last night in Leeds it started snowing! I love snow… it's just a real shame that we don't get it enough of it any more. On the way into work &lt;a href=&quot;http://suzannahaworth.com/&quot;&gt;Suze&lt;/a&gt; and I saw some nice photo opportunities but as she didn't have her camera on her &lt;del&gt;we&lt;/del&gt; she missed out. We did however get a few nice iPhone snaps once we'd got into the centre of town just before work:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A little tilt-shift one I got&lt;/strong&gt;:
&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2009/12/snow.jpg&quot; alt=&quot;Tilt shift shot of a snowy Park Square in Leeds&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A shot of Park Square by &lt;a href=&quot;http://twitter.com/suzehaworth&quot;&gt;@suzehaworth&lt;/a&gt;&lt;/strong&gt;: &lt;a href=&quot;//suzannahaworth.com/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2009/12/snow2.jpg&quot; alt=&quot;Snow on Park Square by Suzanna Haworth&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A shot of Leeds Town hall by &lt;a href=&quot;http://twitter.com/suzehaworth&quot;&gt;@suzehaworth&lt;/a&gt;&lt;/strong&gt;: &lt;a href=&quot;//suzannahaworth.com/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2009/12/snow1.jpg&quot; alt=&quot;A shot of the Town Hall in Leeds&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Test article from the iPhone</title>
   <link href="http://inuitcss.com/2009/12/test-article-from-the-iphone"/>
   <updated>2009-12-17T20:48:34+00:00</updated>
   <id>http://inuitcss.com/2009/12/test-article-from-the-iphone</id>
   <content type="html">&lt;p&gt;This is merely a test article written from my iPhone. Please forgive any loose ends on the site—it was developed in a matter of hours and released possibly too soon. Any bug reporting would be very much appreciated.&lt;/p&gt;

&lt;p&gt;Harry — &lt;a href=&quot;//twitter.com/csswizardry&quot;&gt;twitter.com/csswizardry&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Quick Tips—A series of quick web development tips</title>
   <link href="http://inuitcss.com/2009/12/quick-tipsa-series-of-quick-web-development-tips"/>
   <updated>2009-12-17T19:55:18+00:00</updated>
   <id>http://inuitcss.com/2009/12/quick-tipsa-series-of-quick-web-development-tips</id>
   <content type="html">&lt;p&gt;Quite some time ago I wrote the popular Web Standards document &lt;a href=&quot;http://csswizardry.com/web-design+/&quot;&gt;Web Design+&lt;/a&gt;. This is quite a long and verbose document covering all manner of things from images to navigation and back again. I decided however that a more bitesize version was needed. Enter &lt;a href=&quot;http://csswizardry.com/quick-tips/&quot;&gt;Quick Tips&lt;/a&gt;… Quick Tips is intended to provide developers with short, single pieces of useful information that can then be quickly shared via Twitter.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://csswizardry.com/quick-tips/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2009/12/quick.jpg&quot; alt=&quot;A screenshot of Quick Tips&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://csswizardry.com/quick-tips/&quot;&gt;Quick Tips&lt;/a&gt; has proved popular in its short time in existence, getting mentions and Tweets from all manner of users across the globe.&lt;/p&gt;

&lt;p&gt;If you have a tip you'd like to share just &lt;a href=&quot;http://csswizardry.com/contact/&quot;&gt;let me know&lt;/a&gt;, and I'll add it with full accreditation.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Suzanna Haworth Photography</title>
   <link href="http://inuitcss.com/2009/12/suzanna-haworth-photography"/>
   <updated>2009-12-17T19:53:55+00:00</updated>
   <id>http://inuitcss.com/2009/12/suzanna-haworth-photography</id>
   <content type="html">&lt;p&gt;I recently completed a complete design and build for my girlfriend, &lt;a href=&quot;http://suzannahaworth.com/&quot;&gt;Suzanna Haworth&lt;/a&gt;. She's something of a photographer and we decided that we ought to knock her a little site up to showcase her works. As she wasn't a client per se I had much more creative freedom than I usually would so I decided to exercise some CSS3 and progressive enhancement on the site.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://suzannahaworth.com/&quot;&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2009/12/suze-site.jpg&quot; alt=&quot;Screenshot of Suzanna Haworth’s website&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The site also uses some custom written PHP which makes really light weight of adding new galleries and images, as well as making it pretty efficient for such a heavy website.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS Wizardry—a realignment</title>
   <link href="http://inuitcss.com/2009/12/css-wizardrya-realignment"/>
   <updated>2009-12-17T19:51:14+00:00</updated>
   <id>http://inuitcss.com/2009/12/css-wizardrya-realignment</id>
   <content type="html">&lt;p&gt;After quite some time with version three of CSS Wizardry being live and not really changing I decided that it was time I did something with it. I was more than happy with the design—it had received some nice responses—however I thought the code could be neatened up somewhat. I decided to maintain as much of the previous design as possible and add Wordpress as a CMS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://csswizardry.com/wp-content/uploads/2009/12/shot.jpg&quot; alt=&quot;Screenshot of CSS Wizardry version 3.0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After two nights work I managed to port most of the styles over and get the bulk of the site functioning perfectly, moving copy across bit by bit. Despite a couple of minor flaws I am, on the whole, very impressed with Wordpress.&lt;/p&gt;

&lt;p&gt;Now hopefully I'll be a little more inclined to update the site—something I've been pretty slack with of late...&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
